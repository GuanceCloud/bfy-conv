// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.6.1
// source: calltree.proto

package callTree

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type CallEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id                 string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	SpanId             string `protobuf:"bytes,2,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	Sequence           int32  `protobuf:"varint,3,opt,name=sequence,proto3" json:"sequence,omitempty"`
	StartElapsed       int32  `protobuf:"varint,4,opt,name=start_elapsed,json=startElapsed,proto3" json:"start_elapsed,omitempty"`
	EndElapsed         int32  `protobuf:"varint,5,opt,name=end_elapsed,json=endElapsed,proto3" json:"end_elapsed,omitempty"`
	Rpc                string `protobuf:"bytes,6,opt,name=rpc,proto3" json:"rpc,omitempty"`
	ServiceType        int32  `protobuf:"varint,7,opt,name=service_type,json=serviceType,proto3" json:"service_type,omitempty"`
	EndPoint           string `protobuf:"bytes,8,opt,name=end_point,json=endPoint,proto3" json:"end_point,omitempty"`
	Depth              int32  `protobuf:"varint,9,opt,name=depth,proto3" json:"depth,omitempty"`
	NextSpanId         int64  `protobuf:"varint,10,opt,name=next_span_id,json=nextSpanId,proto3" json:"next_span_id,omitempty"`
	DestinationId      string `protobuf:"bytes,11,opt,name=destination_id,json=destinationId,proto3" json:"destination_id,omitempty"`
	ApiId              int32  `protobuf:"varint,12,opt,name=api_id,json=apiId,proto3" json:"api_id,omitempty"`
	ExceptionClassName string `protobuf:"bytes,13,opt,name=exception_class_name,json=exceptionClassName,proto3" json:"exception_class_name,omitempty"`
	AsyncId            int32  `protobuf:"varint,14,opt,name=async_id,json=asyncId,proto3" json:"async_id,omitempty"`
	NextAsyncId        int32  `protobuf:"varint,15,opt,name=next_async_id,json=nextAsyncId,proto3" json:"next_async_id,omitempty"`
	AsyncSequence      int32  `protobuf:"varint,16,opt,name=async_sequence,json=asyncSequence,proto3" json:"async_sequence,omitempty"`
	ApiInfo            string `protobuf:"bytes,17,opt,name=api_info,json=apiInfo,proto3" json:"api_info,omitempty"`
	LineNumber         int32  `protobuf:"varint,18,opt,name=line_number,json=lineNumber,proto3" json:"line_number,omitempty"`
	Retcode            int32  `protobuf:"varint,19,opt,name=retcode,proto3" json:"retcode,omitempty"`
	RequestHeaders     string `protobuf:"bytes,20,opt,name=request_headers,json=requestHeaders,proto3" json:"request_headers,omitempty"`
	RequestBody        string `protobuf:"bytes,21,opt,name=request_body,json=requestBody,proto3" json:"request_body,omitempty"`
	ResponseBody       string `protobuf:"bytes,22,opt,name=response_body,json=responseBody,proto3" json:"response_body,omitempty"`
	Status             uint32 `protobuf:"varint,23,opt,name=status,proto3" json:"status,omitempty"`
	Url                string `protobuf:"bytes,24,opt,name=url,proto3" json:"url,omitempty"`
	Method             string `protobuf:"bytes,25,opt,name=method,proto3" json:"method,omitempty"`
	Arguments          string `protobuf:"bytes,26,opt,name=arguments,proto3" json:"arguments,omitempty"`
	Ps                 string `protobuf:"bytes,27,opt,name=ps,proto3" json:"ps,omitempty"`
	Tenant             string `protobuf:"bytes,28,opt,name=tenant,proto3" json:"tenant,omitempty"`
	Appid              string `protobuf:"bytes,29,opt,name=appid,proto3" json:"appid,omitempty"`
	Appsysid           string `protobuf:"bytes,30,opt,name=appsysid,proto3" json:"appsysid,omitempty"`
	AgentId            string `protobuf:"bytes,31,opt,name=agent_id,json=agentId,proto3" json:"agent_id,omitempty"`
	AgentIp            string `protobuf:"bytes,32,opt,name=agent_ip,json=agentIp,proto3" json:"agent_ip,omitempty"`
	Trxid              string `protobuf:"bytes,33,opt,name=trxid,proto3" json:"trxid,omitempty"`
	BootTime           int64  `protobuf:"varint,34,opt,name=boot_time,json=bootTime,proto3" json:"boot_time,omitempty"`
	HasException       bool   `protobuf:"varint,35,opt,name=has_exception,json=hasException,proto3" json:"has_exception,omitempty"`
	ExceptionId        string `protobuf:"bytes,36,opt,name=exception_id,json=exceptionId,proto3" json:"exception_id,omitempty"`
	AppServiceType     int32  `protobuf:"varint,37,opt,name=app_service_type,json=appServiceType,proto3" json:"app_service_type,omitempty"`
	UserId             string `protobuf:"bytes,38,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty"`
	SessionId          string `protobuf:"bytes,39,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Ts                 int64  `protobuf:"varint,40,opt,name=ts,proto3" json:"ts,omitempty"`
	FromWebAndMobile   bool   `protobuf:"varint,41,opt,name=from_web_and_mobile,json=fromWebAndMobile,proto3" json:"from_web_and_mobile,omitempty"`
	TraceId            string `protobuf:"bytes,42,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	IsOtel             bool   `protobuf:"varint,43,opt,name=is_otel,json=isOtel,proto3" json:"is_otel,omitempty"`
	EventCid           string `protobuf:"bytes,44,opt,name=event_cid,json=eventCid,proto3" json:"event_cid,omitempty"`
}

func (x *CallEvent) Reset() {
	*x = CallEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calltree_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallEvent) ProtoMessage() {}

func (x *CallEvent) ProtoReflect() protoreflect.Message {
	mi := &file_calltree_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallEvent.ProtoReflect.Descriptor instead.
func (*CallEvent) Descriptor() ([]byte, []int) {
	return file_calltree_proto_rawDescGZIP(), []int{0}
}

func (x *CallEvent) GetId() string {
	if x != nil {
		return x.Id
	}
	return ""
}

func (x *CallEvent) GetSpanId() string {
	if x != nil {
		return x.SpanId
	}
	return ""
}

func (x *CallEvent) GetSequence() int32 {
	if x != nil {
		return x.Sequence
	}
	return 0
}

func (x *CallEvent) GetStartElapsed() int32 {
	if x != nil {
		return x.StartElapsed
	}
	return 0
}

func (x *CallEvent) GetEndElapsed() int32 {
	if x != nil {
		return x.EndElapsed
	}
	return 0
}

func (x *CallEvent) GetRpc() string {
	if x != nil {
		return x.Rpc
	}
	return ""
}

func (x *CallEvent) GetServiceType() int32 {
	if x != nil {
		return x.ServiceType
	}
	return 0
}

func (x *CallEvent) GetEndPoint() string {
	if x != nil {
		return x.EndPoint
	}
	return ""
}

func (x *CallEvent) GetDepth() int32 {
	if x != nil {
		return x.Depth
	}
	return 0
}

func (x *CallEvent) GetNextSpanId() int64 {
	if x != nil {
		return x.NextSpanId
	}
	return 0
}

func (x *CallEvent) GetDestinationId() string {
	if x != nil {
		return x.DestinationId
	}
	return ""
}

func (x *CallEvent) GetApiId() int32 {
	if x != nil {
		return x.ApiId
	}
	return 0
}

func (x *CallEvent) GetExceptionClassName() string {
	if x != nil {
		return x.ExceptionClassName
	}
	return ""
}

func (x *CallEvent) GetAsyncId() int32 {
	if x != nil {
		return x.AsyncId
	}
	return 0
}

func (x *CallEvent) GetNextAsyncId() int32 {
	if x != nil {
		return x.NextAsyncId
	}
	return 0
}

func (x *CallEvent) GetAsyncSequence() int32 {
	if x != nil {
		return x.AsyncSequence
	}
	return 0
}

func (x *CallEvent) GetApiInfo() string {
	if x != nil {
		return x.ApiInfo
	}
	return ""
}

func (x *CallEvent) GetLineNumber() int32 {
	if x != nil {
		return x.LineNumber
	}
	return 0
}

func (x *CallEvent) GetRetcode() int32 {
	if x != nil {
		return x.Retcode
	}
	return 0
}

func (x *CallEvent) GetRequestHeaders() string {
	if x != nil {
		return x.RequestHeaders
	}
	return ""
}

func (x *CallEvent) GetRequestBody() string {
	if x != nil {
		return x.RequestBody
	}
	return ""
}

func (x *CallEvent) GetResponseBody() string {
	if x != nil {
		return x.ResponseBody
	}
	return ""
}

func (x *CallEvent) GetStatus() uint32 {
	if x != nil {
		return x.Status
	}
	return 0
}

func (x *CallEvent) GetUrl() string {
	if x != nil {
		return x.Url
	}
	return ""
}

func (x *CallEvent) GetMethod() string {
	if x != nil {
		return x.Method
	}
	return ""
}

func (x *CallEvent) GetArguments() string {
	if x != nil {
		return x.Arguments
	}
	return ""
}

func (x *CallEvent) GetPs() string {
	if x != nil {
		return x.Ps
	}
	return ""
}

func (x *CallEvent) GetTenant() string {
	if x != nil {
		return x.Tenant
	}
	return ""
}

func (x *CallEvent) GetAppid() string {
	if x != nil {
		return x.Appid
	}
	return ""
}

func (x *CallEvent) GetAppsysid() string {
	if x != nil {
		return x.Appsysid
	}
	return ""
}

func (x *CallEvent) GetAgentId() string {
	if x != nil {
		return x.AgentId
	}
	return ""
}

func (x *CallEvent) GetAgentIp() string {
	if x != nil {
		return x.AgentIp
	}
	return ""
}

func (x *CallEvent) GetTrxid() string {
	if x != nil {
		return x.Trxid
	}
	return ""
}

func (x *CallEvent) GetBootTime() int64 {
	if x != nil {
		return x.BootTime
	}
	return 0
}

func (x *CallEvent) GetHasException() bool {
	if x != nil {
		return x.HasException
	}
	return false
}

func (x *CallEvent) GetExceptionId() string {
	if x != nil {
		return x.ExceptionId
	}
	return ""
}

func (x *CallEvent) GetAppServiceType() int32 {
	if x != nil {
		return x.AppServiceType
	}
	return 0
}

func (x *CallEvent) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

func (x *CallEvent) GetSessionId() string {
	if x != nil {
		return x.SessionId
	}
	return ""
}

func (x *CallEvent) GetTs() int64 {
	if x != nil {
		return x.Ts
	}
	return 0
}

func (x *CallEvent) GetFromWebAndMobile() bool {
	if x != nil {
		return x.FromWebAndMobile
	}
	return false
}

func (x *CallEvent) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *CallEvent) GetIsOtel() bool {
	if x != nil {
		return x.IsOtel
	}
	return false
}

func (x *CallEvent) GetEventCid() string {
	if x != nil {
		return x.EventCid
	}
	return ""
}

type CallTree struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Callevents []*CallEvent `protobuf:"bytes,1,rep,name=callevents,proto3" json:"callevents,omitempty"`
}

func (x *CallTree) Reset() {
	*x = CallTree{}
	if protoimpl.UnsafeEnabled {
		mi := &file_calltree_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CallTree) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CallTree) ProtoMessage() {}

func (x *CallTree) ProtoReflect() protoreflect.Message {
	mi := &file_calltree_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CallTree.ProtoReflect.Descriptor instead.
func (*CallTree) Descriptor() ([]byte, []int) {
	return file_calltree_proto_rawDescGZIP(), []int{1}
}

func (x *CallTree) GetCallevents() []*CallEvent {
	if x != nil {
		return x.Callevents
	}
	return nil
}

var File_calltree_proto protoreflect.FileDescriptor

var file_calltree_proto_rawDesc = []byte{
	0x0a, 0x0e, 0x63, 0x61, 0x6c, 0x6c, 0x74, 0x72, 0x65, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x12, 0x08, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x72, 0x65, 0x65, 0x22, 0x9a, 0x0a, 0x0a, 0x09, 0x43,
	0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x0e, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x64, 0x12, 0x17, 0x0a, 0x07, 0x73, 0x70, 0x61, 0x6e,
	0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x70, 0x61, 0x6e, 0x49,
	0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x08, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x45, 0x6c, 0x61, 0x70, 0x73,
	0x65, 0x64, 0x12, 0x1f, 0x0a, 0x0b, 0x65, 0x6e, 0x64, 0x5f, 0x65, 0x6c, 0x61, 0x70, 0x73, 0x65,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0a, 0x65, 0x6e, 0x64, 0x45, 0x6c, 0x61, 0x70,
	0x73, 0x65, 0x64, 0x12, 0x10, 0x0a, 0x03, 0x72, 0x70, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x03, 0x72, 0x70, 0x63, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65,
	0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x6e, 0x64, 0x5f,
	0x70, 0x6f, 0x69, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x64,
	0x50, 0x6f, 0x69, 0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x64, 0x65, 0x70, 0x74, 0x68, 0x12, 0x20, 0x0a, 0x0c, 0x6e,
	0x65, 0x78, 0x74, 0x5f, 0x73, 0x70, 0x61, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x03, 0x52, 0x0a, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x70, 0x61, 0x6e, 0x49, 0x64, 0x12, 0x25, 0x0a,
	0x0e, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x64, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x49, 0x64, 0x12, 0x15, 0x0a, 0x06, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x64, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x61, 0x70, 0x69, 0x49, 0x64, 0x12, 0x30, 0x0a, 0x14, 0x65,
	0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x5f, 0x6e,
	0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x09, 0x52, 0x12, 0x65, 0x78, 0x63, 0x65, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x19, 0x0a,
	0x08, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x07, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x22, 0x0a, 0x0d, 0x6e, 0x65, 0x78, 0x74,
	0x5f, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x69, 0x64, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0b, 0x6e, 0x65, 0x78, 0x74, 0x41, 0x73, 0x79, 0x6e, 0x63, 0x49, 0x64, 0x12, 0x25, 0x0a, 0x0e,
	0x61, 0x73, 0x79, 0x6e, 0x63, 0x5f, 0x73, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0d, 0x61, 0x73, 0x79, 0x6e, 0x63, 0x53, 0x65, 0x71, 0x75, 0x65,
	0x6e, 0x63, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x70, 0x69, 0x5f, 0x69, 0x6e, 0x66, 0x6f, 0x18,
	0x11, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x70, 0x69, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1f,
	0x0a, 0x0b, 0x6c, 0x69, 0x6e, 0x65, 0x5f, 0x6e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x12, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x6c, 0x69, 0x6e, 0x65, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12,
	0x18, 0x0a, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x07, 0x72, 0x65, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x27, 0x0a, 0x0f, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x5f, 0x68, 0x65, 0x61, 0x64, 0x65, 0x72, 0x73, 0x18, 0x14, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0e, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x64, 0x65,
	0x72, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x62, 0x6f,
	0x64, 0x79, 0x18, 0x15, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x23, 0x0a, 0x0d, 0x72, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x5f, 0x62, 0x6f, 0x64, 0x79, 0x18, 0x16, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c, 0x72, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x42, 0x6f, 0x64, 0x79, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x17, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x12, 0x10, 0x0a, 0x03, 0x75, 0x72, 0x6c, 0x18, 0x18, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x03, 0x75, 0x72, 0x6c, 0x12, 0x16, 0x0a, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x18, 0x19,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x6d, 0x65, 0x74, 0x68, 0x6f, 0x64, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x09, 0x61, 0x72, 0x67, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x70, 0x73,
	0x18, 0x1b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x70, 0x73, 0x12, 0x16, 0x0a, 0x06, 0x74, 0x65,
	0x6e, 0x61, 0x6e, 0x74, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x74, 0x65, 0x6e, 0x61,
	0x6e, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x18, 0x1d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x05, 0x61, 0x70, 0x70, 0x69, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x73,
	0x79, 0x73, 0x69, 0x64, 0x18, 0x1e, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x61, 0x70, 0x70, 0x73,
	0x79, 0x73, 0x69, 0x64, 0x12, 0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x64,
	0x18, 0x1f, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x64, 0x12,
	0x19, 0x0a, 0x08, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x5f, 0x69, 0x70, 0x18, 0x20, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x07, 0x61, 0x67, 0x65, 0x6e, 0x74, 0x49, 0x70, 0x12, 0x14, 0x0a, 0x05, 0x74, 0x72,
	0x78, 0x69, 0x64, 0x18, 0x21, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x74, 0x72, 0x78, 0x69, 0x64,
	0x12, 0x1b, 0x0a, 0x09, 0x62, 0x6f, 0x6f, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x22, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x08, 0x62, 0x6f, 0x6f, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x23, 0x0a,
	0x0d, 0x68, 0x61, 0x73, 0x5f, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x23,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x68, 0x61, 0x73, 0x45, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x21, 0x0a, 0x0c, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x5f,
	0x69, 0x64, 0x18, 0x24, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x65, 0x78, 0x63, 0x65, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x28, 0x0a, 0x10, 0x61, 0x70, 0x70, 0x5f, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x25, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0e, 0x61, 0x70, 0x70, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12,
	0x17, 0x0a, 0x07, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x26, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x12, 0x1d, 0x0a, 0x0a, 0x73, 0x65, 0x73, 0x73,
	0x69, 0x6f, 0x6e, 0x5f, 0x69, 0x64, 0x18, 0x27, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x73, 0x65,
	0x73, 0x73, 0x69, 0x6f, 0x6e, 0x49, 0x64, 0x12, 0x0e, 0x0a, 0x02, 0x74, 0x73, 0x18, 0x28, 0x20,
	0x01, 0x28, 0x03, 0x52, 0x02, 0x74, 0x73, 0x12, 0x2d, 0x0a, 0x13, 0x66, 0x72, 0x6f, 0x6d, 0x5f,
	0x77, 0x65, 0x62, 0x5f, 0x61, 0x6e, 0x64, 0x5f, 0x6d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x18, 0x29,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x66, 0x72, 0x6f, 0x6d, 0x57, 0x65, 0x62, 0x41, 0x6e, 0x64,
	0x4d, 0x6f, 0x62, 0x69, 0x6c, 0x65, 0x12, 0x19, 0x0a, 0x08, 0x74, 0x72, 0x61, 0x63, 0x65, 0x5f,
	0x69, 0x64, 0x18, 0x2a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x12, 0x17, 0x0a, 0x07, 0x69, 0x73, 0x5f, 0x6f, 0x74, 0x65, 0x6c, 0x18, 0x2b, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x06, 0x69, 0x73, 0x4f, 0x74, 0x65, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x5f, 0x63, 0x69, 0x64, 0x18, 0x2c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65,
	0x76, 0x65, 0x6e, 0x74, 0x43, 0x69, 0x64, 0x22, 0x3f, 0x0a, 0x08, 0x43, 0x61, 0x6c, 0x6c, 0x54,
	0x72, 0x65, 0x65, 0x12, 0x33, 0x0a, 0x0a, 0x63, 0x61, 0x6c, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x63, 0x61, 0x6c, 0x6c, 0x54, 0x72,
	0x65, 0x65, 0x2e, 0x43, 0x61, 0x6c, 0x6c, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x63, 0x61,
	0x6c, 0x6c, 0x65, 0x76, 0x65, 0x6e, 0x74, 0x73, 0x42, 0x0b, 0x5a, 0x09, 0x2f, 0x63, 0x61, 0x6c,
	0x6c, 0x54, 0x72, 0x65, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_calltree_proto_rawDescOnce sync.Once
	file_calltree_proto_rawDescData = file_calltree_proto_rawDesc
)

func file_calltree_proto_rawDescGZIP() []byte {
	file_calltree_proto_rawDescOnce.Do(func() {
		file_calltree_proto_rawDescData = protoimpl.X.CompressGZIP(file_calltree_proto_rawDescData)
	})
	return file_calltree_proto_rawDescData
}

var file_calltree_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_calltree_proto_goTypes = []interface{}{
	(*CallEvent)(nil), // 0: callTree.CallEvent
	(*CallTree)(nil),  // 1: callTree.CallTree
}
var file_calltree_proto_depIdxs = []int32{
	0, // 0: callTree.CallTree.callevents:type_name -> callTree.CallEvent
	1, // [1:1] is the sub-list for method output_type
	1, // [1:1] is the sub-list for method input_type
	1, // [1:1] is the sub-list for extension type_name
	1, // [1:1] is the sub-list for extension extendee
	0, // [0:1] is the sub-list for field type_name
}

func init() { file_calltree_proto_init() }
func file_calltree_proto_init() {
	if File_calltree_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_calltree_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_calltree_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CallTree); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_calltree_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_calltree_proto_goTypes,
		DependencyIndexes: file_calltree_proto_depIdxs,
		MessageInfos:      file_calltree_proto_msgTypes,
	}.Build()
	File_calltree_proto = out.File
	file_calltree_proto_rawDesc = nil
	file_calltree_proto_goTypes = nil
	file_calltree_proto_depIdxs = nil
}
