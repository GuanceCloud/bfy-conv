// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package server

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type TJvmGcType int64
const (
  TJvmGcType_UNKNOWN TJvmGcType = 0
  TJvmGcType_SERIAL TJvmGcType = 1
  TJvmGcType_PARALLEL TJvmGcType = 2
  TJvmGcType_CMS TJvmGcType = 3
  TJvmGcType_G1 TJvmGcType = 4
  TJvmGcType_JRockitThroughput TJvmGcType = 5
)

func (p TJvmGcType) String() string {
  switch p {
  case TJvmGcType_UNKNOWN: return "UNKNOWN"
  case TJvmGcType_SERIAL: return "SERIAL"
  case TJvmGcType_PARALLEL: return "PARALLEL"
  case TJvmGcType_CMS: return "CMS"
  case TJvmGcType_G1: return "G1"
  case TJvmGcType_JRockitThroughput: return "JRockitThroughput"
  }
  return "<UNSET>"
}

func TJvmGcTypeFromString(s string) (TJvmGcType, error) {
  switch s {
  case "UNKNOWN": return TJvmGcType_UNKNOWN, nil 
  case "SERIAL": return TJvmGcType_SERIAL, nil 
  case "PARALLEL": return TJvmGcType_PARALLEL, nil 
  case "CMS": return TJvmGcType_CMS, nil 
  case "G1": return TJvmGcType_G1, nil 
  case "JRockitThroughput": return TJvmGcType_JRockitThroughput, nil 
  }
  return TJvmGcType(0), fmt.Errorf("not a valid TJvmGcType string")
}


func TJvmGcTypePtr(v TJvmGcType) *TJvmGcType { return &v }

func (p TJvmGcType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TJvmGcType) UnmarshalText(text []byte) error {
q, err := TJvmGcTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TJvmGcType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TJvmGcType(v)
return nil
}

func (p * TJvmGcType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ServerInfo
//  - VmArgs_
//  - ServiceInfos
type TServerMetaData struct {
  ServerInfo *string `thrift:"serverInfo,1" db:"serverInfo" json:"serverInfo,omitempty"`
  VmArgs_ []string `thrift:"vmArgs,2" db:"vmArgs" json:"vmArgs,omitempty"`
  // unused fields # 3 to 9
  ServiceInfos []*TServiceInfo `thrift:"serviceInfos,10" db:"serviceInfos" json:"serviceInfos,omitempty"`
}

func NewTServerMetaData() *TServerMetaData {
  return &TServerMetaData{}
}

var TServerMetaData_ServerInfo_DEFAULT string
func (p *TServerMetaData) GetServerInfo() string {
  if !p.IsSetServerInfo() {
    return TServerMetaData_ServerInfo_DEFAULT
  }
return *p.ServerInfo
}
var TServerMetaData_VmArgs__DEFAULT []string

func (p *TServerMetaData) GetVmArgs_() []string {
  return p.VmArgs_
}
var TServerMetaData_ServiceInfos_DEFAULT []*TServiceInfo

func (p *TServerMetaData) GetServiceInfos() []*TServiceInfo {
  return p.ServiceInfos
}
func (p *TServerMetaData) IsSetServerInfo() bool {
  return p.ServerInfo != nil
}

func (p *TServerMetaData) IsSetVmArgs_() bool {
  return p.VmArgs_ != nil
}

func (p *TServerMetaData) IsSetServiceInfos() bool {
  return p.ServiceInfos != nil
}

func (p *TServerMetaData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServerMetaData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServerInfo = &v
}
  return nil
}

func (p *TServerMetaData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.VmArgs_ =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.VmArgs_ = append(p.VmArgs_, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServerMetaData)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TServiceInfo, 0, size)
  p.ServiceInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TServiceInfo{}
    if err := _elem1.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.ServiceInfos = append(p.ServiceInfos, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServerMetaData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TServerMetaData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServerMetaData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServerInfo() {
    if err := oprot.WriteFieldBegin(ctx, "serverInfo", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServerInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serverInfo (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverInfo: ", p), err) }
  }
  return err
}

func (p *TServerMetaData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVmArgs_() {
    if err := oprot.WriteFieldBegin(ctx, "vmArgs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vmArgs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.VmArgs_)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VmArgs_ {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vmArgs: ", p), err) }
  }
  return err
}

func (p *TServerMetaData) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceInfos() {
    if err := oprot.WriteFieldBegin(ctx, "serviceInfos", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceInfos: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ServiceInfos)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ServiceInfos {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceInfos: ", p), err) }
  }
  return err
}

func (p *TServerMetaData) Equals(other *TServerMetaData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServerInfo != other.ServerInfo {
    if p.ServerInfo == nil || other.ServerInfo == nil {
      return false
    }
    if (*p.ServerInfo) != (*other.ServerInfo) { return false }
  }
  if len(p.VmArgs_) != len(other.VmArgs_) { return false }
  for i, _tgt := range p.VmArgs_ {
    _src2 := other.VmArgs_[i]
    if _tgt != _src2 { return false }
  }
  if len(p.ServiceInfos) != len(other.ServiceInfos) { return false }
  for i, _tgt := range p.ServiceInfos {
    _src3 := other.ServiceInfos[i]
    if !_tgt.Equals(_src3) { return false }
  }
  return true
}

func (p *TServerMetaData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerMetaData(%+v)", *p)
}

func (p *TServerMetaData) Validate() error {
  return nil
}
// Attributes:
//  - ServiceName
//  - ServiceLibs
type TServiceInfo struct {
  ServiceName *string `thrift:"serviceName,1" db:"serviceName" json:"serviceName,omitempty"`
  ServiceLibs []string `thrift:"serviceLibs,2" db:"serviceLibs" json:"serviceLibs,omitempty"`
}

func NewTServiceInfo() *TServiceInfo {
  return &TServiceInfo{}
}

var TServiceInfo_ServiceName_DEFAULT string
func (p *TServiceInfo) GetServiceName() string {
  if !p.IsSetServiceName() {
    return TServiceInfo_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var TServiceInfo_ServiceLibs_DEFAULT []string

func (p *TServiceInfo) GetServiceLibs() []string {
  return p.ServiceLibs
}
func (p *TServiceInfo) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *TServiceInfo) IsSetServiceLibs() bool {
  return p.ServiceLibs != nil
}

func (p *TServiceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServiceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *TServiceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ServiceLibs =  tSlice
  for i := 0; i < size; i ++ {
var _elem4 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem4 = v
}
    p.ServiceLibs = append(p.ServiceLibs, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServiceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TServiceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServiceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin(ctx, "serviceName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  }
  return err
}

func (p *TServiceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceLibs() {
    if err := oprot.WriteFieldBegin(ctx, "serviceLibs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceLibs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ServiceLibs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ServiceLibs {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceLibs: ", p), err) }
  }
  return err
}

func (p *TServiceInfo) Equals(other *TServiceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServiceName != other.ServiceName {
    if p.ServiceName == nil || other.ServiceName == nil {
      return false
    }
    if (*p.ServiceName) != (*other.ServiceName) { return false }
  }
  if len(p.ServiceLibs) != len(other.ServiceLibs) { return false }
  for i, _tgt := range p.ServiceLibs {
    _src5 := other.ServiceLibs[i]
    if _tgt != _src5 { return false }
  }
  return true
}

func (p *TServiceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServiceInfo(%+v)", *p)
}

func (p *TServiceInfo) Validate() error {
  return nil
}
// Attributes:
//  - Version
//  - VmVersion
//  - GcType
type TJvmInfo struct {
  Version int16 `thrift:"version,1" db:"version" json:"version"`
  VmVersion *string `thrift:"vmVersion,2" db:"vmVersion" json:"vmVersion,omitempty"`
  GcType TJvmGcType `thrift:"gcType,3" db:"gcType" json:"gcType"`
}

func NewTJvmInfo() *TJvmInfo {
  return &TJvmInfo{
GcType: 0,
}
}


func (p *TJvmInfo) GetVersion() int16 {
  return p.Version
}
var TJvmInfo_VmVersion_DEFAULT string
func (p *TJvmInfo) GetVmVersion() string {
  if !p.IsSetVmVersion() {
    return TJvmInfo_VmVersion_DEFAULT
  }
return *p.VmVersion
}
var TJvmInfo_GcType_DEFAULT TJvmGcType = 0

func (p *TJvmInfo) GetGcType() TJvmGcType {
  return p.GcType
}
func (p *TJvmInfo) IsSetVmVersion() bool {
  return p.VmVersion != nil
}

func (p *TJvmInfo) IsSetGcType() bool {
  return p.GcType != TJvmInfo_GcType_DEFAULT
}

func (p *TJvmInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TJvmInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TJvmInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VmVersion = &v
}
  return nil
}

func (p *TJvmInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TJvmGcType(v)
  p.GcType = temp
}
  return nil
}

func (p *TJvmInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TJvmInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TJvmInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *TJvmInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVmVersion() {
    if err := oprot.WriteFieldBegin(ctx, "vmVersion", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vmVersion: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.VmVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.vmVersion (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vmVersion: ", p), err) }
  }
  return err
}

func (p *TJvmInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGcType() {
    if err := oprot.WriteFieldBegin(ctx, "gcType", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gcType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.GcType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gcType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gcType: ", p), err) }
  }
  return err
}

func (p *TJvmInfo) Equals(other *TJvmInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.VmVersion != other.VmVersion {
    if p.VmVersion == nil || other.VmVersion == nil {
      return false
    }
    if (*p.VmVersion) != (*other.VmVersion) { return false }
  }
  if p.GcType != other.GcType { return false }
  return true
}

func (p *TJvmInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TJvmInfo(%+v)", *p)
}

func (p *TJvmInfo) Validate() error {
  return nil
}
// Attributes:
//  - Hostname
//  - IP
//  - Ports
//  - AgentId
//  - ApplicationName
//  - ServiceType
//  - Pid
//  - AgentVersion
//  - VmVersion
//  - StartTimestamp
//  - EndTimestamp
//  - EndStatus
//  - Appkey
//  - OsName
//  - OsVersion
//  - AppId
//  - Tenant
//  - CollectionStatus
//  - ServerMetaData
//  - JvmInfo
type TAgentInfo struct {
  Hostname string `thrift:"hostname,1" db:"hostname" json:"hostname"`
  IP string `thrift:"ip,2" db:"ip" json:"ip"`
  Ports string `thrift:"ports,3" db:"ports" json:"ports"`
  AgentId string `thrift:"agentId,4" db:"agentId" json:"agentId"`
  ApplicationName string `thrift:"applicationName,5" db:"applicationName" json:"applicationName"`
  ServiceType int16 `thrift:"serviceType,6" db:"serviceType" json:"serviceType"`
  Pid int32 `thrift:"pid,7" db:"pid" json:"pid"`
  AgentVersion string `thrift:"agentVersion,8" db:"agentVersion" json:"agentVersion"`
  VmVersion string `thrift:"vmVersion,9" db:"vmVersion" json:"vmVersion"`
  StartTimestamp int64 `thrift:"startTimestamp,10" db:"startTimestamp" json:"startTimestamp"`
  EndTimestamp *int64 `thrift:"endTimestamp,11" db:"endTimestamp" json:"endTimestamp,omitempty"`
  EndStatus *int32 `thrift:"endStatus,12" db:"endStatus" json:"endStatus,omitempty"`
  Appkey string `thrift:"appkey,13" db:"appkey" json:"appkey"`
  OsName string `thrift:"osName,14" db:"osName" json:"osName"`
  OsVersion string `thrift:"osVersion,15" db:"osVersion" json:"osVersion"`
  AppId string `thrift:"appId,16" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,17" db:"tenant" json:"tenant"`
  CollectionStatus *string `thrift:"collectionStatus,18" db:"collectionStatus" json:"collectionStatus,omitempty"`
  // unused field # 19
  ServerMetaData *TServerMetaData `thrift:"serverMetaData,20" db:"serverMetaData" json:"serverMetaData,omitempty"`
  // unused fields # 21 to 29
  JvmInfo *TJvmInfo `thrift:"jvmInfo,30" db:"jvmInfo" json:"jvmInfo,omitempty"`
}

func NewTAgentInfo() *TAgentInfo {
  return &TAgentInfo{}
}


func (p *TAgentInfo) GetHostname() string {
  return p.Hostname
}

func (p *TAgentInfo) GetIP() string {
  return p.IP
}

func (p *TAgentInfo) GetPorts() string {
  return p.Ports
}

func (p *TAgentInfo) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentInfo) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TAgentInfo) GetServiceType() int16 {
  return p.ServiceType
}

func (p *TAgentInfo) GetPid() int32 {
  return p.Pid
}

func (p *TAgentInfo) GetAgentVersion() string {
  return p.AgentVersion
}

func (p *TAgentInfo) GetVmVersion() string {
  return p.VmVersion
}

func (p *TAgentInfo) GetStartTimestamp() int64 {
  return p.StartTimestamp
}
var TAgentInfo_EndTimestamp_DEFAULT int64
func (p *TAgentInfo) GetEndTimestamp() int64 {
  if !p.IsSetEndTimestamp() {
    return TAgentInfo_EndTimestamp_DEFAULT
  }
return *p.EndTimestamp
}
var TAgentInfo_EndStatus_DEFAULT int32
func (p *TAgentInfo) GetEndStatus() int32 {
  if !p.IsSetEndStatus() {
    return TAgentInfo_EndStatus_DEFAULT
  }
return *p.EndStatus
}

func (p *TAgentInfo) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentInfo) GetOsName() string {
  return p.OsName
}

func (p *TAgentInfo) GetOsVersion() string {
  return p.OsVersion
}

func (p *TAgentInfo) GetAppId() string {
  return p.AppId
}

func (p *TAgentInfo) GetTenant() string {
  return p.Tenant
}
var TAgentInfo_CollectionStatus_DEFAULT string
func (p *TAgentInfo) GetCollectionStatus() string {
  if !p.IsSetCollectionStatus() {
    return TAgentInfo_CollectionStatus_DEFAULT
  }
return *p.CollectionStatus
}
var TAgentInfo_ServerMetaData_DEFAULT *TServerMetaData
func (p *TAgentInfo) GetServerMetaData() *TServerMetaData {
  if !p.IsSetServerMetaData() {
    return TAgentInfo_ServerMetaData_DEFAULT
  }
return p.ServerMetaData
}
var TAgentInfo_JvmInfo_DEFAULT *TJvmInfo
func (p *TAgentInfo) GetJvmInfo() *TJvmInfo {
  if !p.IsSetJvmInfo() {
    return TAgentInfo_JvmInfo_DEFAULT
  }
return p.JvmInfo
}
func (p *TAgentInfo) IsSetEndTimestamp() bool {
  return p.EndTimestamp != nil
}

func (p *TAgentInfo) IsSetEndStatus() bool {
  return p.EndStatus != nil
}

func (p *TAgentInfo) IsSetCollectionStatus() bool {
  return p.CollectionStatus != nil
}

func (p *TAgentInfo) IsSetServerMetaData() bool {
  return p.ServerMetaData != nil
}

func (p *TAgentInfo) IsSetJvmInfo() bool {
  return p.JvmInfo != nil
}

func (p *TAgentInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *TAgentInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *TAgentInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ports = v
}
  return nil
}

func (p *TAgentInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TAgentInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TAgentInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Pid = v
}
  return nil
}

func (p *TAgentInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AgentVersion = v
}
  return nil
}

func (p *TAgentInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VmVersion = v
}
  return nil
}

func (p *TAgentInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *TAgentInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.EndTimestamp = &v
}
  return nil
}

func (p *TAgentInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EndStatus = &v
}
  return nil
}

func (p *TAgentInfo)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentInfo)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.OsName = v
}
  return nil
}

func (p *TAgentInfo)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.OsVersion = v
}
  return nil
}

func (p *TAgentInfo)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentInfo)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentInfo)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.CollectionStatus = &v
}
  return nil
}

func (p *TAgentInfo)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.ServerMetaData = &TServerMetaData{}
  if err := p.ServerMetaData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerMetaData), err)
  }
  return nil
}

func (p *TAgentInfo)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  p.JvmInfo = &TJvmInfo{
  GcType: 0,
}
  if err := p.JvmInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JvmInfo), err)
  }
  return nil
}

func (p *TAgentInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ports", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ports: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Ports)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ports (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ports: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:agentId: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:applicationName: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:serviceType: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pid", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Pid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pid: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentVersion", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:agentVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentVersion (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:agentVersion: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vmVersion", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vmVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VmVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vmVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vmVersion: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:startTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:startTimestamp: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "endTimestamp", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:endTimestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EndTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endTimestamp (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:endTimestamp: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndStatus() {
    if err := oprot.WriteFieldBegin(ctx, "endStatus", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:endStatus: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.EndStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endStatus (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:endStatus: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:appkey: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "osName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:osName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:osName: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "osVersion", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:osVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OsVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osVersion (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:osVersion: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:appId: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tenant: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCollectionStatus() {
    if err := oprot.WriteFieldBegin(ctx, "collectionStatus", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:collectionStatus: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CollectionStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.collectionStatus (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:collectionStatus: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServerMetaData() {
    if err := oprot.WriteFieldBegin(ctx, "serverMetaData", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:serverMetaData: ", p), err) }
    if err := p.ServerMetaData.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerMetaData), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:serverMetaData: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmInfo() {
    if err := oprot.WriteFieldBegin(ctx, "jvmInfo", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:jvmInfo: ", p), err) }
    if err := p.JvmInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JvmInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:jvmInfo: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) Equals(other *TAgentInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Hostname != other.Hostname { return false }
  if p.IP != other.IP { return false }
  if p.Ports != other.Ports { return false }
  if p.AgentId != other.AgentId { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.ServiceType != other.ServiceType { return false }
  if p.Pid != other.Pid { return false }
  if p.AgentVersion != other.AgentVersion { return false }
  if p.VmVersion != other.VmVersion { return false }
  if p.StartTimestamp != other.StartTimestamp { return false }
  if p.EndTimestamp != other.EndTimestamp {
    if p.EndTimestamp == nil || other.EndTimestamp == nil {
      return false
    }
    if (*p.EndTimestamp) != (*other.EndTimestamp) { return false }
  }
  if p.EndStatus != other.EndStatus {
    if p.EndStatus == nil || other.EndStatus == nil {
      return false
    }
    if (*p.EndStatus) != (*other.EndStatus) { return false }
  }
  if p.Appkey != other.Appkey { return false }
  if p.OsName != other.OsName { return false }
  if p.OsVersion != other.OsVersion { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.CollectionStatus != other.CollectionStatus {
    if p.CollectionStatus == nil || other.CollectionStatus == nil {
      return false
    }
    if (*p.CollectionStatus) != (*other.CollectionStatus) { return false }
  }
  if !p.ServerMetaData.Equals(other.ServerMetaData) { return false }
  if !p.JvmInfo.Equals(other.JvmInfo) { return false }
  return true
}

func (p *TAgentInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentInfo(%+v)", *p)
}

func (p *TAgentInfo) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - JvmMemoryHeapUsed
//  - JvmMemoryHeapMax
//  - JvmMemoryNonHeapUsed
//  - JvmMemoryNonHeapMax
//  - JvmGcOldCount
//  - JvmGcOldTime
//  - JvmGcDetailed
//  - JvmMemoryNonHeapCommitted
//  - TotalPhysicalMemory
//  - TExecuteDfs
//  - TExecuteIostat
//  - JdbcConnNum
//  - ThreadNum
//  - JvmGcOldCountNew
//  - JvmGcOldTimeNew
type TJvmGc struct {
  Type TJvmGcType `thrift:"type,1" db:"type" json:"type"`
  JvmMemoryHeapUsed int64 `thrift:"jvmMemoryHeapUsed,2" db:"jvmMemoryHeapUsed" json:"jvmMemoryHeapUsed"`
  JvmMemoryHeapMax int64 `thrift:"jvmMemoryHeapMax,3" db:"jvmMemoryHeapMax" json:"jvmMemoryHeapMax"`
  JvmMemoryNonHeapUsed int64 `thrift:"jvmMemoryNonHeapUsed,4" db:"jvmMemoryNonHeapUsed" json:"jvmMemoryNonHeapUsed"`
  JvmMemoryNonHeapMax int64 `thrift:"jvmMemoryNonHeapMax,5" db:"jvmMemoryNonHeapMax" json:"jvmMemoryNonHeapMax"`
  JvmGcOldCount int64 `thrift:"jvmGcOldCount,6" db:"jvmGcOldCount" json:"jvmGcOldCount"`
  JvmGcOldTime int64 `thrift:"jvmGcOldTime,7" db:"jvmGcOldTime" json:"jvmGcOldTime"`
  JvmGcDetailed *TJvmGcDetailed `thrift:"jvmGcDetailed,8" db:"jvmGcDetailed" json:"jvmGcDetailed,omitempty"`
  JvmMemoryNonHeapCommitted int64 `thrift:"jvmMemoryNonHeapCommitted,9" db:"jvmMemoryNonHeapCommitted" json:"jvmMemoryNonHeapCommitted"`
  TotalPhysicalMemory *int64 `thrift:"totalPhysicalMemory,10" db:"totalPhysicalMemory" json:"totalPhysicalMemory,omitempty"`
  TExecuteDfs []*TExecuteDf `thrift:"tExecuteDfs,11" db:"tExecuteDfs" json:"tExecuteDfs,omitempty"`
  TExecuteIostat *TExecuteIostat `thrift:"tExecuteIostat,12" db:"tExecuteIostat" json:"tExecuteIostat,omitempty"`
  JdbcConnNum *int16 `thrift:"jdbcConnNum,13" db:"jdbcConnNum" json:"jdbcConnNum,omitempty"`
  ThreadNum *int32 `thrift:"threadNum,14" db:"threadNum" json:"threadNum,omitempty"`
  JvmGcOldCountNew *int64 `thrift:"jvmGcOldCountNew,15" db:"jvmGcOldCountNew" json:"jvmGcOldCountNew,omitempty"`
  JvmGcOldTimeNew *int64 `thrift:"jvmGcOldTimeNew,16" db:"jvmGcOldTimeNew" json:"jvmGcOldTimeNew,omitempty"`
}

func NewTJvmGc() *TJvmGc {
  return &TJvmGc{
Type: 0,
}
}


func (p *TJvmGc) GetType() TJvmGcType {
  return p.Type
}

func (p *TJvmGc) GetJvmMemoryHeapUsed() int64 {
  return p.JvmMemoryHeapUsed
}

func (p *TJvmGc) GetJvmMemoryHeapMax() int64 {
  return p.JvmMemoryHeapMax
}

func (p *TJvmGc) GetJvmMemoryNonHeapUsed() int64 {
  return p.JvmMemoryNonHeapUsed
}

func (p *TJvmGc) GetJvmMemoryNonHeapMax() int64 {
  return p.JvmMemoryNonHeapMax
}

func (p *TJvmGc) GetJvmGcOldCount() int64 {
  return p.JvmGcOldCount
}

func (p *TJvmGc) GetJvmGcOldTime() int64 {
  return p.JvmGcOldTime
}
var TJvmGc_JvmGcDetailed_DEFAULT *TJvmGcDetailed
func (p *TJvmGc) GetJvmGcDetailed() *TJvmGcDetailed {
  if !p.IsSetJvmGcDetailed() {
    return TJvmGc_JvmGcDetailed_DEFAULT
  }
return p.JvmGcDetailed
}

func (p *TJvmGc) GetJvmMemoryNonHeapCommitted() int64 {
  return p.JvmMemoryNonHeapCommitted
}
var TJvmGc_TotalPhysicalMemory_DEFAULT int64
func (p *TJvmGc) GetTotalPhysicalMemory() int64 {
  if !p.IsSetTotalPhysicalMemory() {
    return TJvmGc_TotalPhysicalMemory_DEFAULT
  }
return *p.TotalPhysicalMemory
}
var TJvmGc_TExecuteDfs_DEFAULT []*TExecuteDf

func (p *TJvmGc) GetTExecuteDfs() []*TExecuteDf {
  return p.TExecuteDfs
}
var TJvmGc_TExecuteIostat_DEFAULT *TExecuteIostat
func (p *TJvmGc) GetTExecuteIostat() *TExecuteIostat {
  if !p.IsSetTExecuteIostat() {
    return TJvmGc_TExecuteIostat_DEFAULT
  }
return p.TExecuteIostat
}
var TJvmGc_JdbcConnNum_DEFAULT int16
func (p *TJvmGc) GetJdbcConnNum() int16 {
  if !p.IsSetJdbcConnNum() {
    return TJvmGc_JdbcConnNum_DEFAULT
  }
return *p.JdbcConnNum
}
var TJvmGc_ThreadNum_DEFAULT int32
func (p *TJvmGc) GetThreadNum() int32 {
  if !p.IsSetThreadNum() {
    return TJvmGc_ThreadNum_DEFAULT
  }
return *p.ThreadNum
}
var TJvmGc_JvmGcOldCountNew_DEFAULT int64
func (p *TJvmGc) GetJvmGcOldCountNew() int64 {
  if !p.IsSetJvmGcOldCountNew() {
    return TJvmGc_JvmGcOldCountNew_DEFAULT
  }
return *p.JvmGcOldCountNew
}
var TJvmGc_JvmGcOldTimeNew_DEFAULT int64
func (p *TJvmGc) GetJvmGcOldTimeNew() int64 {
  if !p.IsSetJvmGcOldTimeNew() {
    return TJvmGc_JvmGcOldTimeNew_DEFAULT
  }
return *p.JvmGcOldTimeNew
}
func (p *TJvmGc) IsSetJvmGcDetailed() bool {
  return p.JvmGcDetailed != nil
}

func (p *TJvmGc) IsSetTotalPhysicalMemory() bool {
  return p.TotalPhysicalMemory != nil
}

func (p *TJvmGc) IsSetTExecuteDfs() bool {
  return p.TExecuteDfs != nil
}

func (p *TJvmGc) IsSetTExecuteIostat() bool {
  return p.TExecuteIostat != nil
}

func (p *TJvmGc) IsSetJdbcConnNum() bool {
  return p.JdbcConnNum != nil
}

func (p *TJvmGc) IsSetThreadNum() bool {
  return p.ThreadNum != nil
}

func (p *TJvmGc) IsSetJvmGcOldCountNew() bool {
  return p.JvmGcOldCountNew != nil
}

func (p *TJvmGc) IsSetJvmGcOldTimeNew() bool {
  return p.JvmGcOldTimeNew != nil
}

func (p *TJvmGc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TJvmGc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TJvmGcType(v)
  p.Type = temp
}
  return nil
}

func (p *TJvmGc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JvmMemoryHeapUsed = v
}
  return nil
}

func (p *TJvmGc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JvmMemoryHeapMax = v
}
  return nil
}

func (p *TJvmGc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.JvmMemoryNonHeapUsed = v
}
  return nil
}

func (p *TJvmGc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.JvmMemoryNonHeapMax = v
}
  return nil
}

func (p *TJvmGc)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.JvmGcOldCount = v
}
  return nil
}

func (p *TJvmGc)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.JvmGcOldTime = v
}
  return nil
}

func (p *TJvmGc)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.JvmGcDetailed = &TJvmGcDetailed{}
  if err := p.JvmGcDetailed.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JvmGcDetailed), err)
  }
  return nil
}

func (p *TJvmGc)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.JvmMemoryNonHeapCommitted = v
}
  return nil
}

func (p *TJvmGc)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalPhysicalMemory = &v
}
  return nil
}

func (p *TJvmGc)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TExecuteDf, 0, size)
  p.TExecuteDfs =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TExecuteDf{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.TExecuteDfs = append(p.TExecuteDfs, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TJvmGc)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  p.TExecuteIostat = &TExecuteIostat{}
  if err := p.TExecuteIostat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TExecuteIostat), err)
  }
  return nil
}

func (p *TJvmGc)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.JdbcConnNum = &v
}
  return nil
}

func (p *TJvmGc)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ThreadNum = &v
}
  return nil
}

func (p *TJvmGc)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.JvmGcOldCountNew = &v
}
  return nil
}

func (p *TJvmGc)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.JvmGcOldTimeNew = &v
}
  return nil
}

func (p *TJvmGc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TJvmGc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TJvmGc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TJvmGc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryHeapUsed", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jvmMemoryHeapUsed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryHeapUsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryHeapUsed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jvmMemoryHeapUsed: ", p), err) }
  return err
}

func (p *TJvmGc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryHeapMax", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jvmMemoryHeapMax: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryHeapMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryHeapMax (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jvmMemoryHeapMax: ", p), err) }
  return err
}

func (p *TJvmGc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryNonHeapUsed", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jvmMemoryNonHeapUsed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryNonHeapUsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapUsed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jvmMemoryNonHeapUsed: ", p), err) }
  return err
}

func (p *TJvmGc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryNonHeapMax", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jvmMemoryNonHeapMax: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryNonHeapMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapMax (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jvmMemoryNonHeapMax: ", p), err) }
  return err
}

func (p *TJvmGc) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmGcOldCount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jvmGcOldCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmGcOldCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jvmGcOldCount: ", p), err) }
  return err
}

func (p *TJvmGc) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmGcOldTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:jvmGcOldTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmGcOldTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:jvmGcOldTime: ", p), err) }
  return err
}

func (p *TJvmGc) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcDetailed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcDetailed", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jvmGcDetailed: ", p), err) }
    if err := p.JvmGcDetailed.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JvmGcDetailed), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jvmGcDetailed: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryNonHeapCommitted", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:jvmMemoryNonHeapCommitted: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryNonHeapCommitted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapCommitted (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:jvmMemoryNonHeapCommitted: ", p), err) }
  return err
}

func (p *TJvmGc) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalPhysicalMemory() {
    if err := oprot.WriteFieldBegin(ctx, "totalPhysicalMemory", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:totalPhysicalMemory: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TotalPhysicalMemory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalPhysicalMemory (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:totalPhysicalMemory: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTExecuteDfs() {
    if err := oprot.WriteFieldBegin(ctx, "tExecuteDfs", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:tExecuteDfs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TExecuteDfs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TExecuteDfs {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:tExecuteDfs: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTExecuteIostat() {
    if err := oprot.WriteFieldBegin(ctx, "tExecuteIostat", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tExecuteIostat: ", p), err) }
    if err := p.TExecuteIostat.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TExecuteIostat), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tExecuteIostat: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJdbcConnNum() {
    if err := oprot.WriteFieldBegin(ctx, "jdbcConnNum", thrift.I16, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:jdbcConnNum: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.JdbcConnNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jdbcConnNum (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:jdbcConnNum: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadNum() {
    if err := oprot.WriteFieldBegin(ctx, "threadNum", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:threadNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ThreadNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadNum (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:threadNum: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcOldCountNew() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcOldCountNew", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:jvmGcOldCountNew: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcOldCountNew)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldCountNew (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:jvmGcOldCountNew: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcOldTimeNew() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcOldTimeNew", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:jvmGcOldTimeNew: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcOldTimeNew)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldTimeNew (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:jvmGcOldTimeNew: ", p), err) }
  }
  return err
}

func (p *TJvmGc) Equals(other *TJvmGc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.JvmMemoryHeapUsed != other.JvmMemoryHeapUsed { return false }
  if p.JvmMemoryHeapMax != other.JvmMemoryHeapMax { return false }
  if p.JvmMemoryNonHeapUsed != other.JvmMemoryNonHeapUsed { return false }
  if p.JvmMemoryNonHeapMax != other.JvmMemoryNonHeapMax { return false }
  if p.JvmGcOldCount != other.JvmGcOldCount { return false }
  if p.JvmGcOldTime != other.JvmGcOldTime { return false }
  if !p.JvmGcDetailed.Equals(other.JvmGcDetailed) { return false }
  if p.JvmMemoryNonHeapCommitted != other.JvmMemoryNonHeapCommitted { return false }
  if p.TotalPhysicalMemory != other.TotalPhysicalMemory {
    if p.TotalPhysicalMemory == nil || other.TotalPhysicalMemory == nil {
      return false
    }
    if (*p.TotalPhysicalMemory) != (*other.TotalPhysicalMemory) { return false }
  }
  if len(p.TExecuteDfs) != len(other.TExecuteDfs) { return false }
  for i, _tgt := range p.TExecuteDfs {
    _src7 := other.TExecuteDfs[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if !p.TExecuteIostat.Equals(other.TExecuteIostat) { return false }
  if p.JdbcConnNum != other.JdbcConnNum {
    if p.JdbcConnNum == nil || other.JdbcConnNum == nil {
      return false
    }
    if (*p.JdbcConnNum) != (*other.JdbcConnNum) { return false }
  }
  if p.ThreadNum != other.ThreadNum {
    if p.ThreadNum == nil || other.ThreadNum == nil {
      return false
    }
    if (*p.ThreadNum) != (*other.ThreadNum) { return false }
  }
  if p.JvmGcOldCountNew != other.JvmGcOldCountNew {
    if p.JvmGcOldCountNew == nil || other.JvmGcOldCountNew == nil {
      return false
    }
    if (*p.JvmGcOldCountNew) != (*other.JvmGcOldCountNew) { return false }
  }
  if p.JvmGcOldTimeNew != other.JvmGcOldTimeNew {
    if p.JvmGcOldTimeNew == nil || other.JvmGcOldTimeNew == nil {
      return false
    }
    if (*p.JvmGcOldTimeNew) != (*other.JvmGcOldTimeNew) { return false }
  }
  return true
}

func (p *TJvmGc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TJvmGc(%+v)", *p)
}

func (p *TJvmGc) Validate() error {
  return nil
}
// Attributes:
//  - JvmGcNewCount
//  - JvmGcNewTime
//  - JvmPoolCodeCacheUsage
//  - JvmPoolCodeCacheMax
//  - JvmPoolCodeCacheUsed
//  - JvmPoolCodeCacheCommitted
//  - JvmPoolCodeCacheInit
//  - JvmPoolNewGenUsage
//  - JvmPoolNewGenMax
//  - JvmPoolNewGenUsed
//  - JvmPoolNewGenCommitted
//  - JvmPoolNewGenInit
//  - JvmPoolOldGenUsage
//  - JvmPoolOldGenMax
//  - JvmPoolOldGenUsed
//  - JvmPoolOldGenCommitted
//  - JvmPoolOldGenInit
//  - JvmPoolSurvivorSpaceUsage
//  - JvmPoolSurvivorSpaceMax
//  - JvmPoolSurvivorSpaceUsed
//  - JvmPoolSurvivorSpaceCommitted
//  - JvmPoolSurvivorSpaceInit
//  - JvmPoolPermGenUsage
//  - JvmPoolPermGenMax
//  - JvmPoolPermGenUsed
//  - JvmPoolPermGenCommitted
//  - JvmPoolPermGenInit
//  - JvmPoolMetaspaceUsage
//  - JvmPoolMetaspaceMax
//  - JvmPoolMetaspaceUsed
//  - JvmPoolMetaspaceCommitted
//  - JvmPoolMetaspaceInit
type TJvmGcDetailed struct {
  JvmGcNewCount *int64 `thrift:"jvmGcNewCount,1" db:"jvmGcNewCount" json:"jvmGcNewCount,omitempty"`
  JvmGcNewTime *int64 `thrift:"jvmGcNewTime,2" db:"jvmGcNewTime" json:"jvmGcNewTime,omitempty"`
  JvmPoolCodeCacheUsage *float64 `thrift:"jvmPoolCodeCacheUsage,3" db:"jvmPoolCodeCacheUsage" json:"jvmPoolCodeCacheUsage,omitempty"`
  JvmPoolCodeCacheMax *int64 `thrift:"jvmPoolCodeCacheMax,4" db:"jvmPoolCodeCacheMax" json:"jvmPoolCodeCacheMax,omitempty"`
  JvmPoolCodeCacheUsed *int64 `thrift:"jvmPoolCodeCacheUsed,5" db:"jvmPoolCodeCacheUsed" json:"jvmPoolCodeCacheUsed,omitempty"`
  JvmPoolCodeCacheCommitted *int64 `thrift:"jvmPoolCodeCacheCommitted,6" db:"jvmPoolCodeCacheCommitted" json:"jvmPoolCodeCacheCommitted,omitempty"`
  JvmPoolCodeCacheInit *int64 `thrift:"jvmPoolCodeCacheInit,7" db:"jvmPoolCodeCacheInit" json:"jvmPoolCodeCacheInit,omitempty"`
  JvmPoolNewGenUsage *float64 `thrift:"jvmPoolNewGenUsage,8" db:"jvmPoolNewGenUsage" json:"jvmPoolNewGenUsage,omitempty"`
  JvmPoolNewGenMax *int64 `thrift:"jvmPoolNewGenMax,9" db:"jvmPoolNewGenMax" json:"jvmPoolNewGenMax,omitempty"`
  JvmPoolNewGenUsed *int64 `thrift:"jvmPoolNewGenUsed,10" db:"jvmPoolNewGenUsed" json:"jvmPoolNewGenUsed,omitempty"`
  JvmPoolNewGenCommitted *int64 `thrift:"jvmPoolNewGenCommitted,11" db:"jvmPoolNewGenCommitted" json:"jvmPoolNewGenCommitted,omitempty"`
  JvmPoolNewGenInit *int64 `thrift:"jvmPoolNewGenInit,12" db:"jvmPoolNewGenInit" json:"jvmPoolNewGenInit,omitempty"`
  JvmPoolOldGenUsage *float64 `thrift:"jvmPoolOldGenUsage,13" db:"jvmPoolOldGenUsage" json:"jvmPoolOldGenUsage,omitempty"`
  JvmPoolOldGenMax *int64 `thrift:"jvmPoolOldGenMax,14" db:"jvmPoolOldGenMax" json:"jvmPoolOldGenMax,omitempty"`
  JvmPoolOldGenUsed *int64 `thrift:"jvmPoolOldGenUsed,15" db:"jvmPoolOldGenUsed" json:"jvmPoolOldGenUsed,omitempty"`
  JvmPoolOldGenCommitted *int64 `thrift:"jvmPoolOldGenCommitted,16" db:"jvmPoolOldGenCommitted" json:"jvmPoolOldGenCommitted,omitempty"`
  JvmPoolOldGenInit *int64 `thrift:"jvmPoolOldGenInit,17" db:"jvmPoolOldGenInit" json:"jvmPoolOldGenInit,omitempty"`
  JvmPoolSurvivorSpaceUsage *float64 `thrift:"jvmPoolSurvivorSpaceUsage,18" db:"jvmPoolSurvivorSpaceUsage" json:"jvmPoolSurvivorSpaceUsage,omitempty"`
  JvmPoolSurvivorSpaceMax *int64 `thrift:"jvmPoolSurvivorSpaceMax,19" db:"jvmPoolSurvivorSpaceMax" json:"jvmPoolSurvivorSpaceMax,omitempty"`
  JvmPoolSurvivorSpaceUsed *int64 `thrift:"jvmPoolSurvivorSpaceUsed,20" db:"jvmPoolSurvivorSpaceUsed" json:"jvmPoolSurvivorSpaceUsed,omitempty"`
  JvmPoolSurvivorSpaceCommitted *int64 `thrift:"jvmPoolSurvivorSpaceCommitted,21" db:"jvmPoolSurvivorSpaceCommitted" json:"jvmPoolSurvivorSpaceCommitted,omitempty"`
  JvmPoolSurvivorSpaceInit *int64 `thrift:"jvmPoolSurvivorSpaceInit,22" db:"jvmPoolSurvivorSpaceInit" json:"jvmPoolSurvivorSpaceInit,omitempty"`
  JvmPoolPermGenUsage *float64 `thrift:"jvmPoolPermGenUsage,23" db:"jvmPoolPermGenUsage" json:"jvmPoolPermGenUsage,omitempty"`
  JvmPoolPermGenMax *int64 `thrift:"jvmPoolPermGenMax,24" db:"jvmPoolPermGenMax" json:"jvmPoolPermGenMax,omitempty"`
  JvmPoolPermGenUsed *int64 `thrift:"jvmPoolPermGenUsed,25" db:"jvmPoolPermGenUsed" json:"jvmPoolPermGenUsed,omitempty"`
  JvmPoolPermGenCommitted *int64 `thrift:"jvmPoolPermGenCommitted,26" db:"jvmPoolPermGenCommitted" json:"jvmPoolPermGenCommitted,omitempty"`
  JvmPoolPermGenInit *int64 `thrift:"jvmPoolPermGenInit,27" db:"jvmPoolPermGenInit" json:"jvmPoolPermGenInit,omitempty"`
  JvmPoolMetaspaceUsage *float64 `thrift:"jvmPoolMetaspaceUsage,28" db:"jvmPoolMetaspaceUsage" json:"jvmPoolMetaspaceUsage,omitempty"`
  JvmPoolMetaspaceMax *int64 `thrift:"jvmPoolMetaspaceMax,29" db:"jvmPoolMetaspaceMax" json:"jvmPoolMetaspaceMax,omitempty"`
  JvmPoolMetaspaceUsed *int64 `thrift:"jvmPoolMetaspaceUsed,30" db:"jvmPoolMetaspaceUsed" json:"jvmPoolMetaspaceUsed,omitempty"`
  JvmPoolMetaspaceCommitted *int64 `thrift:"jvmPoolMetaspaceCommitted,31" db:"jvmPoolMetaspaceCommitted" json:"jvmPoolMetaspaceCommitted,omitempty"`
  JvmPoolMetaspaceInit *int64 `thrift:"jvmPoolMetaspaceInit,32" db:"jvmPoolMetaspaceInit" json:"jvmPoolMetaspaceInit,omitempty"`
}

func NewTJvmGcDetailed() *TJvmGcDetailed {
  return &TJvmGcDetailed{}
}

var TJvmGcDetailed_JvmGcNewCount_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmGcNewCount() int64 {
  if !p.IsSetJvmGcNewCount() {
    return TJvmGcDetailed_JvmGcNewCount_DEFAULT
  }
return *p.JvmGcNewCount
}
var TJvmGcDetailed_JvmGcNewTime_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmGcNewTime() int64 {
  if !p.IsSetJvmGcNewTime() {
    return TJvmGcDetailed_JvmGcNewTime_DEFAULT
  }
return *p.JvmGcNewTime
}
var TJvmGcDetailed_JvmPoolCodeCacheUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheUsage() float64 {
  if !p.IsSetJvmPoolCodeCacheUsage() {
    return TJvmGcDetailed_JvmPoolCodeCacheUsage_DEFAULT
  }
return *p.JvmPoolCodeCacheUsage
}
var TJvmGcDetailed_JvmPoolCodeCacheMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheMax() int64 {
  if !p.IsSetJvmPoolCodeCacheMax() {
    return TJvmGcDetailed_JvmPoolCodeCacheMax_DEFAULT
  }
return *p.JvmPoolCodeCacheMax
}
var TJvmGcDetailed_JvmPoolCodeCacheUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheUsed() int64 {
  if !p.IsSetJvmPoolCodeCacheUsed() {
    return TJvmGcDetailed_JvmPoolCodeCacheUsed_DEFAULT
  }
return *p.JvmPoolCodeCacheUsed
}
var TJvmGcDetailed_JvmPoolCodeCacheCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheCommitted() int64 {
  if !p.IsSetJvmPoolCodeCacheCommitted() {
    return TJvmGcDetailed_JvmPoolCodeCacheCommitted_DEFAULT
  }
return *p.JvmPoolCodeCacheCommitted
}
var TJvmGcDetailed_JvmPoolCodeCacheInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheInit() int64 {
  if !p.IsSetJvmPoolCodeCacheInit() {
    return TJvmGcDetailed_JvmPoolCodeCacheInit_DEFAULT
  }
return *p.JvmPoolCodeCacheInit
}
var TJvmGcDetailed_JvmPoolNewGenUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolNewGenUsage() float64 {
  if !p.IsSetJvmPoolNewGenUsage() {
    return TJvmGcDetailed_JvmPoolNewGenUsage_DEFAULT
  }
return *p.JvmPoolNewGenUsage
}
var TJvmGcDetailed_JvmPoolNewGenMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenMax() int64 {
  if !p.IsSetJvmPoolNewGenMax() {
    return TJvmGcDetailed_JvmPoolNewGenMax_DEFAULT
  }
return *p.JvmPoolNewGenMax
}
var TJvmGcDetailed_JvmPoolNewGenUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenUsed() int64 {
  if !p.IsSetJvmPoolNewGenUsed() {
    return TJvmGcDetailed_JvmPoolNewGenUsed_DEFAULT
  }
return *p.JvmPoolNewGenUsed
}
var TJvmGcDetailed_JvmPoolNewGenCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenCommitted() int64 {
  if !p.IsSetJvmPoolNewGenCommitted() {
    return TJvmGcDetailed_JvmPoolNewGenCommitted_DEFAULT
  }
return *p.JvmPoolNewGenCommitted
}
var TJvmGcDetailed_JvmPoolNewGenInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenInit() int64 {
  if !p.IsSetJvmPoolNewGenInit() {
    return TJvmGcDetailed_JvmPoolNewGenInit_DEFAULT
  }
return *p.JvmPoolNewGenInit
}
var TJvmGcDetailed_JvmPoolOldGenUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolOldGenUsage() float64 {
  if !p.IsSetJvmPoolOldGenUsage() {
    return TJvmGcDetailed_JvmPoolOldGenUsage_DEFAULT
  }
return *p.JvmPoolOldGenUsage
}
var TJvmGcDetailed_JvmPoolOldGenMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenMax() int64 {
  if !p.IsSetJvmPoolOldGenMax() {
    return TJvmGcDetailed_JvmPoolOldGenMax_DEFAULT
  }
return *p.JvmPoolOldGenMax
}
var TJvmGcDetailed_JvmPoolOldGenUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenUsed() int64 {
  if !p.IsSetJvmPoolOldGenUsed() {
    return TJvmGcDetailed_JvmPoolOldGenUsed_DEFAULT
  }
return *p.JvmPoolOldGenUsed
}
var TJvmGcDetailed_JvmPoolOldGenCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenCommitted() int64 {
  if !p.IsSetJvmPoolOldGenCommitted() {
    return TJvmGcDetailed_JvmPoolOldGenCommitted_DEFAULT
  }
return *p.JvmPoolOldGenCommitted
}
var TJvmGcDetailed_JvmPoolOldGenInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenInit() int64 {
  if !p.IsSetJvmPoolOldGenInit() {
    return TJvmGcDetailed_JvmPoolOldGenInit_DEFAULT
  }
return *p.JvmPoolOldGenInit
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceUsage() float64 {
  if !p.IsSetJvmPoolSurvivorSpaceUsage() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceUsage_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceUsage
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceMax() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceMax() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceMax_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceMax
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceUsed() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceUsed() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceUsed_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceUsed
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceCommitted() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceCommitted() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceCommitted_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceCommitted
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceInit() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceInit() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceInit_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceInit
}
var TJvmGcDetailed_JvmPoolPermGenUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolPermGenUsage() float64 {
  if !p.IsSetJvmPoolPermGenUsage() {
    return TJvmGcDetailed_JvmPoolPermGenUsage_DEFAULT
  }
return *p.JvmPoolPermGenUsage
}
var TJvmGcDetailed_JvmPoolPermGenMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenMax() int64 {
  if !p.IsSetJvmPoolPermGenMax() {
    return TJvmGcDetailed_JvmPoolPermGenMax_DEFAULT
  }
return *p.JvmPoolPermGenMax
}
var TJvmGcDetailed_JvmPoolPermGenUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenUsed() int64 {
  if !p.IsSetJvmPoolPermGenUsed() {
    return TJvmGcDetailed_JvmPoolPermGenUsed_DEFAULT
  }
return *p.JvmPoolPermGenUsed
}
var TJvmGcDetailed_JvmPoolPermGenCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenCommitted() int64 {
  if !p.IsSetJvmPoolPermGenCommitted() {
    return TJvmGcDetailed_JvmPoolPermGenCommitted_DEFAULT
  }
return *p.JvmPoolPermGenCommitted
}
var TJvmGcDetailed_JvmPoolPermGenInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenInit() int64 {
  if !p.IsSetJvmPoolPermGenInit() {
    return TJvmGcDetailed_JvmPoolPermGenInit_DEFAULT
  }
return *p.JvmPoolPermGenInit
}
var TJvmGcDetailed_JvmPoolMetaspaceUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceUsage() float64 {
  if !p.IsSetJvmPoolMetaspaceUsage() {
    return TJvmGcDetailed_JvmPoolMetaspaceUsage_DEFAULT
  }
return *p.JvmPoolMetaspaceUsage
}
var TJvmGcDetailed_JvmPoolMetaspaceMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceMax() int64 {
  if !p.IsSetJvmPoolMetaspaceMax() {
    return TJvmGcDetailed_JvmPoolMetaspaceMax_DEFAULT
  }
return *p.JvmPoolMetaspaceMax
}
var TJvmGcDetailed_JvmPoolMetaspaceUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceUsed() int64 {
  if !p.IsSetJvmPoolMetaspaceUsed() {
    return TJvmGcDetailed_JvmPoolMetaspaceUsed_DEFAULT
  }
return *p.JvmPoolMetaspaceUsed
}
var TJvmGcDetailed_JvmPoolMetaspaceCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceCommitted() int64 {
  if !p.IsSetJvmPoolMetaspaceCommitted() {
    return TJvmGcDetailed_JvmPoolMetaspaceCommitted_DEFAULT
  }
return *p.JvmPoolMetaspaceCommitted
}
var TJvmGcDetailed_JvmPoolMetaspaceInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceInit() int64 {
  if !p.IsSetJvmPoolMetaspaceInit() {
    return TJvmGcDetailed_JvmPoolMetaspaceInit_DEFAULT
  }
return *p.JvmPoolMetaspaceInit
}
func (p *TJvmGcDetailed) IsSetJvmGcNewCount() bool {
  return p.JvmGcNewCount != nil
}

func (p *TJvmGcDetailed) IsSetJvmGcNewTime() bool {
  return p.JvmGcNewTime != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheUsage() bool {
  return p.JvmPoolCodeCacheUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheMax() bool {
  return p.JvmPoolCodeCacheMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheUsed() bool {
  return p.JvmPoolCodeCacheUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheCommitted() bool {
  return p.JvmPoolCodeCacheCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheInit() bool {
  return p.JvmPoolCodeCacheInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenUsage() bool {
  return p.JvmPoolNewGenUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenMax() bool {
  return p.JvmPoolNewGenMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenUsed() bool {
  return p.JvmPoolNewGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenCommitted() bool {
  return p.JvmPoolNewGenCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenInit() bool {
  return p.JvmPoolNewGenInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenUsage() bool {
  return p.JvmPoolOldGenUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenMax() bool {
  return p.JvmPoolOldGenMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenUsed() bool {
  return p.JvmPoolOldGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenCommitted() bool {
  return p.JvmPoolOldGenCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenInit() bool {
  return p.JvmPoolOldGenInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceUsage() bool {
  return p.JvmPoolSurvivorSpaceUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceMax() bool {
  return p.JvmPoolSurvivorSpaceMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceUsed() bool {
  return p.JvmPoolSurvivorSpaceUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceCommitted() bool {
  return p.JvmPoolSurvivorSpaceCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceInit() bool {
  return p.JvmPoolSurvivorSpaceInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenUsage() bool {
  return p.JvmPoolPermGenUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenMax() bool {
  return p.JvmPoolPermGenMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenUsed() bool {
  return p.JvmPoolPermGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenCommitted() bool {
  return p.JvmPoolPermGenCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenInit() bool {
  return p.JvmPoolPermGenInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceUsage() bool {
  return p.JvmPoolMetaspaceUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceMax() bool {
  return p.JvmPoolMetaspaceMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceUsed() bool {
  return p.JvmPoolMetaspaceUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceCommitted() bool {
  return p.JvmPoolMetaspaceCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceInit() bool {
  return p.JvmPoolMetaspaceInit != nil
}

func (p *TJvmGcDetailed) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TJvmGcDetailed)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JvmGcNewCount = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JvmGcNewTime = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JvmPoolCodeCacheUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.JvmPoolCodeCacheMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.JvmPoolCodeCacheUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.JvmPoolCodeCacheCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.JvmPoolCodeCacheInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.JvmPoolNewGenUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.JvmPoolNewGenMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.JvmPoolNewGenUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.JvmPoolNewGenCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.JvmPoolNewGenInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.JvmPoolOldGenUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.JvmPoolOldGenMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.JvmPoolOldGenUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.JvmPoolOldGenCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.JvmPoolOldGenInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.JvmPoolSurvivorSpaceUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.JvmPoolSurvivorSpaceMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.JvmPoolSurvivorSpaceUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.JvmPoolSurvivorSpaceCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.JvmPoolSurvivorSpaceInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.JvmPoolPermGenUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.JvmPoolPermGenMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.JvmPoolPermGenUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.JvmPoolPermGenCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.JvmPoolPermGenInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.JvmPoolMetaspaceUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.JvmPoolMetaspaceMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.JvmPoolMetaspaceUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.JvmPoolMetaspaceCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.JvmPoolMetaspaceInit = &v
}
  return nil
}

func (p *TJvmGcDetailed) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TJvmGcDetailed"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TJvmGcDetailed) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcNewCount() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcNewCount", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jvmGcNewCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcNewCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcNewCount (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jvmGcNewCount: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcNewTime() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcNewTime", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jvmGcNewTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcNewTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcNewTime (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jvmGcNewTime: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheUsage", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jvmPoolCodeCacheUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolCodeCacheUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheUsage (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jvmPoolCodeCacheUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheMax", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jvmPoolCodeCacheMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheMax (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jvmPoolCodeCacheMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheUsed", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jvmPoolCodeCacheUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheUsed (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jvmPoolCodeCacheUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheCommitted", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jvmPoolCodeCacheCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheCommitted (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jvmPoolCodeCacheCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheInit", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:jvmPoolCodeCacheInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheInit (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:jvmPoolCodeCacheInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenUsage", thrift.DOUBLE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jvmPoolNewGenUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolNewGenUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenUsage (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jvmPoolNewGenUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenMax", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:jvmPoolNewGenMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenMax (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:jvmPoolNewGenMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenUsed", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:jvmPoolNewGenUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenUsed (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:jvmPoolNewGenUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenCommitted", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:jvmPoolNewGenCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenCommitted (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:jvmPoolNewGenCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenInit", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:jvmPoolNewGenInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenInit (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:jvmPoolNewGenInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenUsage", thrift.DOUBLE, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:jvmPoolOldGenUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolOldGenUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenUsage (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:jvmPoolOldGenUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenMax", thrift.I64, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:jvmPoolOldGenMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenMax (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:jvmPoolOldGenMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenUsed", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:jvmPoolOldGenUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenUsed (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:jvmPoolOldGenUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenCommitted", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:jvmPoolOldGenCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenCommitted (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:jvmPoolOldGenCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenInit", thrift.I64, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:jvmPoolOldGenInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenInit (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:jvmPoolOldGenInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceUsage", thrift.DOUBLE, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:jvmPoolSurvivorSpaceUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolSurvivorSpaceUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceUsage (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:jvmPoolSurvivorSpaceUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceMax", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:jvmPoolSurvivorSpaceMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceMax (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:jvmPoolSurvivorSpaceMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceUsed", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:jvmPoolSurvivorSpaceUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceUsed (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:jvmPoolSurvivorSpaceUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceCommitted", thrift.I64, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:jvmPoolSurvivorSpaceCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceCommitted (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:jvmPoolSurvivorSpaceCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceInit", thrift.I64, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:jvmPoolSurvivorSpaceInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceInit (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:jvmPoolSurvivorSpaceInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenUsage", thrift.DOUBLE, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:jvmPoolPermGenUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolPermGenUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenUsage (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:jvmPoolPermGenUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenMax", thrift.I64, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:jvmPoolPermGenMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenMax (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:jvmPoolPermGenMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenUsed", thrift.I64, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:jvmPoolPermGenUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenUsed (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:jvmPoolPermGenUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenCommitted", thrift.I64, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:jvmPoolPermGenCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenCommitted (26) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:jvmPoolPermGenCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenInit", thrift.I64, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:jvmPoolPermGenInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenInit (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:jvmPoolPermGenInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceUsage", thrift.DOUBLE, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:jvmPoolMetaspaceUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolMetaspaceUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceUsage (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:jvmPoolMetaspaceUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceMax", thrift.I64, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:jvmPoolMetaspaceMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceMax (29) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:jvmPoolMetaspaceMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceUsed", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:jvmPoolMetaspaceUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceUsed (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:jvmPoolMetaspaceUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceCommitted", thrift.I64, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:jvmPoolMetaspaceCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceCommitted (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:jvmPoolMetaspaceCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceInit", thrift.I64, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:jvmPoolMetaspaceInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceInit (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:jvmPoolMetaspaceInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) Equals(other *TJvmGcDetailed) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JvmGcNewCount != other.JvmGcNewCount {
    if p.JvmGcNewCount == nil || other.JvmGcNewCount == nil {
      return false
    }
    if (*p.JvmGcNewCount) != (*other.JvmGcNewCount) { return false }
  }
  if p.JvmGcNewTime != other.JvmGcNewTime {
    if p.JvmGcNewTime == nil || other.JvmGcNewTime == nil {
      return false
    }
    if (*p.JvmGcNewTime) != (*other.JvmGcNewTime) { return false }
  }
  if p.JvmPoolCodeCacheUsage != other.JvmPoolCodeCacheUsage {
    if p.JvmPoolCodeCacheUsage == nil || other.JvmPoolCodeCacheUsage == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheUsage) != (*other.JvmPoolCodeCacheUsage) { return false }
  }
  if p.JvmPoolCodeCacheMax != other.JvmPoolCodeCacheMax {
    if p.JvmPoolCodeCacheMax == nil || other.JvmPoolCodeCacheMax == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheMax) != (*other.JvmPoolCodeCacheMax) { return false }
  }
  if p.JvmPoolCodeCacheUsed != other.JvmPoolCodeCacheUsed {
    if p.JvmPoolCodeCacheUsed == nil || other.JvmPoolCodeCacheUsed == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheUsed) != (*other.JvmPoolCodeCacheUsed) { return false }
  }
  if p.JvmPoolCodeCacheCommitted != other.JvmPoolCodeCacheCommitted {
    if p.JvmPoolCodeCacheCommitted == nil || other.JvmPoolCodeCacheCommitted == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheCommitted) != (*other.JvmPoolCodeCacheCommitted) { return false }
  }
  if p.JvmPoolCodeCacheInit != other.JvmPoolCodeCacheInit {
    if p.JvmPoolCodeCacheInit == nil || other.JvmPoolCodeCacheInit == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheInit) != (*other.JvmPoolCodeCacheInit) { return false }
  }
  if p.JvmPoolNewGenUsage != other.JvmPoolNewGenUsage {
    if p.JvmPoolNewGenUsage == nil || other.JvmPoolNewGenUsage == nil {
      return false
    }
    if (*p.JvmPoolNewGenUsage) != (*other.JvmPoolNewGenUsage) { return false }
  }
  if p.JvmPoolNewGenMax != other.JvmPoolNewGenMax {
    if p.JvmPoolNewGenMax == nil || other.JvmPoolNewGenMax == nil {
      return false
    }
    if (*p.JvmPoolNewGenMax) != (*other.JvmPoolNewGenMax) { return false }
  }
  if p.JvmPoolNewGenUsed != other.JvmPoolNewGenUsed {
    if p.JvmPoolNewGenUsed == nil || other.JvmPoolNewGenUsed == nil {
      return false
    }
    if (*p.JvmPoolNewGenUsed) != (*other.JvmPoolNewGenUsed) { return false }
  }
  if p.JvmPoolNewGenCommitted != other.JvmPoolNewGenCommitted {
    if p.JvmPoolNewGenCommitted == nil || other.JvmPoolNewGenCommitted == nil {
      return false
    }
    if (*p.JvmPoolNewGenCommitted) != (*other.JvmPoolNewGenCommitted) { return false }
  }
  if p.JvmPoolNewGenInit != other.JvmPoolNewGenInit {
    if p.JvmPoolNewGenInit == nil || other.JvmPoolNewGenInit == nil {
      return false
    }
    if (*p.JvmPoolNewGenInit) != (*other.JvmPoolNewGenInit) { return false }
  }
  if p.JvmPoolOldGenUsage != other.JvmPoolOldGenUsage {
    if p.JvmPoolOldGenUsage == nil || other.JvmPoolOldGenUsage == nil {
      return false
    }
    if (*p.JvmPoolOldGenUsage) != (*other.JvmPoolOldGenUsage) { return false }
  }
  if p.JvmPoolOldGenMax != other.JvmPoolOldGenMax {
    if p.JvmPoolOldGenMax == nil || other.JvmPoolOldGenMax == nil {
      return false
    }
    if (*p.JvmPoolOldGenMax) != (*other.JvmPoolOldGenMax) { return false }
  }
  if p.JvmPoolOldGenUsed != other.JvmPoolOldGenUsed {
    if p.JvmPoolOldGenUsed == nil || other.JvmPoolOldGenUsed == nil {
      return false
    }
    if (*p.JvmPoolOldGenUsed) != (*other.JvmPoolOldGenUsed) { return false }
  }
  if p.JvmPoolOldGenCommitted != other.JvmPoolOldGenCommitted {
    if p.JvmPoolOldGenCommitted == nil || other.JvmPoolOldGenCommitted == nil {
      return false
    }
    if (*p.JvmPoolOldGenCommitted) != (*other.JvmPoolOldGenCommitted) { return false }
  }
  if p.JvmPoolOldGenInit != other.JvmPoolOldGenInit {
    if p.JvmPoolOldGenInit == nil || other.JvmPoolOldGenInit == nil {
      return false
    }
    if (*p.JvmPoolOldGenInit) != (*other.JvmPoolOldGenInit) { return false }
  }
  if p.JvmPoolSurvivorSpaceUsage != other.JvmPoolSurvivorSpaceUsage {
    if p.JvmPoolSurvivorSpaceUsage == nil || other.JvmPoolSurvivorSpaceUsage == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceUsage) != (*other.JvmPoolSurvivorSpaceUsage) { return false }
  }
  if p.JvmPoolSurvivorSpaceMax != other.JvmPoolSurvivorSpaceMax {
    if p.JvmPoolSurvivorSpaceMax == nil || other.JvmPoolSurvivorSpaceMax == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceMax) != (*other.JvmPoolSurvivorSpaceMax) { return false }
  }
  if p.JvmPoolSurvivorSpaceUsed != other.JvmPoolSurvivorSpaceUsed {
    if p.JvmPoolSurvivorSpaceUsed == nil || other.JvmPoolSurvivorSpaceUsed == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceUsed) != (*other.JvmPoolSurvivorSpaceUsed) { return false }
  }
  if p.JvmPoolSurvivorSpaceCommitted != other.JvmPoolSurvivorSpaceCommitted {
    if p.JvmPoolSurvivorSpaceCommitted == nil || other.JvmPoolSurvivorSpaceCommitted == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceCommitted) != (*other.JvmPoolSurvivorSpaceCommitted) { return false }
  }
  if p.JvmPoolSurvivorSpaceInit != other.JvmPoolSurvivorSpaceInit {
    if p.JvmPoolSurvivorSpaceInit == nil || other.JvmPoolSurvivorSpaceInit == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceInit) != (*other.JvmPoolSurvivorSpaceInit) { return false }
  }
  if p.JvmPoolPermGenUsage != other.JvmPoolPermGenUsage {
    if p.JvmPoolPermGenUsage == nil || other.JvmPoolPermGenUsage == nil {
      return false
    }
    if (*p.JvmPoolPermGenUsage) != (*other.JvmPoolPermGenUsage) { return false }
  }
  if p.JvmPoolPermGenMax != other.JvmPoolPermGenMax {
    if p.JvmPoolPermGenMax == nil || other.JvmPoolPermGenMax == nil {
      return false
    }
    if (*p.JvmPoolPermGenMax) != (*other.JvmPoolPermGenMax) { return false }
  }
  if p.JvmPoolPermGenUsed != other.JvmPoolPermGenUsed {
    if p.JvmPoolPermGenUsed == nil || other.JvmPoolPermGenUsed == nil {
      return false
    }
    if (*p.JvmPoolPermGenUsed) != (*other.JvmPoolPermGenUsed) { return false }
  }
  if p.JvmPoolPermGenCommitted != other.JvmPoolPermGenCommitted {
    if p.JvmPoolPermGenCommitted == nil || other.JvmPoolPermGenCommitted == nil {
      return false
    }
    if (*p.JvmPoolPermGenCommitted) != (*other.JvmPoolPermGenCommitted) { return false }
  }
  if p.JvmPoolPermGenInit != other.JvmPoolPermGenInit {
    if p.JvmPoolPermGenInit == nil || other.JvmPoolPermGenInit == nil {
      return false
    }
    if (*p.JvmPoolPermGenInit) != (*other.JvmPoolPermGenInit) { return false }
  }
  if p.JvmPoolMetaspaceUsage != other.JvmPoolMetaspaceUsage {
    if p.JvmPoolMetaspaceUsage == nil || other.JvmPoolMetaspaceUsage == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceUsage) != (*other.JvmPoolMetaspaceUsage) { return false }
  }
  if p.JvmPoolMetaspaceMax != other.JvmPoolMetaspaceMax {
    if p.JvmPoolMetaspaceMax == nil || other.JvmPoolMetaspaceMax == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceMax) != (*other.JvmPoolMetaspaceMax) { return false }
  }
  if p.JvmPoolMetaspaceUsed != other.JvmPoolMetaspaceUsed {
    if p.JvmPoolMetaspaceUsed == nil || other.JvmPoolMetaspaceUsed == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceUsed) != (*other.JvmPoolMetaspaceUsed) { return false }
  }
  if p.JvmPoolMetaspaceCommitted != other.JvmPoolMetaspaceCommitted {
    if p.JvmPoolMetaspaceCommitted == nil || other.JvmPoolMetaspaceCommitted == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceCommitted) != (*other.JvmPoolMetaspaceCommitted) { return false }
  }
  if p.JvmPoolMetaspaceInit != other.JvmPoolMetaspaceInit {
    if p.JvmPoolMetaspaceInit == nil || other.JvmPoolMetaspaceInit == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceInit) != (*other.JvmPoolMetaspaceInit) { return false }
  }
  return true
}

func (p *TJvmGcDetailed) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TJvmGcDetailed(%+v)", *p)
}

func (p *TJvmGcDetailed) Validate() error {
  return nil
}
// Attributes:
//  - FileSystem
//  - Size
//  - Used
//  - Avail
//  - Usage
//  - MountedOn
type TExecuteDf struct {
  FileSystem string `thrift:"fileSystem,1" db:"fileSystem" json:"fileSystem"`
  Size int64 `thrift:"size,2" db:"size" json:"size"`
  Used int64 `thrift:"used,3" db:"used" json:"used"`
  Avail int64 `thrift:"avail,4" db:"avail" json:"avail"`
  Usage int16 `thrift:"usage,5" db:"usage" json:"usage"`
  MountedOn string `thrift:"mountedOn,6" db:"mountedOn" json:"mountedOn"`
}

func NewTExecuteDf() *TExecuteDf {
  return &TExecuteDf{}
}


func (p *TExecuteDf) GetFileSystem() string {
  return p.FileSystem
}

func (p *TExecuteDf) GetSize() int64 {
  return p.Size
}

func (p *TExecuteDf) GetUsed() int64 {
  return p.Used
}

func (p *TExecuteDf) GetAvail() int64 {
  return p.Avail
}

func (p *TExecuteDf) GetUsage() int16 {
  return p.Usage
}

func (p *TExecuteDf) GetMountedOn() string {
  return p.MountedOn
}
func (p *TExecuteDf) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteDf)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FileSystem = v
}
  return nil
}

func (p *TExecuteDf)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *TExecuteDf)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Used = v
}
  return nil
}

func (p *TExecuteDf)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Avail = v
}
  return nil
}

func (p *TExecuteDf)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Usage = v
}
  return nil
}

func (p *TExecuteDf)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MountedOn = v
}
  return nil
}

func (p *TExecuteDf) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteDf"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteDf) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileSystem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileSystem: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FileSystem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileSystem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileSystem: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "used", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:used: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Used)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.used (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:used: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avail", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:avail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Avail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:avail: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "usage", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:usage: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Usage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:usage: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mountedOn", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mountedOn: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MountedOn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mountedOn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mountedOn: ", p), err) }
  return err
}

func (p *TExecuteDf) Equals(other *TExecuteDf) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FileSystem != other.FileSystem { return false }
  if p.Size != other.Size { return false }
  if p.Used != other.Used { return false }
  if p.Avail != other.Avail { return false }
  if p.Usage != other.Usage { return false }
  if p.MountedOn != other.MountedOn { return false }
  return true
}

func (p *TExecuteDf) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteDf(%+v)", *p)
}

func (p *TExecuteDf) Validate() error {
  return nil
}
// Attributes:
//  - TExecuteIostatCpu
//  - TExecuteIostatDevices
type TExecuteIostat struct {
  TExecuteIostatCpu *TExecuteIostatCpu `thrift:"tExecuteIostatCpu,1" db:"tExecuteIostatCpu" json:"tExecuteIostatCpu"`
  TExecuteIostatDevices []*TExecuteIostatDevice `thrift:"tExecuteIostatDevices,2" db:"tExecuteIostatDevices" json:"tExecuteIostatDevices"`
}

func NewTExecuteIostat() *TExecuteIostat {
  return &TExecuteIostat{}
}

var TExecuteIostat_TExecuteIostatCpu_DEFAULT *TExecuteIostatCpu
func (p *TExecuteIostat) GetTExecuteIostatCpu() *TExecuteIostatCpu {
  if !p.IsSetTExecuteIostatCpu() {
    return TExecuteIostat_TExecuteIostatCpu_DEFAULT
  }
return p.TExecuteIostatCpu
}

func (p *TExecuteIostat) GetTExecuteIostatDevices() []*TExecuteIostatDevice {
  return p.TExecuteIostatDevices
}
func (p *TExecuteIostat) IsSetTExecuteIostatCpu() bool {
  return p.TExecuteIostatCpu != nil
}

func (p *TExecuteIostat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteIostat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.TExecuteIostatCpu = &TExecuteIostatCpu{}
  if err := p.TExecuteIostatCpu.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TExecuteIostatCpu), err)
  }
  return nil
}

func (p *TExecuteIostat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TExecuteIostatDevice, 0, size)
  p.TExecuteIostatDevices =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TExecuteIostatDevice{}
    if err := _elem8.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.TExecuteIostatDevices = append(p.TExecuteIostatDevices, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TExecuteIostat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteIostat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteIostat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tExecuteIostatCpu", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tExecuteIostatCpu: ", p), err) }
  if err := p.TExecuteIostatCpu.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TExecuteIostatCpu), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tExecuteIostatCpu: ", p), err) }
  return err
}

func (p *TExecuteIostat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tExecuteIostatDevices", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tExecuteIostatDevices: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TExecuteIostatDevices)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TExecuteIostatDevices {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tExecuteIostatDevices: ", p), err) }
  return err
}

func (p *TExecuteIostat) Equals(other *TExecuteIostat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.TExecuteIostatCpu.Equals(other.TExecuteIostatCpu) { return false }
  if len(p.TExecuteIostatDevices) != len(other.TExecuteIostatDevices) { return false }
  for i, _tgt := range p.TExecuteIostatDevices {
    _src9 := other.TExecuteIostatDevices[i]
    if !_tgt.Equals(_src9) { return false }
  }
  return true
}

func (p *TExecuteIostat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteIostat(%+v)", *p)
}

func (p *TExecuteIostat) Validate() error {
  return nil
}
// Attributes:
//  - UserUsage
//  - NiceUsage
//  - SystemUsage
//  - IowaitUsage
//  - StealUsage
//  - IdleUsage
type TExecuteIostatCpu struct {
  UserUsage string `thrift:"userUsage,1" db:"userUsage" json:"userUsage"`
  NiceUsage string `thrift:"niceUsage,2" db:"niceUsage" json:"niceUsage"`
  SystemUsage string `thrift:"systemUsage,3" db:"systemUsage" json:"systemUsage"`
  IowaitUsage string `thrift:"iowaitUsage,4" db:"iowaitUsage" json:"iowaitUsage"`
  StealUsage string `thrift:"stealUsage,5" db:"stealUsage" json:"stealUsage"`
  IdleUsage string `thrift:"idleUsage,6" db:"idleUsage" json:"idleUsage"`
}

func NewTExecuteIostatCpu() *TExecuteIostatCpu {
  return &TExecuteIostatCpu{}
}


func (p *TExecuteIostatCpu) GetUserUsage() string {
  return p.UserUsage
}

func (p *TExecuteIostatCpu) GetNiceUsage() string {
  return p.NiceUsage
}

func (p *TExecuteIostatCpu) GetSystemUsage() string {
  return p.SystemUsage
}

func (p *TExecuteIostatCpu) GetIowaitUsage() string {
  return p.IowaitUsage
}

func (p *TExecuteIostatCpu) GetStealUsage() string {
  return p.StealUsage
}

func (p *TExecuteIostatCpu) GetIdleUsage() string {
  return p.IdleUsage
}
func (p *TExecuteIostatCpu) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteIostatCpu)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NiceUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IowaitUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StealUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IdleUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteIostatCpu"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteIostatCpu) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userUsage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userUsage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "niceUsage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:niceUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NiceUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.niceUsage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:niceUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemUsage", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemUsage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iowaitUsage", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iowaitUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IowaitUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iowaitUsage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iowaitUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stealUsage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stealUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StealUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stealUsage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stealUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "idleUsage", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:idleUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdleUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idleUsage (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:idleUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) Equals(other *TExecuteIostatCpu) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserUsage != other.UserUsage { return false }
  if p.NiceUsage != other.NiceUsage { return false }
  if p.SystemUsage != other.SystemUsage { return false }
  if p.IowaitUsage != other.IowaitUsage { return false }
  if p.StealUsage != other.StealUsage { return false }
  if p.IdleUsage != other.IdleUsage { return false }
  return true
}

func (p *TExecuteIostatCpu) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteIostatCpu(%+v)", *p)
}

func (p *TExecuteIostatCpu) Validate() error {
  return nil
}
// Attributes:
//  - Device
//  - Tps
//  - KBReadPers
//  - KBWrtnPers
//  - KBRead
//  - KBWrtn
type TExecuteIostatDevice struct {
  Device string `thrift:"device,1" db:"device" json:"device"`
  Tps string `thrift:"tps,2" db:"tps" json:"tps"`
  KBReadPers string `thrift:"kB_read_pers,3" db:"kB_read_pers" json:"kB_read_pers"`
  KBWrtnPers string `thrift:"kB_wrtn_pers,4" db:"kB_wrtn_pers" json:"kB_wrtn_pers"`
  KBRead string `thrift:"kB_read,5" db:"kB_read" json:"kB_read"`
  KBWrtn string `thrift:"kB_wrtn,6" db:"kB_wrtn" json:"kB_wrtn"`
}

func NewTExecuteIostatDevice() *TExecuteIostatDevice {
  return &TExecuteIostatDevice{}
}


func (p *TExecuteIostatDevice) GetDevice() string {
  return p.Device
}

func (p *TExecuteIostatDevice) GetTps() string {
  return p.Tps
}

func (p *TExecuteIostatDevice) GetKBReadPers() string {
  return p.KBReadPers
}

func (p *TExecuteIostatDevice) GetKBWrtnPers() string {
  return p.KBWrtnPers
}

func (p *TExecuteIostatDevice) GetKBRead() string {
  return p.KBRead
}

func (p *TExecuteIostatDevice) GetKBWrtn() string {
  return p.KBWrtn
}
func (p *TExecuteIostatDevice) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteIostatDevice)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Device = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tps = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KBReadPers = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KBWrtnPers = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KBRead = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.KBWrtn = v
}
  return nil
}

func (p *TExecuteIostatDevice) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteIostatDevice"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteIostatDevice) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:device: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Device)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:device: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tps", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tps: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tps (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tps: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_read_pers", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kB_read_pers: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBReadPers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_read_pers (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kB_read_pers: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_wrtn_pers", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:kB_wrtn_pers: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBWrtnPers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_wrtn_pers (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:kB_wrtn_pers: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_read", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:kB_read: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBRead)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_read (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:kB_read: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_wrtn", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:kB_wrtn: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBWrtn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_wrtn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:kB_wrtn: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) Equals(other *TExecuteIostatDevice) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Device != other.Device { return false }
  if p.Tps != other.Tps { return false }
  if p.KBReadPers != other.KBReadPers { return false }
  if p.KBWrtnPers != other.KBWrtnPers { return false }
  if p.KBRead != other.KBRead { return false }
  if p.KBWrtn != other.KBWrtn { return false }
  return true
}

func (p *TExecuteIostatDevice) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteIostatDevice(%+v)", *p)
}

func (p *TExecuteIostatDevice) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - StartTimestamp
//  - Timestamp
//  - CollectInterval
//  - Gc
//  - CpuLoad
//  - Transaction
//  - ActiveTrace
//  - Metadata
//  - ThreadCount
type TAgentStat struct {
  AgentId *string `thrift:"agentId,1" db:"agentId" json:"agentId,omitempty"`
  StartTimestamp *int64 `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp,omitempty"`
  Timestamp *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
  CollectInterval *int64 `thrift:"collectInterval,4" db:"collectInterval" json:"collectInterval,omitempty"`
  // unused fields # 5 to 9
  Gc *TJvmGc `thrift:"gc,10" db:"gc" json:"gc,omitempty"`
  // unused fields # 11 to 19
  CpuLoad *TCpuLoad `thrift:"cpuLoad,20" db:"cpuLoad" json:"cpuLoad,omitempty"`
  // unused fields # 21 to 29
  Transaction *TTransaction `thrift:"transaction,30" db:"transaction" json:"transaction,omitempty"`
  // unused fields # 31 to 39
  ActiveTrace *TActiveTrace `thrift:"activeTrace,40" db:"activeTrace" json:"activeTrace,omitempty"`
  // unused fields # 41 to 199
  Metadata *string `thrift:"metadata,200" db:"metadata" json:"metadata,omitempty"`
  // unused fields # 201 to 209
  ThreadCount *int32 `thrift:"threadCount,210" db:"threadCount" json:"threadCount,omitempty"`
}

func NewTAgentStat() *TAgentStat {
  return &TAgentStat{}
}

var TAgentStat_AgentId_DEFAULT string
func (p *TAgentStat) GetAgentId() string {
  if !p.IsSetAgentId() {
    return TAgentStat_AgentId_DEFAULT
  }
return *p.AgentId
}
var TAgentStat_StartTimestamp_DEFAULT int64
func (p *TAgentStat) GetStartTimestamp() int64 {
  if !p.IsSetStartTimestamp() {
    return TAgentStat_StartTimestamp_DEFAULT
  }
return *p.StartTimestamp
}
var TAgentStat_Timestamp_DEFAULT int64
func (p *TAgentStat) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TAgentStat_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TAgentStat_CollectInterval_DEFAULT int64
func (p *TAgentStat) GetCollectInterval() int64 {
  if !p.IsSetCollectInterval() {
    return TAgentStat_CollectInterval_DEFAULT
  }
return *p.CollectInterval
}
var TAgentStat_Gc_DEFAULT *TJvmGc
func (p *TAgentStat) GetGc() *TJvmGc {
  if !p.IsSetGc() {
    return TAgentStat_Gc_DEFAULT
  }
return p.Gc
}
var TAgentStat_CpuLoad_DEFAULT *TCpuLoad
func (p *TAgentStat) GetCpuLoad() *TCpuLoad {
  if !p.IsSetCpuLoad() {
    return TAgentStat_CpuLoad_DEFAULT
  }
return p.CpuLoad
}
var TAgentStat_Transaction_DEFAULT *TTransaction
func (p *TAgentStat) GetTransaction() *TTransaction {
  if !p.IsSetTransaction() {
    return TAgentStat_Transaction_DEFAULT
  }
return p.Transaction
}
var TAgentStat_ActiveTrace_DEFAULT *TActiveTrace
func (p *TAgentStat) GetActiveTrace() *TActiveTrace {
  if !p.IsSetActiveTrace() {
    return TAgentStat_ActiveTrace_DEFAULT
  }
return p.ActiveTrace
}
var TAgentStat_Metadata_DEFAULT string
func (p *TAgentStat) GetMetadata() string {
  if !p.IsSetMetadata() {
    return TAgentStat_Metadata_DEFAULT
  }
return *p.Metadata
}
var TAgentStat_ThreadCount_DEFAULT int32
func (p *TAgentStat) GetThreadCount() int32 {
  if !p.IsSetThreadCount() {
    return TAgentStat_ThreadCount_DEFAULT
  }
return *p.ThreadCount
}
func (p *TAgentStat) IsSetAgentId() bool {
  return p.AgentId != nil
}

func (p *TAgentStat) IsSetStartTimestamp() bool {
  return p.StartTimestamp != nil
}

func (p *TAgentStat) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TAgentStat) IsSetCollectInterval() bool {
  return p.CollectInterval != nil
}

func (p *TAgentStat) IsSetGc() bool {
  return p.Gc != nil
}

func (p *TAgentStat) IsSetCpuLoad() bool {
  return p.CpuLoad != nil
}

func (p *TAgentStat) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *TAgentStat) IsSetActiveTrace() bool {
  return p.ActiveTrace != nil
}

func (p *TAgentStat) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *TAgentStat) IsSetThreadCount() bool {
  return p.ThreadCount != nil
}

func (p *TAgentStat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField200(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 210:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField210(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = &v
}
  return nil
}

func (p *TAgentStat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTimestamp = &v
}
  return nil
}

func (p *TAgentStat)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TAgentStat)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CollectInterval = &v
}
  return nil
}

func (p *TAgentStat)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Gc = &TJvmGc{
  Type: 0,
}
  if err := p.Gc.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gc), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.CpuLoad = &TCpuLoad{}
  if err := p.CpuLoad.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CpuLoad), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &TTransaction{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  p.ActiveTrace = &TActiveTrace{}
  if err := p.ActiveTrace.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActiveTrace), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField200(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 200: ", err)
} else {
  p.Metadata = &v
}
  return nil
}

func (p *TAgentStat)  ReadField210(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 210: ", err)
} else {
  p.ThreadCount = &v
}
  return nil
}

func (p *TAgentStat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentStat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField200(ctx, oprot); err != nil { return err }
    if err := p.writeField210(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentStat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAgentId() {
    if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AgentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCollectInterval() {
    if err := oprot.WriteFieldBegin(ctx, "collectInterval", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:collectInterval: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CollectInterval)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.collectInterval (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:collectInterval: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGc() {
    if err := oprot.WriteFieldBegin(ctx, "gc", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:gc: ", p), err) }
    if err := p.Gc.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gc), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:gc: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCpuLoad() {
    if err := oprot.WriteFieldBegin(ctx, "cpuLoad", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cpuLoad: ", p), err) }
    if err := p.CpuLoad.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CpuLoad), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cpuLoad: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTransaction() {
    if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:transaction: ", p), err) }
    if err := p.Transaction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:transaction: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetActiveTrace() {
    if err := oprot.WriteFieldBegin(ctx, "activeTrace", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:activeTrace: ", p), err) }
    if err := p.ActiveTrace.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActiveTrace), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:activeTrace: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField200(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.STRING, 200); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:metadata: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Metadata)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metadata (200) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 200:metadata: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField210(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadCount() {
    if err := oprot.WriteFieldBegin(ctx, "threadCount", thrift.I32, 210); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 210:threadCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ThreadCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadCount (210) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 210:threadCount: ", p), err) }
  }
  return err
}

func (p *TAgentStat) Equals(other *TAgentStat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId {
    if p.AgentId == nil || other.AgentId == nil {
      return false
    }
    if (*p.AgentId) != (*other.AgentId) { return false }
  }
  if p.StartTimestamp != other.StartTimestamp {
    if p.StartTimestamp == nil || other.StartTimestamp == nil {
      return false
    }
    if (*p.StartTimestamp) != (*other.StartTimestamp) { return false }
  }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  if p.CollectInterval != other.CollectInterval {
    if p.CollectInterval == nil || other.CollectInterval == nil {
      return false
    }
    if (*p.CollectInterval) != (*other.CollectInterval) { return false }
  }
  if !p.Gc.Equals(other.Gc) { return false }
  if !p.CpuLoad.Equals(other.CpuLoad) { return false }
  if !p.Transaction.Equals(other.Transaction) { return false }
  if !p.ActiveTrace.Equals(other.ActiveTrace) { return false }
  if p.Metadata != other.Metadata {
    if p.Metadata == nil || other.Metadata == nil {
      return false
    }
    if (*p.Metadata) != (*other.Metadata) { return false }
  }
  if p.ThreadCount != other.ThreadCount {
    if p.ThreadCount == nil || other.ThreadCount == nil {
      return false
    }
    if (*p.ThreadCount) != (*other.ThreadCount) { return false }
  }
  return true
}

func (p *TAgentStat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentStat(%+v)", *p)
}

func (p *TAgentStat) Validate() error {
  return nil
}
// Attributes:
//  - JvmCpuLoad
//  - SystemCpuLoad
type TCpuLoad struct {
  JvmCpuLoad *int64 `thrift:"jvmCpuLoad,1" db:"jvmCpuLoad" json:"jvmCpuLoad,omitempty"`
  SystemCpuLoad *int64 `thrift:"systemCpuLoad,2" db:"systemCpuLoad" json:"systemCpuLoad,omitempty"`
}

func NewTCpuLoad() *TCpuLoad {
  return &TCpuLoad{}
}

var TCpuLoad_JvmCpuLoad_DEFAULT int64
func (p *TCpuLoad) GetJvmCpuLoad() int64 {
  if !p.IsSetJvmCpuLoad() {
    return TCpuLoad_JvmCpuLoad_DEFAULT
  }
return *p.JvmCpuLoad
}
var TCpuLoad_SystemCpuLoad_DEFAULT int64
func (p *TCpuLoad) GetSystemCpuLoad() int64 {
  if !p.IsSetSystemCpuLoad() {
    return TCpuLoad_SystemCpuLoad_DEFAULT
  }
return *p.SystemCpuLoad
}
func (p *TCpuLoad) IsSetJvmCpuLoad() bool {
  return p.JvmCpuLoad != nil
}

func (p *TCpuLoad) IsSetSystemCpuLoad() bool {
  return p.SystemCpuLoad != nil
}

func (p *TCpuLoad) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCpuLoad)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JvmCpuLoad = &v
}
  return nil
}

func (p *TCpuLoad)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemCpuLoad = &v
}
  return nil
}

func (p *TCpuLoad) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCpuLoad"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCpuLoad) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmCpuLoad() {
    if err := oprot.WriteFieldBegin(ctx, "jvmCpuLoad", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jvmCpuLoad: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmCpuLoad)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmCpuLoad (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jvmCpuLoad: ", p), err) }
  }
  return err
}

func (p *TCpuLoad) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemCpuLoad() {
    if err := oprot.WriteFieldBegin(ctx, "systemCpuLoad", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemCpuLoad: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SystemCpuLoad)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.systemCpuLoad (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemCpuLoad: ", p), err) }
  }
  return err
}

func (p *TCpuLoad) Equals(other *TCpuLoad) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JvmCpuLoad != other.JvmCpuLoad {
    if p.JvmCpuLoad == nil || other.JvmCpuLoad == nil {
      return false
    }
    if (*p.JvmCpuLoad) != (*other.JvmCpuLoad) { return false }
  }
  if p.SystemCpuLoad != other.SystemCpuLoad {
    if p.SystemCpuLoad == nil || other.SystemCpuLoad == nil {
      return false
    }
    if (*p.SystemCpuLoad) != (*other.SystemCpuLoad) { return false }
  }
  return true
}

func (p *TCpuLoad) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCpuLoad(%+v)", *p)
}

func (p *TCpuLoad) Validate() error {
  return nil
}
// Attributes:
//  - SampledNewCount
//  - SampledContinuationCount
//  - UnsampledNewCount
//  - UnsampledContinuationCount
type TTransaction struct {
  // unused field # 1
  SampledNewCount *int64 `thrift:"sampledNewCount,2" db:"sampledNewCount" json:"sampledNewCount,omitempty"`
  SampledContinuationCount *int64 `thrift:"sampledContinuationCount,3" db:"sampledContinuationCount" json:"sampledContinuationCount,omitempty"`
  UnsampledNewCount *int64 `thrift:"unsampledNewCount,4" db:"unsampledNewCount" json:"unsampledNewCount,omitempty"`
  UnsampledContinuationCount *int64 `thrift:"unsampledContinuationCount,5" db:"unsampledContinuationCount" json:"unsampledContinuationCount,omitempty"`
}

func NewTTransaction() *TTransaction {
  return &TTransaction{}
}

var TTransaction_SampledNewCount_DEFAULT int64
func (p *TTransaction) GetSampledNewCount() int64 {
  if !p.IsSetSampledNewCount() {
    return TTransaction_SampledNewCount_DEFAULT
  }
return *p.SampledNewCount
}
var TTransaction_SampledContinuationCount_DEFAULT int64
func (p *TTransaction) GetSampledContinuationCount() int64 {
  if !p.IsSetSampledContinuationCount() {
    return TTransaction_SampledContinuationCount_DEFAULT
  }
return *p.SampledContinuationCount
}
var TTransaction_UnsampledNewCount_DEFAULT int64
func (p *TTransaction) GetUnsampledNewCount() int64 {
  if !p.IsSetUnsampledNewCount() {
    return TTransaction_UnsampledNewCount_DEFAULT
  }
return *p.UnsampledNewCount
}
var TTransaction_UnsampledContinuationCount_DEFAULT int64
func (p *TTransaction) GetUnsampledContinuationCount() int64 {
  if !p.IsSetUnsampledContinuationCount() {
    return TTransaction_UnsampledContinuationCount_DEFAULT
  }
return *p.UnsampledContinuationCount
}
func (p *TTransaction) IsSetSampledNewCount() bool {
  return p.SampledNewCount != nil
}

func (p *TTransaction) IsSetSampledContinuationCount() bool {
  return p.SampledContinuationCount != nil
}

func (p *TTransaction) IsSetUnsampledNewCount() bool {
  return p.UnsampledNewCount != nil
}

func (p *TTransaction) IsSetUnsampledContinuationCount() bool {
  return p.UnsampledContinuationCount != nil
}

func (p *TTransaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampledNewCount = &v
}
  return nil
}

func (p *TTransaction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SampledContinuationCount = &v
}
  return nil
}

func (p *TTransaction)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UnsampledNewCount = &v
}
  return nil
}

func (p *TTransaction)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UnsampledContinuationCount = &v
}
  return nil
}

func (p *TTransaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampledNewCount() {
    if err := oprot.WriteFieldBegin(ctx, "sampledNewCount", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampledNewCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SampledNewCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampledNewCount (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampledNewCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampledContinuationCount() {
    if err := oprot.WriteFieldBegin(ctx, "sampledContinuationCount", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sampledContinuationCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SampledContinuationCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampledContinuationCount (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sampledContinuationCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUnsampledNewCount() {
    if err := oprot.WriteFieldBegin(ctx, "unsampledNewCount", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unsampledNewCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.UnsampledNewCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unsampledNewCount (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unsampledNewCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUnsampledContinuationCount() {
    if err := oprot.WriteFieldBegin(ctx, "unsampledContinuationCount", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unsampledContinuationCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.UnsampledContinuationCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unsampledContinuationCount (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unsampledContinuationCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) Equals(other *TTransaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SampledNewCount != other.SampledNewCount {
    if p.SampledNewCount == nil || other.SampledNewCount == nil {
      return false
    }
    if (*p.SampledNewCount) != (*other.SampledNewCount) { return false }
  }
  if p.SampledContinuationCount != other.SampledContinuationCount {
    if p.SampledContinuationCount == nil || other.SampledContinuationCount == nil {
      return false
    }
    if (*p.SampledContinuationCount) != (*other.SampledContinuationCount) { return false }
  }
  if p.UnsampledNewCount != other.UnsampledNewCount {
    if p.UnsampledNewCount == nil || other.UnsampledNewCount == nil {
      return false
    }
    if (*p.UnsampledNewCount) != (*other.UnsampledNewCount) { return false }
  }
  if p.UnsampledContinuationCount != other.UnsampledContinuationCount {
    if p.UnsampledContinuationCount == nil || other.UnsampledContinuationCount == nil {
      return false
    }
    if (*p.UnsampledContinuationCount) != (*other.UnsampledContinuationCount) { return false }
  }
  return true
}

func (p *TTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransaction(%+v)", *p)
}

func (p *TTransaction) Validate() error {
  return nil
}
// Attributes:
//  - Histogram
type TActiveTrace struct {
  Histogram *TActiveTraceHistogram `thrift:"histogram,1" db:"histogram" json:"histogram,omitempty"`
}

func NewTActiveTrace() *TActiveTrace {
  return &TActiveTrace{}
}

var TActiveTrace_Histogram_DEFAULT *TActiveTraceHistogram
func (p *TActiveTrace) GetHistogram() *TActiveTraceHistogram {
  if !p.IsSetHistogram() {
    return TActiveTrace_Histogram_DEFAULT
  }
return p.Histogram
}
func (p *TActiveTrace) IsSetHistogram() bool {
  return p.Histogram != nil
}

func (p *TActiveTrace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActiveTrace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Histogram = &TActiveTraceHistogram{}
  if err := p.Histogram.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Histogram), err)
  }
  return nil
}

func (p *TActiveTrace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TActiveTrace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActiveTrace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHistogram() {
    if err := oprot.WriteFieldBegin(ctx, "histogram", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:histogram: ", p), err) }
    if err := p.Histogram.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Histogram), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:histogram: ", p), err) }
  }
  return err
}

func (p *TActiveTrace) Equals(other *TActiveTrace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Histogram.Equals(other.Histogram) { return false }
  return true
}

func (p *TActiveTrace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActiveTrace(%+v)", *p)
}

func (p *TActiveTrace) Validate() error {
  return nil
}
// Attributes:
//  - Version
//  - HistogramSchemaType
//  - ActiveTraceCount
type TActiveTraceHistogram struct {
  Version int16 `thrift:"version,1" db:"version" json:"version"`
  HistogramSchemaType *int32 `thrift:"histogramSchemaType,2" db:"histogramSchemaType" json:"histogramSchemaType,omitempty"`
  ActiveTraceCount []int32 `thrift:"activeTraceCount,3" db:"activeTraceCount" json:"activeTraceCount,omitempty"`
}

func NewTActiveTraceHistogram() *TActiveTraceHistogram {
  return &TActiveTraceHistogram{}
}


func (p *TActiveTraceHistogram) GetVersion() int16 {
  return p.Version
}
var TActiveTraceHistogram_HistogramSchemaType_DEFAULT int32
func (p *TActiveTraceHistogram) GetHistogramSchemaType() int32 {
  if !p.IsSetHistogramSchemaType() {
    return TActiveTraceHistogram_HistogramSchemaType_DEFAULT
  }
return *p.HistogramSchemaType
}
var TActiveTraceHistogram_ActiveTraceCount_DEFAULT []int32

func (p *TActiveTraceHistogram) GetActiveTraceCount() []int32 {
  return p.ActiveTraceCount
}
func (p *TActiveTraceHistogram) IsSetHistogramSchemaType() bool {
  return p.HistogramSchemaType != nil
}

func (p *TActiveTraceHistogram) IsSetActiveTraceCount() bool {
  return p.ActiveTraceCount != nil
}

func (p *TActiveTraceHistogram) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActiveTraceHistogram)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TActiveTraceHistogram)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HistogramSchemaType = &v
}
  return nil
}

func (p *TActiveTraceHistogram)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ActiveTraceCount =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.ActiveTraceCount = append(p.ActiveTraceCount, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TActiveTraceHistogram) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TActiveTraceHistogram"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActiveTraceHistogram) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *TActiveTraceHistogram) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHistogramSchemaType() {
    if err := oprot.WriteFieldBegin(ctx, "histogramSchemaType", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:histogramSchemaType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.HistogramSchemaType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.histogramSchemaType (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:histogramSchemaType: ", p), err) }
  }
  return err
}

func (p *TActiveTraceHistogram) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetActiveTraceCount() {
    if err := oprot.WriteFieldBegin(ctx, "activeTraceCount", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activeTraceCount: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.ActiveTraceCount)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ActiveTraceCount {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activeTraceCount: ", p), err) }
  }
  return err
}

func (p *TActiveTraceHistogram) Equals(other *TActiveTraceHistogram) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.HistogramSchemaType != other.HistogramSchemaType {
    if p.HistogramSchemaType == nil || other.HistogramSchemaType == nil {
      return false
    }
    if (*p.HistogramSchemaType) != (*other.HistogramSchemaType) { return false }
  }
  if len(p.ActiveTraceCount) != len(other.ActiveTraceCount) { return false }
  for i, _tgt := range p.ActiveTraceCount {
    _src11 := other.ActiveTraceCount[i]
    if _tgt != _src11 { return false }
  }
  return true
}

func (p *TActiveTraceHistogram) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActiveTraceHistogram(%+v)", *p)
}

func (p *TActiveTraceHistogram) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - StartTimestamp
//  - AppKey
//  - AppId
//  - Tenant
//  - AgentStats
//  - ServiceType
type TAgentStatBatch struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  StartTimestamp int64 `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp"`
  AppKey string `thrift:"appKey,3" db:"appKey" json:"appKey"`
  AppId string `thrift:"appId,4" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,5" db:"tenant" json:"tenant"`
  // unused fields # 6 to 9
  AgentStats []*TAgentStat `thrift:"agentStats,10" db:"agentStats" json:"agentStats"`
  ServiceType *int16 `thrift:"serviceType,11" db:"serviceType" json:"serviceType,omitempty"`
}

func NewTAgentStatBatch() *TAgentStatBatch {
  return &TAgentStatBatch{}
}


func (p *TAgentStatBatch) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentStatBatch) GetStartTimestamp() int64 {
  return p.StartTimestamp
}

func (p *TAgentStatBatch) GetAppKey() string {
  return p.AppKey
}

func (p *TAgentStatBatch) GetAppId() string {
  return p.AppId
}

func (p *TAgentStatBatch) GetTenant() string {
  return p.Tenant
}

func (p *TAgentStatBatch) GetAgentStats() []*TAgentStat {
  return p.AgentStats
}
var TAgentStatBatch_ServiceType_DEFAULT int16
func (p *TAgentStatBatch) GetServiceType() int16 {
  if !p.IsSetServiceType() {
    return TAgentStatBatch_ServiceType_DEFAULT
  }
return *p.ServiceType
}
func (p *TAgentStatBatch) IsSetServiceType() bool {
  return p.ServiceType != nil
}

func (p *TAgentStatBatch) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentStatBatch)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAgentStat, 0, size)
  p.AgentStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &TAgentStat{}
    if err := _elem12.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.AgentStats = append(p.AgentStats, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAgentStatBatch)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ServiceType = &v
}
  return nil
}

func (p *TAgentStatBatch) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentStatBatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentStatBatch) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appKey: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appId: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tenant: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStats", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:agentStats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.AgentStats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AgentStats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:agentStats: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:serviceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceType (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:serviceType: ", p), err) }
  }
  return err
}

func (p *TAgentStatBatch) Equals(other *TAgentStatBatch) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.StartTimestamp != other.StartTimestamp { return false }
  if p.AppKey != other.AppKey { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if len(p.AgentStats) != len(other.AgentStats) { return false }
  for i, _tgt := range p.AgentStats {
    _src13 := other.AgentStats[i]
    if !_tgt.Equals(_src13) { return false }
  }
  if p.ServiceType != other.ServiceType {
    if p.ServiceType == nil || other.ServiceType == nil {
      return false
    }
    if (*p.ServiceType) != (*other.ServiceType) { return false }
  }
  return true
}

func (p *TAgentStatBatch) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentStatBatch(%+v)", *p)
}

func (p *TAgentStatBatch) Validate() error {
  return nil
}
// Attributes:
//  - Appkey
//  - AgentId
//  - EventTimestamp
//  - EventType
//  - EventMessage
type TAgentEvent struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  // unused fields # 2 to 4
  AgentId string `thrift:"agentId,5" db:"agentId" json:"agentId"`
  EventTimestamp int64 `thrift:"eventTimestamp,6" db:"eventTimestamp" json:"eventTimestamp"`
  EventType *TAgentEventType `thrift:"eventType,7" db:"eventType" json:"eventType"`
  EventMessage *string `thrift:"eventMessage,8" db:"eventMessage" json:"eventMessage,omitempty"`
}

func NewTAgentEvent() *TAgentEvent {
  return &TAgentEvent{}
}


func (p *TAgentEvent) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentEvent) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentEvent) GetEventTimestamp() int64 {
  return p.EventTimestamp
}
var TAgentEvent_EventType_DEFAULT *TAgentEventType
func (p *TAgentEvent) GetEventType() *TAgentEventType {
  if !p.IsSetEventType() {
    return TAgentEvent_EventType_DEFAULT
  }
return p.EventType
}
var TAgentEvent_EventMessage_DEFAULT string
func (p *TAgentEvent) GetEventMessage() string {
  if !p.IsSetEventMessage() {
    return TAgentEvent_EventMessage_DEFAULT
  }
return *p.EventMessage
}
func (p *TAgentEvent) IsSetEventType() bool {
  return p.EventType != nil
}

func (p *TAgentEvent) IsSetEventMessage() bool {
  return p.EventMessage != nil
}

func (p *TAgentEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentEvent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentEvent)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentEvent)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EventTimestamp = v
}
  return nil
}

func (p *TAgentEvent)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.EventType = &TAgentEventType{}
  if err := p.EventType.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventType), err)
  }
  return nil
}

func (p *TAgentEvent)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EventMessage = &v
}
  return nil
}

func (p *TAgentEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentId: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventTimestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:eventTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EventTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventTimestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:eventTimestamp: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventType", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:eventType: ", p), err) }
  if err := p.EventType.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventType), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:eventType: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEventMessage() {
    if err := oprot.WriteFieldBegin(ctx, "eventMessage", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:eventMessage: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EventMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventMessage (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:eventMessage: ", p), err) }
  }
  return err
}

func (p *TAgentEvent) Equals(other *TAgentEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Appkey != other.Appkey { return false }
  if p.AgentId != other.AgentId { return false }
  if p.EventTimestamp != other.EventTimestamp { return false }
  if !p.EventType.Equals(other.EventType) { return false }
  if p.EventMessage != other.EventMessage {
    if p.EventMessage == nil || other.EventMessage == nil {
      return false
    }
    if (*p.EventMessage) != (*other.EventMessage) { return false }
  }
  return true
}

func (p *TAgentEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentEvent(%+v)", *p)
}

func (p *TAgentEvent) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Desc
type TAgentEventType struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Desc string `thrift:"desc,2" db:"desc" json:"desc"`
}

func NewTAgentEventType() *TAgentEventType {
  return &TAgentEventType{}
}


func (p *TAgentEventType) GetCode() int32 {
  return p.Code
}

func (p *TAgentEventType) GetDesc() string {
  return p.Desc
}
func (p *TAgentEventType) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentEventType)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TAgentEventType)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *TAgentEventType) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentEventType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentEventType) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TAgentEventType) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "desc", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desc: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desc: ", p), err) }
  return err
}

func (p *TAgentEventType) Equals(other *TAgentEventType) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Desc != other.Desc { return false }
  return true
}

func (p *TAgentEventType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentEventType(%+v)", *p)
}

func (p *TAgentEventType) Validate() error {
  return nil
}
