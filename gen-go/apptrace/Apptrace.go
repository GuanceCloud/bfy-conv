// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package apptrace

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type TJvmGcType int64
const (
  TJvmGcType_UNKNOWN TJvmGcType = 0
  TJvmGcType_SERIAL TJvmGcType = 1
  TJvmGcType_PARALLEL TJvmGcType = 2
  TJvmGcType_CMS TJvmGcType = 3
  TJvmGcType_G1 TJvmGcType = 4
  TJvmGcType_JRockitThroughput TJvmGcType = 5
)

func (p TJvmGcType) String() string {
  switch p {
  case TJvmGcType_UNKNOWN: return "UNKNOWN"
  case TJvmGcType_SERIAL: return "SERIAL"
  case TJvmGcType_PARALLEL: return "PARALLEL"
  case TJvmGcType_CMS: return "CMS"
  case TJvmGcType_G1: return "G1"
  case TJvmGcType_JRockitThroughput: return "JRockitThroughput"
  }
  return "<UNSET>"
}

func TJvmGcTypeFromString(s string) (TJvmGcType, error) {
  switch s {
  case "UNKNOWN": return TJvmGcType_UNKNOWN, nil 
  case "SERIAL": return TJvmGcType_SERIAL, nil 
  case "PARALLEL": return TJvmGcType_PARALLEL, nil 
  case "CMS": return TJvmGcType_CMS, nil 
  case "G1": return TJvmGcType_G1, nil 
  case "JRockitThroughput": return TJvmGcType_JRockitThroughput, nil 
  }
  return TJvmGcType(0), fmt.Errorf("not a valid TJvmGcType string")
}


func TJvmGcTypePtr(v TJvmGcType) *TJvmGcType { return &v }

func (p TJvmGcType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TJvmGcType) UnmarshalText(text []byte) error {
q, err := TJvmGcTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TJvmGcType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TJvmGcType(v)
return nil
}

func (p * TJvmGcType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - ServiceName
//  - ServiceLibs
type TServiceInfo struct {
  ServiceName *string `thrift:"serviceName,1" db:"serviceName" json:"serviceName,omitempty"`
  ServiceLibs []string `thrift:"serviceLibs,2" db:"serviceLibs" json:"serviceLibs,omitempty"`
}

func NewTServiceInfo() *TServiceInfo {
  return &TServiceInfo{}
}

var TServiceInfo_ServiceName_DEFAULT string
func (p *TServiceInfo) GetServiceName() string {
  if !p.IsSetServiceName() {
    return TServiceInfo_ServiceName_DEFAULT
  }
return *p.ServiceName
}
var TServiceInfo_ServiceLibs_DEFAULT []string

func (p *TServiceInfo) GetServiceLibs() []string {
  return p.ServiceLibs
}
func (p *TServiceInfo) IsSetServiceName() bool {
  return p.ServiceName != nil
}

func (p *TServiceInfo) IsSetServiceLibs() bool {
  return p.ServiceLibs != nil
}

func (p *TServiceInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServiceInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServiceName = &v
}
  return nil
}

func (p *TServiceInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.ServiceLibs =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.ServiceLibs = append(p.ServiceLibs, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServiceInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TServiceInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServiceInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceName() {
    if err := oprot.WriteFieldBegin(ctx, "serviceName", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serviceName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServiceName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceName (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serviceName: ", p), err) }
  }
  return err
}

func (p *TServiceInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceLibs() {
    if err := oprot.WriteFieldBegin(ctx, "serviceLibs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:serviceLibs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.ServiceLibs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ServiceLibs {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:serviceLibs: ", p), err) }
  }
  return err
}

func (p *TServiceInfo) Equals(other *TServiceInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServiceName != other.ServiceName {
    if p.ServiceName == nil || other.ServiceName == nil {
      return false
    }
    if (*p.ServiceName) != (*other.ServiceName) { return false }
  }
  if len(p.ServiceLibs) != len(other.ServiceLibs) { return false }
  for i, _tgt := range p.ServiceLibs {
    _src1 := other.ServiceLibs[i]
    if _tgt != _src1 { return false }
  }
  return true
}

func (p *TServiceInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServiceInfo(%+v)", *p)
}

func (p *TServiceInfo) Validate() error {
  return nil
}
// Attributes:
//  - ServerInfo
//  - VmArgs_
//  - ServiceInfos
type TServerMetaData struct {
  ServerInfo *string `thrift:"serverInfo,1" db:"serverInfo" json:"serverInfo,omitempty"`
  VmArgs_ []string `thrift:"vmArgs,2" db:"vmArgs" json:"vmArgs,omitempty"`
  // unused fields # 3 to 9
  ServiceInfos []*TServiceInfo `thrift:"serviceInfos,10" db:"serviceInfos" json:"serviceInfos,omitempty"`
}

func NewTServerMetaData() *TServerMetaData {
  return &TServerMetaData{}
}

var TServerMetaData_ServerInfo_DEFAULT string
func (p *TServerMetaData) GetServerInfo() string {
  if !p.IsSetServerInfo() {
    return TServerMetaData_ServerInfo_DEFAULT
  }
return *p.ServerInfo
}
var TServerMetaData_VmArgs__DEFAULT []string

func (p *TServerMetaData) GetVmArgs_() []string {
  return p.VmArgs_
}
var TServerMetaData_ServiceInfos_DEFAULT []*TServiceInfo

func (p *TServerMetaData) GetServiceInfos() []*TServiceInfo {
  return p.ServiceInfos
}
func (p *TServerMetaData) IsSetServerInfo() bool {
  return p.ServerInfo != nil
}

func (p *TServerMetaData) IsSetVmArgs_() bool {
  return p.VmArgs_ != nil
}

func (p *TServerMetaData) IsSetServiceInfos() bool {
  return p.ServiceInfos != nil
}

func (p *TServerMetaData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServerMetaData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ServerInfo = &v
}
  return nil
}

func (p *TServerMetaData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.VmArgs_ =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.VmArgs_ = append(p.VmArgs_, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServerMetaData)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TServiceInfo, 0, size)
  p.ServiceInfos =  tSlice
  for i := 0; i < size; i ++ {
    _elem3 := &TServiceInfo{}
    if err := _elem3.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem3), err)
    }
    p.ServiceInfos = append(p.ServiceInfos, _elem3)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServerMetaData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TServerMetaData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServerMetaData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServerInfo() {
    if err := oprot.WriteFieldBegin(ctx, "serverInfo", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:serverInfo: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ServerInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serverInfo (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:serverInfo: ", p), err) }
  }
  return err
}

func (p *TServerMetaData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVmArgs_() {
    if err := oprot.WriteFieldBegin(ctx, "vmArgs", thrift.LIST, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vmArgs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.VmArgs_)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.VmArgs_ {
      if err := oprot.WriteString(ctx, string(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vmArgs: ", p), err) }
  }
  return err
}

func (p *TServerMetaData) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceInfos() {
    if err := oprot.WriteFieldBegin(ctx, "serviceInfos", thrift.LIST, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceInfos: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ServiceInfos)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ServiceInfos {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceInfos: ", p), err) }
  }
  return err
}

func (p *TServerMetaData) Equals(other *TServerMetaData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ServerInfo != other.ServerInfo {
    if p.ServerInfo == nil || other.ServerInfo == nil {
      return false
    }
    if (*p.ServerInfo) != (*other.ServerInfo) { return false }
  }
  if len(p.VmArgs_) != len(other.VmArgs_) { return false }
  for i, _tgt := range p.VmArgs_ {
    _src4 := other.VmArgs_[i]
    if _tgt != _src4 { return false }
  }
  if len(p.ServiceInfos) != len(other.ServiceInfos) { return false }
  for i, _tgt := range p.ServiceInfos {
    _src5 := other.ServiceInfos[i]
    if !_tgt.Equals(_src5) { return false }
  }
  return true
}

func (p *TServerMetaData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServerMetaData(%+v)", *p)
}

func (p *TServerMetaData) Validate() error {
  return nil
}
// Attributes:
//  - Version
//  - VmVersion
//  - GcType
type TJvmInfo struct {
  Version int16 `thrift:"version,1" db:"version" json:"version"`
  VmVersion *string `thrift:"vmVersion,2" db:"vmVersion" json:"vmVersion,omitempty"`
  GcType TJvmGcType `thrift:"gcType,3" db:"gcType" json:"gcType"`
}

func NewTJvmInfo() *TJvmInfo {
  return &TJvmInfo{
GcType: 0,
}
}


func (p *TJvmInfo) GetVersion() int16 {
  return p.Version
}
var TJvmInfo_VmVersion_DEFAULT string
func (p *TJvmInfo) GetVmVersion() string {
  if !p.IsSetVmVersion() {
    return TJvmInfo_VmVersion_DEFAULT
  }
return *p.VmVersion
}
var TJvmInfo_GcType_DEFAULT TJvmGcType = 0

func (p *TJvmInfo) GetGcType() TJvmGcType {
  return p.GcType
}
func (p *TJvmInfo) IsSetVmVersion() bool {
  return p.VmVersion != nil
}

func (p *TJvmInfo) IsSetGcType() bool {
  return p.GcType != TJvmInfo_GcType_DEFAULT
}

func (p *TJvmInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TJvmInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TJvmInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.VmVersion = &v
}
  return nil
}

func (p *TJvmInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  temp := TJvmGcType(v)
  p.GcType = temp
}
  return nil
}

func (p *TJvmInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TJvmInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TJvmInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *TJvmInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetVmVersion() {
    if err := oprot.WriteFieldBegin(ctx, "vmVersion", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:vmVersion: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.VmVersion)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.vmVersion (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:vmVersion: ", p), err) }
  }
  return err
}

func (p *TJvmInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGcType() {
    if err := oprot.WriteFieldBegin(ctx, "gcType", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:gcType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.GcType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.gcType (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:gcType: ", p), err) }
  }
  return err
}

func (p *TJvmInfo) Equals(other *TJvmInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.VmVersion != other.VmVersion {
    if p.VmVersion == nil || other.VmVersion == nil {
      return false
    }
    if (*p.VmVersion) != (*other.VmVersion) { return false }
  }
  if p.GcType != other.GcType { return false }
  return true
}

func (p *TJvmInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TJvmInfo(%+v)", *p)
}

func (p *TJvmInfo) Validate() error {
  return nil
}
// Attributes:
//  - Hostname
//  - IP
//  - Ports
//  - AgentId
//  - ApplicationName
//  - ServiceType
//  - Pid
//  - AgentVersion
//  - VmVersion
//  - StartTimestamp
//  - EndTimestamp
//  - EndStatus
//  - Appkey
//  - OsName
//  - OsVersion
//  - AppId
//  - Tenant
//  - CollectionStatus
//  - ServerMetaData
//  - JvmInfo
type TAgentInfo struct {
  Hostname string `thrift:"hostname,1" db:"hostname" json:"hostname"`
  IP string `thrift:"ip,2" db:"ip" json:"ip"`
  Ports string `thrift:"ports,3" db:"ports" json:"ports"`
  AgentId string `thrift:"agentId,4" db:"agentId" json:"agentId"`
  ApplicationName string `thrift:"applicationName,5" db:"applicationName" json:"applicationName"`
  ServiceType int16 `thrift:"serviceType,6" db:"serviceType" json:"serviceType"`
  Pid int32 `thrift:"pid,7" db:"pid" json:"pid"`
  AgentVersion string `thrift:"agentVersion,8" db:"agentVersion" json:"agentVersion"`
  VmVersion string `thrift:"vmVersion,9" db:"vmVersion" json:"vmVersion"`
  StartTimestamp int64 `thrift:"startTimestamp,10" db:"startTimestamp" json:"startTimestamp"`
  EndTimestamp *int64 `thrift:"endTimestamp,11" db:"endTimestamp" json:"endTimestamp,omitempty"`
  EndStatus *int32 `thrift:"endStatus,12" db:"endStatus" json:"endStatus,omitempty"`
  Appkey string `thrift:"appkey,13" db:"appkey" json:"appkey"`
  OsName string `thrift:"osName,14" db:"osName" json:"osName"`
  OsVersion string `thrift:"osVersion,15" db:"osVersion" json:"osVersion"`
  AppId string `thrift:"appId,16" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,17" db:"tenant" json:"tenant"`
  CollectionStatus *string `thrift:"collectionStatus,18" db:"collectionStatus" json:"collectionStatus,omitempty"`
  // unused field # 19
  ServerMetaData *TServerMetaData `thrift:"serverMetaData,20" db:"serverMetaData" json:"serverMetaData,omitempty"`
  // unused fields # 21 to 29
  JvmInfo *TJvmInfo `thrift:"jvmInfo,30" db:"jvmInfo" json:"jvmInfo,omitempty"`
}

func NewTAgentInfo() *TAgentInfo {
  return &TAgentInfo{}
}


func (p *TAgentInfo) GetHostname() string {
  return p.Hostname
}

func (p *TAgentInfo) GetIP() string {
  return p.IP
}

func (p *TAgentInfo) GetPorts() string {
  return p.Ports
}

func (p *TAgentInfo) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentInfo) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TAgentInfo) GetServiceType() int16 {
  return p.ServiceType
}

func (p *TAgentInfo) GetPid() int32 {
  return p.Pid
}

func (p *TAgentInfo) GetAgentVersion() string {
  return p.AgentVersion
}

func (p *TAgentInfo) GetVmVersion() string {
  return p.VmVersion
}

func (p *TAgentInfo) GetStartTimestamp() int64 {
  return p.StartTimestamp
}
var TAgentInfo_EndTimestamp_DEFAULT int64
func (p *TAgentInfo) GetEndTimestamp() int64 {
  if !p.IsSetEndTimestamp() {
    return TAgentInfo_EndTimestamp_DEFAULT
  }
return *p.EndTimestamp
}
var TAgentInfo_EndStatus_DEFAULT int32
func (p *TAgentInfo) GetEndStatus() int32 {
  if !p.IsSetEndStatus() {
    return TAgentInfo_EndStatus_DEFAULT
  }
return *p.EndStatus
}

func (p *TAgentInfo) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentInfo) GetOsName() string {
  return p.OsName
}

func (p *TAgentInfo) GetOsVersion() string {
  return p.OsVersion
}

func (p *TAgentInfo) GetAppId() string {
  return p.AppId
}

func (p *TAgentInfo) GetTenant() string {
  return p.Tenant
}
var TAgentInfo_CollectionStatus_DEFAULT string
func (p *TAgentInfo) GetCollectionStatus() string {
  if !p.IsSetCollectionStatus() {
    return TAgentInfo_CollectionStatus_DEFAULT
  }
return *p.CollectionStatus
}
var TAgentInfo_ServerMetaData_DEFAULT *TServerMetaData
func (p *TAgentInfo) GetServerMetaData() *TServerMetaData {
  if !p.IsSetServerMetaData() {
    return TAgentInfo_ServerMetaData_DEFAULT
  }
return p.ServerMetaData
}
var TAgentInfo_JvmInfo_DEFAULT *TJvmInfo
func (p *TAgentInfo) GetJvmInfo() *TJvmInfo {
  if !p.IsSetJvmInfo() {
    return TAgentInfo_JvmInfo_DEFAULT
  }
return p.JvmInfo
}
func (p *TAgentInfo) IsSetEndTimestamp() bool {
  return p.EndTimestamp != nil
}

func (p *TAgentInfo) IsSetEndStatus() bool {
  return p.EndStatus != nil
}

func (p *TAgentInfo) IsSetCollectionStatus() bool {
  return p.CollectionStatus != nil
}

func (p *TAgentInfo) IsSetServerMetaData() bool {
  return p.ServerMetaData != nil
}

func (p *TAgentInfo) IsSetJvmInfo() bool {
  return p.JvmInfo != nil
}

func (p *TAgentInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Hostname = v
}
  return nil
}

func (p *TAgentInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.IP = v
}
  return nil
}

func (p *TAgentInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Ports = v
}
  return nil
}

func (p *TAgentInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentInfo)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TAgentInfo)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TAgentInfo)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Pid = v
}
  return nil
}

func (p *TAgentInfo)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AgentVersion = v
}
  return nil
}

func (p *TAgentInfo)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.VmVersion = v
}
  return nil
}

func (p *TAgentInfo)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *TAgentInfo)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.EndTimestamp = &v
}
  return nil
}

func (p *TAgentInfo)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.EndStatus = &v
}
  return nil
}

func (p *TAgentInfo)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentInfo)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.OsName = v
}
  return nil
}

func (p *TAgentInfo)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.OsVersion = v
}
  return nil
}

func (p *TAgentInfo)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentInfo)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentInfo)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.CollectionStatus = &v
}
  return nil
}

func (p *TAgentInfo)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.ServerMetaData = &TServerMetaData{}
  if err := p.ServerMetaData.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ServerMetaData), err)
  }
  return nil
}

func (p *TAgentInfo)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  p.JvmInfo = &TJvmInfo{
  GcType: 0,
}
  if err := p.JvmInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JvmInfo), err)
  }
  return nil
}

func (p *TAgentInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hostname", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:hostname: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hostname)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hostname (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:hostname: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:ip: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IP)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ip (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:ip: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ports", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:ports: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Ports)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ports (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:ports: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:agentId: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:applicationName: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:serviceType: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pid", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:pid: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Pid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pid (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:pid: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentVersion", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:agentVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentVersion (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:agentVersion: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "vmVersion", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:vmVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.VmVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.vmVersion (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:vmVersion: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:startTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:startTimestamp: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "endTimestamp", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:endTimestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.EndTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endTimestamp (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:endTimestamp: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndStatus() {
    if err := oprot.WriteFieldBegin(ctx, "endStatus", thrift.I32, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:endStatus: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.EndStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endStatus (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:endStatus: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:appkey: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "osName", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:osName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OsName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osName (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:osName: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "osVersion", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:osVersion: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.OsVersion)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.osVersion (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:osVersion: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:appId: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:tenant: ", p), err) }
  return err
}

func (p *TAgentInfo) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCollectionStatus() {
    if err := oprot.WriteFieldBegin(ctx, "collectionStatus", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:collectionStatus: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.CollectionStatus)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.collectionStatus (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:collectionStatus: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServerMetaData() {
    if err := oprot.WriteFieldBegin(ctx, "serverMetaData", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:serverMetaData: ", p), err) }
    if err := p.ServerMetaData.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ServerMetaData), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:serverMetaData: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmInfo() {
    if err := oprot.WriteFieldBegin(ctx, "jvmInfo", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:jvmInfo: ", p), err) }
    if err := p.JvmInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JvmInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:jvmInfo: ", p), err) }
  }
  return err
}

func (p *TAgentInfo) Equals(other *TAgentInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Hostname != other.Hostname { return false }
  if p.IP != other.IP { return false }
  if p.Ports != other.Ports { return false }
  if p.AgentId != other.AgentId { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.ServiceType != other.ServiceType { return false }
  if p.Pid != other.Pid { return false }
  if p.AgentVersion != other.AgentVersion { return false }
  if p.VmVersion != other.VmVersion { return false }
  if p.StartTimestamp != other.StartTimestamp { return false }
  if p.EndTimestamp != other.EndTimestamp {
    if p.EndTimestamp == nil || other.EndTimestamp == nil {
      return false
    }
    if (*p.EndTimestamp) != (*other.EndTimestamp) { return false }
  }
  if p.EndStatus != other.EndStatus {
    if p.EndStatus == nil || other.EndStatus == nil {
      return false
    }
    if (*p.EndStatus) != (*other.EndStatus) { return false }
  }
  if p.Appkey != other.Appkey { return false }
  if p.OsName != other.OsName { return false }
  if p.OsVersion != other.OsVersion { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.CollectionStatus != other.CollectionStatus {
    if p.CollectionStatus == nil || other.CollectionStatus == nil {
      return false
    }
    if (*p.CollectionStatus) != (*other.CollectionStatus) { return false }
  }
  if !p.ServerMetaData.Equals(other.ServerMetaData) { return false }
  if !p.JvmInfo.Equals(other.JvmInfo) { return false }
  return true
}

func (p *TAgentInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentInfo(%+v)", *p)
}

func (p *TAgentInfo) Validate() error {
  return nil
}
// Attributes:
//  - Type
//  - JvmMemoryHeapUsed
//  - JvmMemoryHeapMax
//  - JvmMemoryNonHeapUsed
//  - JvmMemoryNonHeapMax
//  - JvmGcOldCount
//  - JvmGcOldTime
//  - JvmGcDetailed
//  - JvmMemoryNonHeapCommitted
//  - TotalPhysicalMemory
//  - TExecuteDfs
//  - TExecuteIostat
//  - JdbcConnNum
//  - ThreadNum
//  - JvmGcOldCountNew
//  - JvmGcOldTimeNew
type TJvmGc struct {
  Type TJvmGcType `thrift:"type,1" db:"type" json:"type"`
  JvmMemoryHeapUsed int64 `thrift:"jvmMemoryHeapUsed,2" db:"jvmMemoryHeapUsed" json:"jvmMemoryHeapUsed"`
  JvmMemoryHeapMax int64 `thrift:"jvmMemoryHeapMax,3" db:"jvmMemoryHeapMax" json:"jvmMemoryHeapMax"`
  JvmMemoryNonHeapUsed int64 `thrift:"jvmMemoryNonHeapUsed,4" db:"jvmMemoryNonHeapUsed" json:"jvmMemoryNonHeapUsed"`
  JvmMemoryNonHeapMax int64 `thrift:"jvmMemoryNonHeapMax,5" db:"jvmMemoryNonHeapMax" json:"jvmMemoryNonHeapMax"`
  JvmGcOldCount int64 `thrift:"jvmGcOldCount,6" db:"jvmGcOldCount" json:"jvmGcOldCount"`
  JvmGcOldTime int64 `thrift:"jvmGcOldTime,7" db:"jvmGcOldTime" json:"jvmGcOldTime"`
  JvmGcDetailed *TJvmGcDetailed `thrift:"jvmGcDetailed,8" db:"jvmGcDetailed" json:"jvmGcDetailed,omitempty"`
  JvmMemoryNonHeapCommitted int64 `thrift:"jvmMemoryNonHeapCommitted,9" db:"jvmMemoryNonHeapCommitted" json:"jvmMemoryNonHeapCommitted"`
  TotalPhysicalMemory *int64 `thrift:"totalPhysicalMemory,10" db:"totalPhysicalMemory" json:"totalPhysicalMemory,omitempty"`
  TExecuteDfs []*TExecuteDf `thrift:"tExecuteDfs,11" db:"tExecuteDfs" json:"tExecuteDfs,omitempty"`
  TExecuteIostat *TExecuteIostat `thrift:"tExecuteIostat,12" db:"tExecuteIostat" json:"tExecuteIostat,omitempty"`
  JdbcConnNum *int16 `thrift:"jdbcConnNum,13" db:"jdbcConnNum" json:"jdbcConnNum,omitempty"`
  ThreadNum *int32 `thrift:"threadNum,14" db:"threadNum" json:"threadNum,omitempty"`
  JvmGcOldCountNew *int64 `thrift:"jvmGcOldCountNew,15" db:"jvmGcOldCountNew" json:"jvmGcOldCountNew,omitempty"`
  JvmGcOldTimeNew *int64 `thrift:"jvmGcOldTimeNew,16" db:"jvmGcOldTimeNew" json:"jvmGcOldTimeNew,omitempty"`
}

func NewTJvmGc() *TJvmGc {
  return &TJvmGc{
Type: 0,
}
}


func (p *TJvmGc) GetType() TJvmGcType {
  return p.Type
}

func (p *TJvmGc) GetJvmMemoryHeapUsed() int64 {
  return p.JvmMemoryHeapUsed
}

func (p *TJvmGc) GetJvmMemoryHeapMax() int64 {
  return p.JvmMemoryHeapMax
}

func (p *TJvmGc) GetJvmMemoryNonHeapUsed() int64 {
  return p.JvmMemoryNonHeapUsed
}

func (p *TJvmGc) GetJvmMemoryNonHeapMax() int64 {
  return p.JvmMemoryNonHeapMax
}

func (p *TJvmGc) GetJvmGcOldCount() int64 {
  return p.JvmGcOldCount
}

func (p *TJvmGc) GetJvmGcOldTime() int64 {
  return p.JvmGcOldTime
}
var TJvmGc_JvmGcDetailed_DEFAULT *TJvmGcDetailed
func (p *TJvmGc) GetJvmGcDetailed() *TJvmGcDetailed {
  if !p.IsSetJvmGcDetailed() {
    return TJvmGc_JvmGcDetailed_DEFAULT
  }
return p.JvmGcDetailed
}

func (p *TJvmGc) GetJvmMemoryNonHeapCommitted() int64 {
  return p.JvmMemoryNonHeapCommitted
}
var TJvmGc_TotalPhysicalMemory_DEFAULT int64
func (p *TJvmGc) GetTotalPhysicalMemory() int64 {
  if !p.IsSetTotalPhysicalMemory() {
    return TJvmGc_TotalPhysicalMemory_DEFAULT
  }
return *p.TotalPhysicalMemory
}
var TJvmGc_TExecuteDfs_DEFAULT []*TExecuteDf

func (p *TJvmGc) GetTExecuteDfs() []*TExecuteDf {
  return p.TExecuteDfs
}
var TJvmGc_TExecuteIostat_DEFAULT *TExecuteIostat
func (p *TJvmGc) GetTExecuteIostat() *TExecuteIostat {
  if !p.IsSetTExecuteIostat() {
    return TJvmGc_TExecuteIostat_DEFAULT
  }
return p.TExecuteIostat
}
var TJvmGc_JdbcConnNum_DEFAULT int16
func (p *TJvmGc) GetJdbcConnNum() int16 {
  if !p.IsSetJdbcConnNum() {
    return TJvmGc_JdbcConnNum_DEFAULT
  }
return *p.JdbcConnNum
}
var TJvmGc_ThreadNum_DEFAULT int32
func (p *TJvmGc) GetThreadNum() int32 {
  if !p.IsSetThreadNum() {
    return TJvmGc_ThreadNum_DEFAULT
  }
return *p.ThreadNum
}
var TJvmGc_JvmGcOldCountNew_DEFAULT int64
func (p *TJvmGc) GetJvmGcOldCountNew() int64 {
  if !p.IsSetJvmGcOldCountNew() {
    return TJvmGc_JvmGcOldCountNew_DEFAULT
  }
return *p.JvmGcOldCountNew
}
var TJvmGc_JvmGcOldTimeNew_DEFAULT int64
func (p *TJvmGc) GetJvmGcOldTimeNew() int64 {
  if !p.IsSetJvmGcOldTimeNew() {
    return TJvmGc_JvmGcOldTimeNew_DEFAULT
  }
return *p.JvmGcOldTimeNew
}
func (p *TJvmGc) IsSetJvmGcDetailed() bool {
  return p.JvmGcDetailed != nil
}

func (p *TJvmGc) IsSetTotalPhysicalMemory() bool {
  return p.TotalPhysicalMemory != nil
}

func (p *TJvmGc) IsSetTExecuteDfs() bool {
  return p.TExecuteDfs != nil
}

func (p *TJvmGc) IsSetTExecuteIostat() bool {
  return p.TExecuteIostat != nil
}

func (p *TJvmGc) IsSetJdbcConnNum() bool {
  return p.JdbcConnNum != nil
}

func (p *TJvmGc) IsSetThreadNum() bool {
  return p.ThreadNum != nil
}

func (p *TJvmGc) IsSetJvmGcOldCountNew() bool {
  return p.JvmGcOldCountNew != nil
}

func (p *TJvmGc) IsSetJvmGcOldTimeNew() bool {
  return p.JvmGcOldTimeNew != nil
}

func (p *TJvmGc) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TJvmGc)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TJvmGcType(v)
  p.Type = temp
}
  return nil
}

func (p *TJvmGc)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JvmMemoryHeapUsed = v
}
  return nil
}

func (p *TJvmGc)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JvmMemoryHeapMax = v
}
  return nil
}

func (p *TJvmGc)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.JvmMemoryNonHeapUsed = v
}
  return nil
}

func (p *TJvmGc)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.JvmMemoryNonHeapMax = v
}
  return nil
}

func (p *TJvmGc)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.JvmGcOldCount = v
}
  return nil
}

func (p *TJvmGc)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.JvmGcOldTime = v
}
  return nil
}

func (p *TJvmGc)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  p.JvmGcDetailed = &TJvmGcDetailed{}
  if err := p.JvmGcDetailed.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.JvmGcDetailed), err)
  }
  return nil
}

func (p *TJvmGc)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.JvmMemoryNonHeapCommitted = v
}
  return nil
}

func (p *TJvmGc)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.TotalPhysicalMemory = &v
}
  return nil
}

func (p *TJvmGc)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TExecuteDf, 0, size)
  p.TExecuteDfs =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TExecuteDf{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.TExecuteDfs = append(p.TExecuteDfs, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TJvmGc)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  p.TExecuteIostat = &TExecuteIostat{}
  if err := p.TExecuteIostat.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TExecuteIostat), err)
  }
  return nil
}

func (p *TJvmGc)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.JdbcConnNum = &v
}
  return nil
}

func (p *TJvmGc)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.ThreadNum = &v
}
  return nil
}

func (p *TJvmGc)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.JvmGcOldCountNew = &v
}
  return nil
}

func (p *TJvmGc)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.JvmGcOldTimeNew = &v
}
  return nil
}

func (p *TJvmGc) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TJvmGc"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TJvmGc) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TJvmGc) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryHeapUsed", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jvmMemoryHeapUsed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryHeapUsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryHeapUsed (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jvmMemoryHeapUsed: ", p), err) }
  return err
}

func (p *TJvmGc) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryHeapMax", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jvmMemoryHeapMax: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryHeapMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryHeapMax (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jvmMemoryHeapMax: ", p), err) }
  return err
}

func (p *TJvmGc) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryNonHeapUsed", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jvmMemoryNonHeapUsed: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryNonHeapUsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapUsed (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jvmMemoryNonHeapUsed: ", p), err) }
  return err
}

func (p *TJvmGc) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryNonHeapMax", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jvmMemoryNonHeapMax: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryNonHeapMax)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapMax (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jvmMemoryNonHeapMax: ", p), err) }
  return err
}

func (p *TJvmGc) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmGcOldCount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jvmGcOldCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmGcOldCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jvmGcOldCount: ", p), err) }
  return err
}

func (p *TJvmGc) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmGcOldTime", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:jvmGcOldTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmGcOldTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldTime (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:jvmGcOldTime: ", p), err) }
  return err
}

func (p *TJvmGc) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcDetailed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcDetailed", thrift.STRUCT, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jvmGcDetailed: ", p), err) }
    if err := p.JvmGcDetailed.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.JvmGcDetailed), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jvmGcDetailed: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "jvmMemoryNonHeapCommitted", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:jvmMemoryNonHeapCommitted: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.JvmMemoryNonHeapCommitted)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.jvmMemoryNonHeapCommitted (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:jvmMemoryNonHeapCommitted: ", p), err) }
  return err
}

func (p *TJvmGc) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTotalPhysicalMemory() {
    if err := oprot.WriteFieldBegin(ctx, "totalPhysicalMemory", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:totalPhysicalMemory: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TotalPhysicalMemory)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.totalPhysicalMemory (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:totalPhysicalMemory: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTExecuteDfs() {
    if err := oprot.WriteFieldBegin(ctx, "tExecuteDfs", thrift.LIST, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:tExecuteDfs: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TExecuteDfs)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.TExecuteDfs {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:tExecuteDfs: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTExecuteIostat() {
    if err := oprot.WriteFieldBegin(ctx, "tExecuteIostat", thrift.STRUCT, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tExecuteIostat: ", p), err) }
    if err := p.TExecuteIostat.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TExecuteIostat), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tExecuteIostat: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJdbcConnNum() {
    if err := oprot.WriteFieldBegin(ctx, "jdbcConnNum", thrift.I16, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:jdbcConnNum: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.JdbcConnNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jdbcConnNum (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:jdbcConnNum: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadNum() {
    if err := oprot.WriteFieldBegin(ctx, "threadNum", thrift.I32, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:threadNum: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ThreadNum)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadNum (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:threadNum: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcOldCountNew() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcOldCountNew", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:jvmGcOldCountNew: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcOldCountNew)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldCountNew (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:jvmGcOldCountNew: ", p), err) }
  }
  return err
}

func (p *TJvmGc) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcOldTimeNew() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcOldTimeNew", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:jvmGcOldTimeNew: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcOldTimeNew)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcOldTimeNew (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:jvmGcOldTimeNew: ", p), err) }
  }
  return err
}

func (p *TJvmGc) Equals(other *TJvmGc) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.JvmMemoryHeapUsed != other.JvmMemoryHeapUsed { return false }
  if p.JvmMemoryHeapMax != other.JvmMemoryHeapMax { return false }
  if p.JvmMemoryNonHeapUsed != other.JvmMemoryNonHeapUsed { return false }
  if p.JvmMemoryNonHeapMax != other.JvmMemoryNonHeapMax { return false }
  if p.JvmGcOldCount != other.JvmGcOldCount { return false }
  if p.JvmGcOldTime != other.JvmGcOldTime { return false }
  if !p.JvmGcDetailed.Equals(other.JvmGcDetailed) { return false }
  if p.JvmMemoryNonHeapCommitted != other.JvmMemoryNonHeapCommitted { return false }
  if p.TotalPhysicalMemory != other.TotalPhysicalMemory {
    if p.TotalPhysicalMemory == nil || other.TotalPhysicalMemory == nil {
      return false
    }
    if (*p.TotalPhysicalMemory) != (*other.TotalPhysicalMemory) { return false }
  }
  if len(p.TExecuteDfs) != len(other.TExecuteDfs) { return false }
  for i, _tgt := range p.TExecuteDfs {
    _src7 := other.TExecuteDfs[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if !p.TExecuteIostat.Equals(other.TExecuteIostat) { return false }
  if p.JdbcConnNum != other.JdbcConnNum {
    if p.JdbcConnNum == nil || other.JdbcConnNum == nil {
      return false
    }
    if (*p.JdbcConnNum) != (*other.JdbcConnNum) { return false }
  }
  if p.ThreadNum != other.ThreadNum {
    if p.ThreadNum == nil || other.ThreadNum == nil {
      return false
    }
    if (*p.ThreadNum) != (*other.ThreadNum) { return false }
  }
  if p.JvmGcOldCountNew != other.JvmGcOldCountNew {
    if p.JvmGcOldCountNew == nil || other.JvmGcOldCountNew == nil {
      return false
    }
    if (*p.JvmGcOldCountNew) != (*other.JvmGcOldCountNew) { return false }
  }
  if p.JvmGcOldTimeNew != other.JvmGcOldTimeNew {
    if p.JvmGcOldTimeNew == nil || other.JvmGcOldTimeNew == nil {
      return false
    }
    if (*p.JvmGcOldTimeNew) != (*other.JvmGcOldTimeNew) { return false }
  }
  return true
}

func (p *TJvmGc) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TJvmGc(%+v)", *p)
}

func (p *TJvmGc) Validate() error {
  return nil
}
// Attributes:
//  - FileSystem
//  - Size
//  - Used
//  - Avail
//  - Usage
//  - MountedOn
type TExecuteDf struct {
  FileSystem string `thrift:"fileSystem,1" db:"fileSystem" json:"fileSystem"`
  Size int64 `thrift:"size,2" db:"size" json:"size"`
  Used int64 `thrift:"used,3" db:"used" json:"used"`
  Avail int64 `thrift:"avail,4" db:"avail" json:"avail"`
  Usage int16 `thrift:"usage,5" db:"usage" json:"usage"`
  MountedOn string `thrift:"mountedOn,6" db:"mountedOn" json:"mountedOn"`
}

func NewTExecuteDf() *TExecuteDf {
  return &TExecuteDf{}
}


func (p *TExecuteDf) GetFileSystem() string {
  return p.FileSystem
}

func (p *TExecuteDf) GetSize() int64 {
  return p.Size
}

func (p *TExecuteDf) GetUsed() int64 {
  return p.Used
}

func (p *TExecuteDf) GetAvail() int64 {
  return p.Avail
}

func (p *TExecuteDf) GetUsage() int16 {
  return p.Usage
}

func (p *TExecuteDf) GetMountedOn() string {
  return p.MountedOn
}
func (p *TExecuteDf) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteDf)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.FileSystem = v
}
  return nil
}

func (p *TExecuteDf)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Size = v
}
  return nil
}

func (p *TExecuteDf)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Used = v
}
  return nil
}

func (p *TExecuteDf)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Avail = v
}
  return nil
}

func (p *TExecuteDf)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Usage = v
}
  return nil
}

func (p *TExecuteDf)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.MountedOn = v
}
  return nil
}

func (p *TExecuteDf) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteDf"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteDf) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileSystem", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:fileSystem: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FileSystem)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileSystem (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:fileSystem: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "size", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:size: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Size)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.size (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:size: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "used", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:used: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Used)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.used (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:used: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "avail", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:avail: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Avail)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.avail (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:avail: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "usage", thrift.I16, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:usage: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Usage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.usage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:usage: ", p), err) }
  return err
}

func (p *TExecuteDf) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "mountedOn", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:mountedOn: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MountedOn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.mountedOn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:mountedOn: ", p), err) }
  return err
}

func (p *TExecuteDf) Equals(other *TExecuteDf) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.FileSystem != other.FileSystem { return false }
  if p.Size != other.Size { return false }
  if p.Used != other.Used { return false }
  if p.Avail != other.Avail { return false }
  if p.Usage != other.Usage { return false }
  if p.MountedOn != other.MountedOn { return false }
  return true
}

func (p *TExecuteDf) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteDf(%+v)", *p)
}

func (p *TExecuteDf) Validate() error {
  return nil
}
// Attributes:
//  - TExecuteIostatCpu
//  - TExecuteIostatDevices
type TExecuteIostat struct {
  TExecuteIostatCpu *TExecuteIostatCpu `thrift:"tExecuteIostatCpu,1" db:"tExecuteIostatCpu" json:"tExecuteIostatCpu"`
  TExecuteIostatDevices []*TExecuteIostatDevice `thrift:"tExecuteIostatDevices,2" db:"tExecuteIostatDevices" json:"tExecuteIostatDevices"`
}

func NewTExecuteIostat() *TExecuteIostat {
  return &TExecuteIostat{}
}

var TExecuteIostat_TExecuteIostatCpu_DEFAULT *TExecuteIostatCpu
func (p *TExecuteIostat) GetTExecuteIostatCpu() *TExecuteIostatCpu {
  if !p.IsSetTExecuteIostatCpu() {
    return TExecuteIostat_TExecuteIostatCpu_DEFAULT
  }
return p.TExecuteIostatCpu
}

func (p *TExecuteIostat) GetTExecuteIostatDevices() []*TExecuteIostatDevice {
  return p.TExecuteIostatDevices
}
func (p *TExecuteIostat) IsSetTExecuteIostatCpu() bool {
  return p.TExecuteIostatCpu != nil
}

func (p *TExecuteIostat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteIostat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.TExecuteIostatCpu = &TExecuteIostatCpu{}
  if err := p.TExecuteIostatCpu.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.TExecuteIostatCpu), err)
  }
  return nil
}

func (p *TExecuteIostat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TExecuteIostatDevice, 0, size)
  p.TExecuteIostatDevices =  tSlice
  for i := 0; i < size; i ++ {
    _elem8 := &TExecuteIostatDevice{}
    if err := _elem8.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem8), err)
    }
    p.TExecuteIostatDevices = append(p.TExecuteIostatDevices, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TExecuteIostat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteIostat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteIostat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tExecuteIostatCpu", thrift.STRUCT, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:tExecuteIostatCpu: ", p), err) }
  if err := p.TExecuteIostatCpu.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.TExecuteIostatCpu), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:tExecuteIostatCpu: ", p), err) }
  return err
}

func (p *TExecuteIostat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tExecuteIostatDevices", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tExecuteIostatDevices: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.TExecuteIostatDevices)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.TExecuteIostatDevices {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tExecuteIostatDevices: ", p), err) }
  return err
}

func (p *TExecuteIostat) Equals(other *TExecuteIostat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.TExecuteIostatCpu.Equals(other.TExecuteIostatCpu) { return false }
  if len(p.TExecuteIostatDevices) != len(other.TExecuteIostatDevices) { return false }
  for i, _tgt := range p.TExecuteIostatDevices {
    _src9 := other.TExecuteIostatDevices[i]
    if !_tgt.Equals(_src9) { return false }
  }
  return true
}

func (p *TExecuteIostat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteIostat(%+v)", *p)
}

func (p *TExecuteIostat) Validate() error {
  return nil
}
// Attributes:
//  - UserUsage
//  - NiceUsage
//  - SystemUsage
//  - IowaitUsage
//  - StealUsage
//  - IdleUsage
type TExecuteIostatCpu struct {
  UserUsage string `thrift:"userUsage,1" db:"userUsage" json:"userUsage"`
  NiceUsage string `thrift:"niceUsage,2" db:"niceUsage" json:"niceUsage"`
  SystemUsage string `thrift:"systemUsage,3" db:"systemUsage" json:"systemUsage"`
  IowaitUsage string `thrift:"iowaitUsage,4" db:"iowaitUsage" json:"iowaitUsage"`
  StealUsage string `thrift:"stealUsage,5" db:"stealUsage" json:"stealUsage"`
  IdleUsage string `thrift:"idleUsage,6" db:"idleUsage" json:"idleUsage"`
}

func NewTExecuteIostatCpu() *TExecuteIostatCpu {
  return &TExecuteIostatCpu{}
}


func (p *TExecuteIostatCpu) GetUserUsage() string {
  return p.UserUsage
}

func (p *TExecuteIostatCpu) GetNiceUsage() string {
  return p.NiceUsage
}

func (p *TExecuteIostatCpu) GetSystemUsage() string {
  return p.SystemUsage
}

func (p *TExecuteIostatCpu) GetIowaitUsage() string {
  return p.IowaitUsage
}

func (p *TExecuteIostatCpu) GetStealUsage() string {
  return p.StealUsage
}

func (p *TExecuteIostatCpu) GetIdleUsage() string {
  return p.IdleUsage
}
func (p *TExecuteIostatCpu) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteIostatCpu)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.UserUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.NiceUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SystemUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IowaitUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StealUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IdleUsage = v
}
  return nil
}

func (p *TExecuteIostatCpu) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteIostatCpu"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteIostatCpu) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "userUsage", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:userUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.UserUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.userUsage (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:userUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "niceUsage", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:niceUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.NiceUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.niceUsage (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:niceUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "systemUsage", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:systemUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SystemUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.systemUsage (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:systemUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "iowaitUsage", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:iowaitUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IowaitUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.iowaitUsage (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:iowaitUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stealUsage", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stealUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StealUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stealUsage (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stealUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "idleUsage", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:idleUsage: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.IdleUsage)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.idleUsage (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:idleUsage: ", p), err) }
  return err
}

func (p *TExecuteIostatCpu) Equals(other *TExecuteIostatCpu) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.UserUsage != other.UserUsage { return false }
  if p.NiceUsage != other.NiceUsage { return false }
  if p.SystemUsage != other.SystemUsage { return false }
  if p.IowaitUsage != other.IowaitUsage { return false }
  if p.StealUsage != other.StealUsage { return false }
  if p.IdleUsage != other.IdleUsage { return false }
  return true
}

func (p *TExecuteIostatCpu) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteIostatCpu(%+v)", *p)
}

func (p *TExecuteIostatCpu) Validate() error {
  return nil
}
// Attributes:
//  - Device
//  - Tps
//  - KBReadPers
//  - KBWrtnPers
//  - KBRead
//  - KBWrtn
type TExecuteIostatDevice struct {
  Device string `thrift:"device,1" db:"device" json:"device"`
  Tps string `thrift:"tps,2" db:"tps" json:"tps"`
  KBReadPers string `thrift:"kB_read_pers,3" db:"kB_read_pers" json:"kB_read_pers"`
  KBWrtnPers string `thrift:"kB_wrtn_pers,4" db:"kB_wrtn_pers" json:"kB_wrtn_pers"`
  KBRead string `thrift:"kB_read,5" db:"kB_read" json:"kB_read"`
  KBWrtn string `thrift:"kB_wrtn,6" db:"kB_wrtn" json:"kB_wrtn"`
}

func NewTExecuteIostatDevice() *TExecuteIostatDevice {
  return &TExecuteIostatDevice{}
}


func (p *TExecuteIostatDevice) GetDevice() string {
  return p.Device
}

func (p *TExecuteIostatDevice) GetTps() string {
  return p.Tps
}

func (p *TExecuteIostatDevice) GetKBReadPers() string {
  return p.KBReadPers
}

func (p *TExecuteIostatDevice) GetKBWrtnPers() string {
  return p.KBWrtnPers
}

func (p *TExecuteIostatDevice) GetKBRead() string {
  return p.KBRead
}

func (p *TExecuteIostatDevice) GetKBWrtn() string {
  return p.KBWrtn
}
func (p *TExecuteIostatDevice) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExecuteIostatDevice)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Device = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Tps = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.KBReadPers = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.KBWrtnPers = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.KBRead = v
}
  return nil
}

func (p *TExecuteIostatDevice)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.KBWrtn = v
}
  return nil
}

func (p *TExecuteIostatDevice) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExecuteIostatDevice"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExecuteIostatDevice) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "device", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:device: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Device)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.device (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:device: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tps", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:tps: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tps)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tps (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:tps: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_read_pers", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:kB_read_pers: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBReadPers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_read_pers (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:kB_read_pers: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_wrtn_pers", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:kB_wrtn_pers: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBWrtnPers)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_wrtn_pers (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:kB_wrtn_pers: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_read", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:kB_read: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBRead)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_read (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:kB_read: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "kB_wrtn", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:kB_wrtn: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.KBWrtn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.kB_wrtn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:kB_wrtn: ", p), err) }
  return err
}

func (p *TExecuteIostatDevice) Equals(other *TExecuteIostatDevice) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Device != other.Device { return false }
  if p.Tps != other.Tps { return false }
  if p.KBReadPers != other.KBReadPers { return false }
  if p.KBWrtnPers != other.KBWrtnPers { return false }
  if p.KBRead != other.KBRead { return false }
  if p.KBWrtn != other.KBWrtn { return false }
  return true
}

func (p *TExecuteIostatDevice) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExecuteIostatDevice(%+v)", *p)
}

func (p *TExecuteIostatDevice) Validate() error {
  return nil
}
// Attributes:
//  - JvmGcNewCount
//  - JvmGcNewTime
//  - JvmPoolCodeCacheUsage
//  - JvmPoolCodeCacheMax
//  - JvmPoolCodeCacheUsed
//  - JvmPoolCodeCacheCommitted
//  - JvmPoolCodeCacheInit
//  - JvmPoolNewGenUsage
//  - JvmPoolNewGenMax
//  - JvmPoolNewGenUsed
//  - JvmPoolNewGenCommitted
//  - JvmPoolNewGenInit
//  - JvmPoolOldGenUsage
//  - JvmPoolOldGenMax
//  - JvmPoolOldGenUsed
//  - JvmPoolOldGenCommitted
//  - JvmPoolOldGenInit
//  - JvmPoolSurvivorSpaceUsage
//  - JvmPoolSurvivorSpaceMax
//  - JvmPoolSurvivorSpaceUsed
//  - JvmPoolSurvivorSpaceCommitted
//  - JvmPoolSurvivorSpaceInit
//  - JvmPoolPermGenUsage
//  - JvmPoolPermGenMax
//  - JvmPoolPermGenUsed
//  - JvmPoolPermGenCommitted
//  - JvmPoolPermGenInit
//  - JvmPoolMetaspaceUsage
//  - JvmPoolMetaspaceMax
//  - JvmPoolMetaspaceUsed
//  - JvmPoolMetaspaceCommitted
//  - JvmPoolMetaspaceInit
type TJvmGcDetailed struct {
  JvmGcNewCount *int64 `thrift:"jvmGcNewCount,1" db:"jvmGcNewCount" json:"jvmGcNewCount,omitempty"`
  JvmGcNewTime *int64 `thrift:"jvmGcNewTime,2" db:"jvmGcNewTime" json:"jvmGcNewTime,omitempty"`
  JvmPoolCodeCacheUsage *float64 `thrift:"jvmPoolCodeCacheUsage,3" db:"jvmPoolCodeCacheUsage" json:"jvmPoolCodeCacheUsage,omitempty"`
  JvmPoolCodeCacheMax *int64 `thrift:"jvmPoolCodeCacheMax,4" db:"jvmPoolCodeCacheMax" json:"jvmPoolCodeCacheMax,omitempty"`
  JvmPoolCodeCacheUsed *int64 `thrift:"jvmPoolCodeCacheUsed,5" db:"jvmPoolCodeCacheUsed" json:"jvmPoolCodeCacheUsed,omitempty"`
  JvmPoolCodeCacheCommitted *int64 `thrift:"jvmPoolCodeCacheCommitted,6" db:"jvmPoolCodeCacheCommitted" json:"jvmPoolCodeCacheCommitted,omitempty"`
  JvmPoolCodeCacheInit *int64 `thrift:"jvmPoolCodeCacheInit,7" db:"jvmPoolCodeCacheInit" json:"jvmPoolCodeCacheInit,omitempty"`
  JvmPoolNewGenUsage *float64 `thrift:"jvmPoolNewGenUsage,8" db:"jvmPoolNewGenUsage" json:"jvmPoolNewGenUsage,omitempty"`
  JvmPoolNewGenMax *int64 `thrift:"jvmPoolNewGenMax,9" db:"jvmPoolNewGenMax" json:"jvmPoolNewGenMax,omitempty"`
  JvmPoolNewGenUsed *int64 `thrift:"jvmPoolNewGenUsed,10" db:"jvmPoolNewGenUsed" json:"jvmPoolNewGenUsed,omitempty"`
  JvmPoolNewGenCommitted *int64 `thrift:"jvmPoolNewGenCommitted,11" db:"jvmPoolNewGenCommitted" json:"jvmPoolNewGenCommitted,omitempty"`
  JvmPoolNewGenInit *int64 `thrift:"jvmPoolNewGenInit,12" db:"jvmPoolNewGenInit" json:"jvmPoolNewGenInit,omitempty"`
  JvmPoolOldGenUsage *float64 `thrift:"jvmPoolOldGenUsage,13" db:"jvmPoolOldGenUsage" json:"jvmPoolOldGenUsage,omitempty"`
  JvmPoolOldGenMax *int64 `thrift:"jvmPoolOldGenMax,14" db:"jvmPoolOldGenMax" json:"jvmPoolOldGenMax,omitempty"`
  JvmPoolOldGenUsed *int64 `thrift:"jvmPoolOldGenUsed,15" db:"jvmPoolOldGenUsed" json:"jvmPoolOldGenUsed,omitempty"`
  JvmPoolOldGenCommitted *int64 `thrift:"jvmPoolOldGenCommitted,16" db:"jvmPoolOldGenCommitted" json:"jvmPoolOldGenCommitted,omitempty"`
  JvmPoolOldGenInit *int64 `thrift:"jvmPoolOldGenInit,17" db:"jvmPoolOldGenInit" json:"jvmPoolOldGenInit,omitempty"`
  JvmPoolSurvivorSpaceUsage *float64 `thrift:"jvmPoolSurvivorSpaceUsage,18" db:"jvmPoolSurvivorSpaceUsage" json:"jvmPoolSurvivorSpaceUsage,omitempty"`
  JvmPoolSurvivorSpaceMax *int64 `thrift:"jvmPoolSurvivorSpaceMax,19" db:"jvmPoolSurvivorSpaceMax" json:"jvmPoolSurvivorSpaceMax,omitempty"`
  JvmPoolSurvivorSpaceUsed *int64 `thrift:"jvmPoolSurvivorSpaceUsed,20" db:"jvmPoolSurvivorSpaceUsed" json:"jvmPoolSurvivorSpaceUsed,omitempty"`
  JvmPoolSurvivorSpaceCommitted *int64 `thrift:"jvmPoolSurvivorSpaceCommitted,21" db:"jvmPoolSurvivorSpaceCommitted" json:"jvmPoolSurvivorSpaceCommitted,omitempty"`
  JvmPoolSurvivorSpaceInit *int64 `thrift:"jvmPoolSurvivorSpaceInit,22" db:"jvmPoolSurvivorSpaceInit" json:"jvmPoolSurvivorSpaceInit,omitempty"`
  JvmPoolPermGenUsage *float64 `thrift:"jvmPoolPermGenUsage,23" db:"jvmPoolPermGenUsage" json:"jvmPoolPermGenUsage,omitempty"`
  JvmPoolPermGenMax *int64 `thrift:"jvmPoolPermGenMax,24" db:"jvmPoolPermGenMax" json:"jvmPoolPermGenMax,omitempty"`
  JvmPoolPermGenUsed *int64 `thrift:"jvmPoolPermGenUsed,25" db:"jvmPoolPermGenUsed" json:"jvmPoolPermGenUsed,omitempty"`
  JvmPoolPermGenCommitted *int64 `thrift:"jvmPoolPermGenCommitted,26" db:"jvmPoolPermGenCommitted" json:"jvmPoolPermGenCommitted,omitempty"`
  JvmPoolPermGenInit *int64 `thrift:"jvmPoolPermGenInit,27" db:"jvmPoolPermGenInit" json:"jvmPoolPermGenInit,omitempty"`
  JvmPoolMetaspaceUsage *float64 `thrift:"jvmPoolMetaspaceUsage,28" db:"jvmPoolMetaspaceUsage" json:"jvmPoolMetaspaceUsage,omitempty"`
  JvmPoolMetaspaceMax *int64 `thrift:"jvmPoolMetaspaceMax,29" db:"jvmPoolMetaspaceMax" json:"jvmPoolMetaspaceMax,omitempty"`
  JvmPoolMetaspaceUsed *int64 `thrift:"jvmPoolMetaspaceUsed,30" db:"jvmPoolMetaspaceUsed" json:"jvmPoolMetaspaceUsed,omitempty"`
  JvmPoolMetaspaceCommitted *int64 `thrift:"jvmPoolMetaspaceCommitted,31" db:"jvmPoolMetaspaceCommitted" json:"jvmPoolMetaspaceCommitted,omitempty"`
  JvmPoolMetaspaceInit *int64 `thrift:"jvmPoolMetaspaceInit,32" db:"jvmPoolMetaspaceInit" json:"jvmPoolMetaspaceInit,omitempty"`
}

func NewTJvmGcDetailed() *TJvmGcDetailed {
  return &TJvmGcDetailed{}
}

var TJvmGcDetailed_JvmGcNewCount_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmGcNewCount() int64 {
  if !p.IsSetJvmGcNewCount() {
    return TJvmGcDetailed_JvmGcNewCount_DEFAULT
  }
return *p.JvmGcNewCount
}
var TJvmGcDetailed_JvmGcNewTime_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmGcNewTime() int64 {
  if !p.IsSetJvmGcNewTime() {
    return TJvmGcDetailed_JvmGcNewTime_DEFAULT
  }
return *p.JvmGcNewTime
}
var TJvmGcDetailed_JvmPoolCodeCacheUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheUsage() float64 {
  if !p.IsSetJvmPoolCodeCacheUsage() {
    return TJvmGcDetailed_JvmPoolCodeCacheUsage_DEFAULT
  }
return *p.JvmPoolCodeCacheUsage
}
var TJvmGcDetailed_JvmPoolCodeCacheMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheMax() int64 {
  if !p.IsSetJvmPoolCodeCacheMax() {
    return TJvmGcDetailed_JvmPoolCodeCacheMax_DEFAULT
  }
return *p.JvmPoolCodeCacheMax
}
var TJvmGcDetailed_JvmPoolCodeCacheUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheUsed() int64 {
  if !p.IsSetJvmPoolCodeCacheUsed() {
    return TJvmGcDetailed_JvmPoolCodeCacheUsed_DEFAULT
  }
return *p.JvmPoolCodeCacheUsed
}
var TJvmGcDetailed_JvmPoolCodeCacheCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheCommitted() int64 {
  if !p.IsSetJvmPoolCodeCacheCommitted() {
    return TJvmGcDetailed_JvmPoolCodeCacheCommitted_DEFAULT
  }
return *p.JvmPoolCodeCacheCommitted
}
var TJvmGcDetailed_JvmPoolCodeCacheInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolCodeCacheInit() int64 {
  if !p.IsSetJvmPoolCodeCacheInit() {
    return TJvmGcDetailed_JvmPoolCodeCacheInit_DEFAULT
  }
return *p.JvmPoolCodeCacheInit
}
var TJvmGcDetailed_JvmPoolNewGenUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolNewGenUsage() float64 {
  if !p.IsSetJvmPoolNewGenUsage() {
    return TJvmGcDetailed_JvmPoolNewGenUsage_DEFAULT
  }
return *p.JvmPoolNewGenUsage
}
var TJvmGcDetailed_JvmPoolNewGenMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenMax() int64 {
  if !p.IsSetJvmPoolNewGenMax() {
    return TJvmGcDetailed_JvmPoolNewGenMax_DEFAULT
  }
return *p.JvmPoolNewGenMax
}
var TJvmGcDetailed_JvmPoolNewGenUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenUsed() int64 {
  if !p.IsSetJvmPoolNewGenUsed() {
    return TJvmGcDetailed_JvmPoolNewGenUsed_DEFAULT
  }
return *p.JvmPoolNewGenUsed
}
var TJvmGcDetailed_JvmPoolNewGenCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenCommitted() int64 {
  if !p.IsSetJvmPoolNewGenCommitted() {
    return TJvmGcDetailed_JvmPoolNewGenCommitted_DEFAULT
  }
return *p.JvmPoolNewGenCommitted
}
var TJvmGcDetailed_JvmPoolNewGenInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolNewGenInit() int64 {
  if !p.IsSetJvmPoolNewGenInit() {
    return TJvmGcDetailed_JvmPoolNewGenInit_DEFAULT
  }
return *p.JvmPoolNewGenInit
}
var TJvmGcDetailed_JvmPoolOldGenUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolOldGenUsage() float64 {
  if !p.IsSetJvmPoolOldGenUsage() {
    return TJvmGcDetailed_JvmPoolOldGenUsage_DEFAULT
  }
return *p.JvmPoolOldGenUsage
}
var TJvmGcDetailed_JvmPoolOldGenMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenMax() int64 {
  if !p.IsSetJvmPoolOldGenMax() {
    return TJvmGcDetailed_JvmPoolOldGenMax_DEFAULT
  }
return *p.JvmPoolOldGenMax
}
var TJvmGcDetailed_JvmPoolOldGenUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenUsed() int64 {
  if !p.IsSetJvmPoolOldGenUsed() {
    return TJvmGcDetailed_JvmPoolOldGenUsed_DEFAULT
  }
return *p.JvmPoolOldGenUsed
}
var TJvmGcDetailed_JvmPoolOldGenCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenCommitted() int64 {
  if !p.IsSetJvmPoolOldGenCommitted() {
    return TJvmGcDetailed_JvmPoolOldGenCommitted_DEFAULT
  }
return *p.JvmPoolOldGenCommitted
}
var TJvmGcDetailed_JvmPoolOldGenInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolOldGenInit() int64 {
  if !p.IsSetJvmPoolOldGenInit() {
    return TJvmGcDetailed_JvmPoolOldGenInit_DEFAULT
  }
return *p.JvmPoolOldGenInit
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceUsage() float64 {
  if !p.IsSetJvmPoolSurvivorSpaceUsage() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceUsage_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceUsage
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceMax() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceMax() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceMax_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceMax
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceUsed() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceUsed() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceUsed_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceUsed
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceCommitted() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceCommitted() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceCommitted_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceCommitted
}
var TJvmGcDetailed_JvmPoolSurvivorSpaceInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolSurvivorSpaceInit() int64 {
  if !p.IsSetJvmPoolSurvivorSpaceInit() {
    return TJvmGcDetailed_JvmPoolSurvivorSpaceInit_DEFAULT
  }
return *p.JvmPoolSurvivorSpaceInit
}
var TJvmGcDetailed_JvmPoolPermGenUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolPermGenUsage() float64 {
  if !p.IsSetJvmPoolPermGenUsage() {
    return TJvmGcDetailed_JvmPoolPermGenUsage_DEFAULT
  }
return *p.JvmPoolPermGenUsage
}
var TJvmGcDetailed_JvmPoolPermGenMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenMax() int64 {
  if !p.IsSetJvmPoolPermGenMax() {
    return TJvmGcDetailed_JvmPoolPermGenMax_DEFAULT
  }
return *p.JvmPoolPermGenMax
}
var TJvmGcDetailed_JvmPoolPermGenUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenUsed() int64 {
  if !p.IsSetJvmPoolPermGenUsed() {
    return TJvmGcDetailed_JvmPoolPermGenUsed_DEFAULT
  }
return *p.JvmPoolPermGenUsed
}
var TJvmGcDetailed_JvmPoolPermGenCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenCommitted() int64 {
  if !p.IsSetJvmPoolPermGenCommitted() {
    return TJvmGcDetailed_JvmPoolPermGenCommitted_DEFAULT
  }
return *p.JvmPoolPermGenCommitted
}
var TJvmGcDetailed_JvmPoolPermGenInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolPermGenInit() int64 {
  if !p.IsSetJvmPoolPermGenInit() {
    return TJvmGcDetailed_JvmPoolPermGenInit_DEFAULT
  }
return *p.JvmPoolPermGenInit
}
var TJvmGcDetailed_JvmPoolMetaspaceUsage_DEFAULT float64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceUsage() float64 {
  if !p.IsSetJvmPoolMetaspaceUsage() {
    return TJvmGcDetailed_JvmPoolMetaspaceUsage_DEFAULT
  }
return *p.JvmPoolMetaspaceUsage
}
var TJvmGcDetailed_JvmPoolMetaspaceMax_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceMax() int64 {
  if !p.IsSetJvmPoolMetaspaceMax() {
    return TJvmGcDetailed_JvmPoolMetaspaceMax_DEFAULT
  }
return *p.JvmPoolMetaspaceMax
}
var TJvmGcDetailed_JvmPoolMetaspaceUsed_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceUsed() int64 {
  if !p.IsSetJvmPoolMetaspaceUsed() {
    return TJvmGcDetailed_JvmPoolMetaspaceUsed_DEFAULT
  }
return *p.JvmPoolMetaspaceUsed
}
var TJvmGcDetailed_JvmPoolMetaspaceCommitted_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceCommitted() int64 {
  if !p.IsSetJvmPoolMetaspaceCommitted() {
    return TJvmGcDetailed_JvmPoolMetaspaceCommitted_DEFAULT
  }
return *p.JvmPoolMetaspaceCommitted
}
var TJvmGcDetailed_JvmPoolMetaspaceInit_DEFAULT int64
func (p *TJvmGcDetailed) GetJvmPoolMetaspaceInit() int64 {
  if !p.IsSetJvmPoolMetaspaceInit() {
    return TJvmGcDetailed_JvmPoolMetaspaceInit_DEFAULT
  }
return *p.JvmPoolMetaspaceInit
}
func (p *TJvmGcDetailed) IsSetJvmGcNewCount() bool {
  return p.JvmGcNewCount != nil
}

func (p *TJvmGcDetailed) IsSetJvmGcNewTime() bool {
  return p.JvmGcNewTime != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheUsage() bool {
  return p.JvmPoolCodeCacheUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheMax() bool {
  return p.JvmPoolCodeCacheMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheUsed() bool {
  return p.JvmPoolCodeCacheUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheCommitted() bool {
  return p.JvmPoolCodeCacheCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolCodeCacheInit() bool {
  return p.JvmPoolCodeCacheInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenUsage() bool {
  return p.JvmPoolNewGenUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenMax() bool {
  return p.JvmPoolNewGenMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenUsed() bool {
  return p.JvmPoolNewGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenCommitted() bool {
  return p.JvmPoolNewGenCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolNewGenInit() bool {
  return p.JvmPoolNewGenInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenUsage() bool {
  return p.JvmPoolOldGenUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenMax() bool {
  return p.JvmPoolOldGenMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenUsed() bool {
  return p.JvmPoolOldGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenCommitted() bool {
  return p.JvmPoolOldGenCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolOldGenInit() bool {
  return p.JvmPoolOldGenInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceUsage() bool {
  return p.JvmPoolSurvivorSpaceUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceMax() bool {
  return p.JvmPoolSurvivorSpaceMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceUsed() bool {
  return p.JvmPoolSurvivorSpaceUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceCommitted() bool {
  return p.JvmPoolSurvivorSpaceCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolSurvivorSpaceInit() bool {
  return p.JvmPoolSurvivorSpaceInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenUsage() bool {
  return p.JvmPoolPermGenUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenMax() bool {
  return p.JvmPoolPermGenMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenUsed() bool {
  return p.JvmPoolPermGenUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenCommitted() bool {
  return p.JvmPoolPermGenCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolPermGenInit() bool {
  return p.JvmPoolPermGenInit != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceUsage() bool {
  return p.JvmPoolMetaspaceUsage != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceMax() bool {
  return p.JvmPoolMetaspaceMax != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceUsed() bool {
  return p.JvmPoolMetaspaceUsed != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceCommitted() bool {
  return p.JvmPoolMetaspaceCommitted != nil
}

func (p *TJvmGcDetailed) IsSetJvmPoolMetaspaceInit() bool {
  return p.JvmPoolMetaspaceInit != nil
}

func (p *TJvmGcDetailed) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 28:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField28(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 29:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField29(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TJvmGcDetailed)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JvmGcNewCount = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.JvmGcNewTime = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.JvmPoolCodeCacheUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.JvmPoolCodeCacheMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.JvmPoolCodeCacheUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.JvmPoolCodeCacheCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.JvmPoolCodeCacheInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.JvmPoolNewGenUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.JvmPoolNewGenMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.JvmPoolNewGenUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.JvmPoolNewGenCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.JvmPoolNewGenInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.JvmPoolOldGenUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.JvmPoolOldGenMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.JvmPoolOldGenUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.JvmPoolOldGenCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.JvmPoolOldGenInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.JvmPoolSurvivorSpaceUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.JvmPoolSurvivorSpaceMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.JvmPoolSurvivorSpaceUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.JvmPoolSurvivorSpaceCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.JvmPoolSurvivorSpaceInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.JvmPoolPermGenUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.JvmPoolPermGenMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.JvmPoolPermGenUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 26: ", err)
} else {
  p.JvmPoolPermGenCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.JvmPoolPermGenInit = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField28(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 28: ", err)
} else {
  p.JvmPoolMetaspaceUsage = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField29(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 29: ", err)
} else {
  p.JvmPoolMetaspaceMax = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.JvmPoolMetaspaceUsed = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.JvmPoolMetaspaceCommitted = &v
}
  return nil
}

func (p *TJvmGcDetailed)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.JvmPoolMetaspaceInit = &v
}
  return nil
}

func (p *TJvmGcDetailed) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TJvmGcDetailed"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField28(ctx, oprot); err != nil { return err }
    if err := p.writeField29(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TJvmGcDetailed) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcNewCount() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcNewCount", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jvmGcNewCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcNewCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcNewCount (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jvmGcNewCount: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmGcNewTime() {
    if err := oprot.WriteFieldBegin(ctx, "jvmGcNewTime", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:jvmGcNewTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmGcNewTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmGcNewTime (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:jvmGcNewTime: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheUsage", thrift.DOUBLE, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:jvmPoolCodeCacheUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolCodeCacheUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheUsage (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:jvmPoolCodeCacheUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheMax", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:jvmPoolCodeCacheMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheMax (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:jvmPoolCodeCacheMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheUsed", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:jvmPoolCodeCacheUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheUsed (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:jvmPoolCodeCacheUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheCommitted", thrift.I64, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:jvmPoolCodeCacheCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheCommitted (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:jvmPoolCodeCacheCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolCodeCacheInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolCodeCacheInit", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:jvmPoolCodeCacheInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolCodeCacheInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolCodeCacheInit (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:jvmPoolCodeCacheInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenUsage", thrift.DOUBLE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:jvmPoolNewGenUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolNewGenUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenUsage (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:jvmPoolNewGenUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenMax", thrift.I64, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:jvmPoolNewGenMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenMax (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:jvmPoolNewGenMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenUsed", thrift.I64, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:jvmPoolNewGenUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenUsed (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:jvmPoolNewGenUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenCommitted", thrift.I64, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:jvmPoolNewGenCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenCommitted (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:jvmPoolNewGenCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolNewGenInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolNewGenInit", thrift.I64, 12); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:jvmPoolNewGenInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolNewGenInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolNewGenInit (12) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 12:jvmPoolNewGenInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenUsage", thrift.DOUBLE, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:jvmPoolOldGenUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolOldGenUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenUsage (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:jvmPoolOldGenUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenMax", thrift.I64, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:jvmPoolOldGenMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenMax (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:jvmPoolOldGenMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenUsed", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:jvmPoolOldGenUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenUsed (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:jvmPoolOldGenUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenCommitted", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:jvmPoolOldGenCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenCommitted (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:jvmPoolOldGenCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolOldGenInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolOldGenInit", thrift.I64, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:jvmPoolOldGenInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolOldGenInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolOldGenInit (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:jvmPoolOldGenInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceUsage", thrift.DOUBLE, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:jvmPoolSurvivorSpaceUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolSurvivorSpaceUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceUsage (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:jvmPoolSurvivorSpaceUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceMax", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:jvmPoolSurvivorSpaceMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceMax (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:jvmPoolSurvivorSpaceMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceUsed", thrift.I64, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:jvmPoolSurvivorSpaceUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceUsed (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:jvmPoolSurvivorSpaceUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceCommitted", thrift.I64, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:jvmPoolSurvivorSpaceCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceCommitted (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:jvmPoolSurvivorSpaceCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolSurvivorSpaceInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolSurvivorSpaceInit", thrift.I64, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:jvmPoolSurvivorSpaceInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolSurvivorSpaceInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolSurvivorSpaceInit (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:jvmPoolSurvivorSpaceInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenUsage", thrift.DOUBLE, 23); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:jvmPoolPermGenUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolPermGenUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenUsage (23) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 23:jvmPoolPermGenUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenMax", thrift.I64, 24); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:jvmPoolPermGenMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenMax (24) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 24:jvmPoolPermGenMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenUsed", thrift.I64, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:jvmPoolPermGenUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenUsed (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:jvmPoolPermGenUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenCommitted", thrift.I64, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:jvmPoolPermGenCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenCommitted (26) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:jvmPoolPermGenCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolPermGenInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolPermGenInit", thrift.I64, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:jvmPoolPermGenInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolPermGenInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolPermGenInit (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:jvmPoolPermGenInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField28(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceUsage() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceUsage", thrift.DOUBLE, 28); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 28:jvmPoolMetaspaceUsage: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.JvmPoolMetaspaceUsage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceUsage (28) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 28:jvmPoolMetaspaceUsage: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField29(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceMax() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceMax", thrift.I64, 29); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 29:jvmPoolMetaspaceMax: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceMax)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceMax (29) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 29:jvmPoolMetaspaceMax: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceUsed() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceUsed", thrift.I64, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:jvmPoolMetaspaceUsed: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceUsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceUsed (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:jvmPoolMetaspaceUsed: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceCommitted() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceCommitted", thrift.I64, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:jvmPoolMetaspaceCommitted: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceCommitted)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceCommitted (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:jvmPoolMetaspaceCommitted: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmPoolMetaspaceInit() {
    if err := oprot.WriteFieldBegin(ctx, "jvmPoolMetaspaceInit", thrift.I64, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:jvmPoolMetaspaceInit: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmPoolMetaspaceInit)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmPoolMetaspaceInit (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:jvmPoolMetaspaceInit: ", p), err) }
  }
  return err
}

func (p *TJvmGcDetailed) Equals(other *TJvmGcDetailed) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JvmGcNewCount != other.JvmGcNewCount {
    if p.JvmGcNewCount == nil || other.JvmGcNewCount == nil {
      return false
    }
    if (*p.JvmGcNewCount) != (*other.JvmGcNewCount) { return false }
  }
  if p.JvmGcNewTime != other.JvmGcNewTime {
    if p.JvmGcNewTime == nil || other.JvmGcNewTime == nil {
      return false
    }
    if (*p.JvmGcNewTime) != (*other.JvmGcNewTime) { return false }
  }
  if p.JvmPoolCodeCacheUsage != other.JvmPoolCodeCacheUsage {
    if p.JvmPoolCodeCacheUsage == nil || other.JvmPoolCodeCacheUsage == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheUsage) != (*other.JvmPoolCodeCacheUsage) { return false }
  }
  if p.JvmPoolCodeCacheMax != other.JvmPoolCodeCacheMax {
    if p.JvmPoolCodeCacheMax == nil || other.JvmPoolCodeCacheMax == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheMax) != (*other.JvmPoolCodeCacheMax) { return false }
  }
  if p.JvmPoolCodeCacheUsed != other.JvmPoolCodeCacheUsed {
    if p.JvmPoolCodeCacheUsed == nil || other.JvmPoolCodeCacheUsed == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheUsed) != (*other.JvmPoolCodeCacheUsed) { return false }
  }
  if p.JvmPoolCodeCacheCommitted != other.JvmPoolCodeCacheCommitted {
    if p.JvmPoolCodeCacheCommitted == nil || other.JvmPoolCodeCacheCommitted == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheCommitted) != (*other.JvmPoolCodeCacheCommitted) { return false }
  }
  if p.JvmPoolCodeCacheInit != other.JvmPoolCodeCacheInit {
    if p.JvmPoolCodeCacheInit == nil || other.JvmPoolCodeCacheInit == nil {
      return false
    }
    if (*p.JvmPoolCodeCacheInit) != (*other.JvmPoolCodeCacheInit) { return false }
  }
  if p.JvmPoolNewGenUsage != other.JvmPoolNewGenUsage {
    if p.JvmPoolNewGenUsage == nil || other.JvmPoolNewGenUsage == nil {
      return false
    }
    if (*p.JvmPoolNewGenUsage) != (*other.JvmPoolNewGenUsage) { return false }
  }
  if p.JvmPoolNewGenMax != other.JvmPoolNewGenMax {
    if p.JvmPoolNewGenMax == nil || other.JvmPoolNewGenMax == nil {
      return false
    }
    if (*p.JvmPoolNewGenMax) != (*other.JvmPoolNewGenMax) { return false }
  }
  if p.JvmPoolNewGenUsed != other.JvmPoolNewGenUsed {
    if p.JvmPoolNewGenUsed == nil || other.JvmPoolNewGenUsed == nil {
      return false
    }
    if (*p.JvmPoolNewGenUsed) != (*other.JvmPoolNewGenUsed) { return false }
  }
  if p.JvmPoolNewGenCommitted != other.JvmPoolNewGenCommitted {
    if p.JvmPoolNewGenCommitted == nil || other.JvmPoolNewGenCommitted == nil {
      return false
    }
    if (*p.JvmPoolNewGenCommitted) != (*other.JvmPoolNewGenCommitted) { return false }
  }
  if p.JvmPoolNewGenInit != other.JvmPoolNewGenInit {
    if p.JvmPoolNewGenInit == nil || other.JvmPoolNewGenInit == nil {
      return false
    }
    if (*p.JvmPoolNewGenInit) != (*other.JvmPoolNewGenInit) { return false }
  }
  if p.JvmPoolOldGenUsage != other.JvmPoolOldGenUsage {
    if p.JvmPoolOldGenUsage == nil || other.JvmPoolOldGenUsage == nil {
      return false
    }
    if (*p.JvmPoolOldGenUsage) != (*other.JvmPoolOldGenUsage) { return false }
  }
  if p.JvmPoolOldGenMax != other.JvmPoolOldGenMax {
    if p.JvmPoolOldGenMax == nil || other.JvmPoolOldGenMax == nil {
      return false
    }
    if (*p.JvmPoolOldGenMax) != (*other.JvmPoolOldGenMax) { return false }
  }
  if p.JvmPoolOldGenUsed != other.JvmPoolOldGenUsed {
    if p.JvmPoolOldGenUsed == nil || other.JvmPoolOldGenUsed == nil {
      return false
    }
    if (*p.JvmPoolOldGenUsed) != (*other.JvmPoolOldGenUsed) { return false }
  }
  if p.JvmPoolOldGenCommitted != other.JvmPoolOldGenCommitted {
    if p.JvmPoolOldGenCommitted == nil || other.JvmPoolOldGenCommitted == nil {
      return false
    }
    if (*p.JvmPoolOldGenCommitted) != (*other.JvmPoolOldGenCommitted) { return false }
  }
  if p.JvmPoolOldGenInit != other.JvmPoolOldGenInit {
    if p.JvmPoolOldGenInit == nil || other.JvmPoolOldGenInit == nil {
      return false
    }
    if (*p.JvmPoolOldGenInit) != (*other.JvmPoolOldGenInit) { return false }
  }
  if p.JvmPoolSurvivorSpaceUsage != other.JvmPoolSurvivorSpaceUsage {
    if p.JvmPoolSurvivorSpaceUsage == nil || other.JvmPoolSurvivorSpaceUsage == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceUsage) != (*other.JvmPoolSurvivorSpaceUsage) { return false }
  }
  if p.JvmPoolSurvivorSpaceMax != other.JvmPoolSurvivorSpaceMax {
    if p.JvmPoolSurvivorSpaceMax == nil || other.JvmPoolSurvivorSpaceMax == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceMax) != (*other.JvmPoolSurvivorSpaceMax) { return false }
  }
  if p.JvmPoolSurvivorSpaceUsed != other.JvmPoolSurvivorSpaceUsed {
    if p.JvmPoolSurvivorSpaceUsed == nil || other.JvmPoolSurvivorSpaceUsed == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceUsed) != (*other.JvmPoolSurvivorSpaceUsed) { return false }
  }
  if p.JvmPoolSurvivorSpaceCommitted != other.JvmPoolSurvivorSpaceCommitted {
    if p.JvmPoolSurvivorSpaceCommitted == nil || other.JvmPoolSurvivorSpaceCommitted == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceCommitted) != (*other.JvmPoolSurvivorSpaceCommitted) { return false }
  }
  if p.JvmPoolSurvivorSpaceInit != other.JvmPoolSurvivorSpaceInit {
    if p.JvmPoolSurvivorSpaceInit == nil || other.JvmPoolSurvivorSpaceInit == nil {
      return false
    }
    if (*p.JvmPoolSurvivorSpaceInit) != (*other.JvmPoolSurvivorSpaceInit) { return false }
  }
  if p.JvmPoolPermGenUsage != other.JvmPoolPermGenUsage {
    if p.JvmPoolPermGenUsage == nil || other.JvmPoolPermGenUsage == nil {
      return false
    }
    if (*p.JvmPoolPermGenUsage) != (*other.JvmPoolPermGenUsage) { return false }
  }
  if p.JvmPoolPermGenMax != other.JvmPoolPermGenMax {
    if p.JvmPoolPermGenMax == nil || other.JvmPoolPermGenMax == nil {
      return false
    }
    if (*p.JvmPoolPermGenMax) != (*other.JvmPoolPermGenMax) { return false }
  }
  if p.JvmPoolPermGenUsed != other.JvmPoolPermGenUsed {
    if p.JvmPoolPermGenUsed == nil || other.JvmPoolPermGenUsed == nil {
      return false
    }
    if (*p.JvmPoolPermGenUsed) != (*other.JvmPoolPermGenUsed) { return false }
  }
  if p.JvmPoolPermGenCommitted != other.JvmPoolPermGenCommitted {
    if p.JvmPoolPermGenCommitted == nil || other.JvmPoolPermGenCommitted == nil {
      return false
    }
    if (*p.JvmPoolPermGenCommitted) != (*other.JvmPoolPermGenCommitted) { return false }
  }
  if p.JvmPoolPermGenInit != other.JvmPoolPermGenInit {
    if p.JvmPoolPermGenInit == nil || other.JvmPoolPermGenInit == nil {
      return false
    }
    if (*p.JvmPoolPermGenInit) != (*other.JvmPoolPermGenInit) { return false }
  }
  if p.JvmPoolMetaspaceUsage != other.JvmPoolMetaspaceUsage {
    if p.JvmPoolMetaspaceUsage == nil || other.JvmPoolMetaspaceUsage == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceUsage) != (*other.JvmPoolMetaspaceUsage) { return false }
  }
  if p.JvmPoolMetaspaceMax != other.JvmPoolMetaspaceMax {
    if p.JvmPoolMetaspaceMax == nil || other.JvmPoolMetaspaceMax == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceMax) != (*other.JvmPoolMetaspaceMax) { return false }
  }
  if p.JvmPoolMetaspaceUsed != other.JvmPoolMetaspaceUsed {
    if p.JvmPoolMetaspaceUsed == nil || other.JvmPoolMetaspaceUsed == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceUsed) != (*other.JvmPoolMetaspaceUsed) { return false }
  }
  if p.JvmPoolMetaspaceCommitted != other.JvmPoolMetaspaceCommitted {
    if p.JvmPoolMetaspaceCommitted == nil || other.JvmPoolMetaspaceCommitted == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceCommitted) != (*other.JvmPoolMetaspaceCommitted) { return false }
  }
  if p.JvmPoolMetaspaceInit != other.JvmPoolMetaspaceInit {
    if p.JvmPoolMetaspaceInit == nil || other.JvmPoolMetaspaceInit == nil {
      return false
    }
    if (*p.JvmPoolMetaspaceInit) != (*other.JvmPoolMetaspaceInit) { return false }
  }
  return true
}

func (p *TJvmGcDetailed) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TJvmGcDetailed(%+v)", *p)
}

func (p *TJvmGcDetailed) Validate() error {
  return nil
}
// Attributes:
//  - JvmCpuLoad
//  - SystemCpuLoad
type TCpuLoad struct {
  JvmCpuLoad *int64 `thrift:"jvmCpuLoad,1" db:"jvmCpuLoad" json:"jvmCpuLoad,omitempty"`
  SystemCpuLoad *int64 `thrift:"systemCpuLoad,2" db:"systemCpuLoad" json:"systemCpuLoad,omitempty"`
}

func NewTCpuLoad() *TCpuLoad {
  return &TCpuLoad{}
}

var TCpuLoad_JvmCpuLoad_DEFAULT int64
func (p *TCpuLoad) GetJvmCpuLoad() int64 {
  if !p.IsSetJvmCpuLoad() {
    return TCpuLoad_JvmCpuLoad_DEFAULT
  }
return *p.JvmCpuLoad
}
var TCpuLoad_SystemCpuLoad_DEFAULT int64
func (p *TCpuLoad) GetSystemCpuLoad() int64 {
  if !p.IsSetSystemCpuLoad() {
    return TCpuLoad_SystemCpuLoad_DEFAULT
  }
return *p.SystemCpuLoad
}
func (p *TCpuLoad) IsSetJvmCpuLoad() bool {
  return p.JvmCpuLoad != nil
}

func (p *TCpuLoad) IsSetSystemCpuLoad() bool {
  return p.SystemCpuLoad != nil
}

func (p *TCpuLoad) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCpuLoad)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.JvmCpuLoad = &v
}
  return nil
}

func (p *TCpuLoad)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SystemCpuLoad = &v
}
  return nil
}

func (p *TCpuLoad) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCpuLoad"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCpuLoad) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetJvmCpuLoad() {
    if err := oprot.WriteFieldBegin(ctx, "jvmCpuLoad", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:jvmCpuLoad: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.JvmCpuLoad)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.jvmCpuLoad (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:jvmCpuLoad: ", p), err) }
  }
  return err
}

func (p *TCpuLoad) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSystemCpuLoad() {
    if err := oprot.WriteFieldBegin(ctx, "systemCpuLoad", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:systemCpuLoad: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SystemCpuLoad)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.systemCpuLoad (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:systemCpuLoad: ", p), err) }
  }
  return err
}

func (p *TCpuLoad) Equals(other *TCpuLoad) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.JvmCpuLoad != other.JvmCpuLoad {
    if p.JvmCpuLoad == nil || other.JvmCpuLoad == nil {
      return false
    }
    if (*p.JvmCpuLoad) != (*other.JvmCpuLoad) { return false }
  }
  if p.SystemCpuLoad != other.SystemCpuLoad {
    if p.SystemCpuLoad == nil || other.SystemCpuLoad == nil {
      return false
    }
    if (*p.SystemCpuLoad) != (*other.SystemCpuLoad) { return false }
  }
  return true
}

func (p *TCpuLoad) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCpuLoad(%+v)", *p)
}

func (p *TCpuLoad) Validate() error {
  return nil
}
// Attributes:
//  - SampledNewCount
//  - SampledContinuationCount
//  - UnsampledNewCount
//  - UnsampledContinuationCount
type TTransaction struct {
  // unused field # 1
  SampledNewCount *int64 `thrift:"sampledNewCount,2" db:"sampledNewCount" json:"sampledNewCount,omitempty"`
  SampledContinuationCount *int64 `thrift:"sampledContinuationCount,3" db:"sampledContinuationCount" json:"sampledContinuationCount,omitempty"`
  UnsampledNewCount *int64 `thrift:"unsampledNewCount,4" db:"unsampledNewCount" json:"unsampledNewCount,omitempty"`
  UnsampledContinuationCount *int64 `thrift:"unsampledContinuationCount,5" db:"unsampledContinuationCount" json:"unsampledContinuationCount,omitempty"`
}

func NewTTransaction() *TTransaction {
  return &TTransaction{}
}

var TTransaction_SampledNewCount_DEFAULT int64
func (p *TTransaction) GetSampledNewCount() int64 {
  if !p.IsSetSampledNewCount() {
    return TTransaction_SampledNewCount_DEFAULT
  }
return *p.SampledNewCount
}
var TTransaction_SampledContinuationCount_DEFAULT int64
func (p *TTransaction) GetSampledContinuationCount() int64 {
  if !p.IsSetSampledContinuationCount() {
    return TTransaction_SampledContinuationCount_DEFAULT
  }
return *p.SampledContinuationCount
}
var TTransaction_UnsampledNewCount_DEFAULT int64
func (p *TTransaction) GetUnsampledNewCount() int64 {
  if !p.IsSetUnsampledNewCount() {
    return TTransaction_UnsampledNewCount_DEFAULT
  }
return *p.UnsampledNewCount
}
var TTransaction_UnsampledContinuationCount_DEFAULT int64
func (p *TTransaction) GetUnsampledContinuationCount() int64 {
  if !p.IsSetUnsampledContinuationCount() {
    return TTransaction_UnsampledContinuationCount_DEFAULT
  }
return *p.UnsampledContinuationCount
}
func (p *TTransaction) IsSetSampledNewCount() bool {
  return p.SampledNewCount != nil
}

func (p *TTransaction) IsSetSampledContinuationCount() bool {
  return p.SampledContinuationCount != nil
}

func (p *TTransaction) IsSetUnsampledNewCount() bool {
  return p.UnsampledNewCount != nil
}

func (p *TTransaction) IsSetUnsampledContinuationCount() bool {
  return p.UnsampledContinuationCount != nil
}

func (p *TTransaction) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TTransaction)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.SampledNewCount = &v
}
  return nil
}

func (p *TTransaction)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.SampledContinuationCount = &v
}
  return nil
}

func (p *TTransaction)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.UnsampledNewCount = &v
}
  return nil
}

func (p *TTransaction)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.UnsampledContinuationCount = &v
}
  return nil
}

func (p *TTransaction) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TTransaction"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TTransaction) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampledNewCount() {
    if err := oprot.WriteFieldBegin(ctx, "sampledNewCount", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:sampledNewCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SampledNewCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampledNewCount (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:sampledNewCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSampledContinuationCount() {
    if err := oprot.WriteFieldBegin(ctx, "sampledContinuationCount", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:sampledContinuationCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SampledContinuationCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sampledContinuationCount (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:sampledContinuationCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUnsampledNewCount() {
    if err := oprot.WriteFieldBegin(ctx, "unsampledNewCount", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:unsampledNewCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.UnsampledNewCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unsampledNewCount (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:unsampledNewCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUnsampledContinuationCount() {
    if err := oprot.WriteFieldBegin(ctx, "unsampledContinuationCount", thrift.I64, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:unsampledContinuationCount: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.UnsampledContinuationCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.unsampledContinuationCount (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:unsampledContinuationCount: ", p), err) }
  }
  return err
}

func (p *TTransaction) Equals(other *TTransaction) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SampledNewCount != other.SampledNewCount {
    if p.SampledNewCount == nil || other.SampledNewCount == nil {
      return false
    }
    if (*p.SampledNewCount) != (*other.SampledNewCount) { return false }
  }
  if p.SampledContinuationCount != other.SampledContinuationCount {
    if p.SampledContinuationCount == nil || other.SampledContinuationCount == nil {
      return false
    }
    if (*p.SampledContinuationCount) != (*other.SampledContinuationCount) { return false }
  }
  if p.UnsampledNewCount != other.UnsampledNewCount {
    if p.UnsampledNewCount == nil || other.UnsampledNewCount == nil {
      return false
    }
    if (*p.UnsampledNewCount) != (*other.UnsampledNewCount) { return false }
  }
  if p.UnsampledContinuationCount != other.UnsampledContinuationCount {
    if p.UnsampledContinuationCount == nil || other.UnsampledContinuationCount == nil {
      return false
    }
    if (*p.UnsampledContinuationCount) != (*other.UnsampledContinuationCount) { return false }
  }
  return true
}

func (p *TTransaction) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TTransaction(%+v)", *p)
}

func (p *TTransaction) Validate() error {
  return nil
}
// Attributes:
//  - Version
//  - HistogramSchemaType
//  - ActiveTraceCount
type TActiveTraceHistogram struct {
  Version int16 `thrift:"version,1" db:"version" json:"version"`
  HistogramSchemaType *int32 `thrift:"histogramSchemaType,2" db:"histogramSchemaType" json:"histogramSchemaType,omitempty"`
  ActiveTraceCount []int32 `thrift:"activeTraceCount,3" db:"activeTraceCount" json:"activeTraceCount,omitempty"`
}

func NewTActiveTraceHistogram() *TActiveTraceHistogram {
  return &TActiveTraceHistogram{}
}


func (p *TActiveTraceHistogram) GetVersion() int16 {
  return p.Version
}
var TActiveTraceHistogram_HistogramSchemaType_DEFAULT int32
func (p *TActiveTraceHistogram) GetHistogramSchemaType() int32 {
  if !p.IsSetHistogramSchemaType() {
    return TActiveTraceHistogram_HistogramSchemaType_DEFAULT
  }
return *p.HistogramSchemaType
}
var TActiveTraceHistogram_ActiveTraceCount_DEFAULT []int32

func (p *TActiveTraceHistogram) GetActiveTraceCount() []int32 {
  return p.ActiveTraceCount
}
func (p *TActiveTraceHistogram) IsSetHistogramSchemaType() bool {
  return p.HistogramSchemaType != nil
}

func (p *TActiveTraceHistogram) IsSetActiveTraceCount() bool {
  return p.ActiveTraceCount != nil
}

func (p *TActiveTraceHistogram) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActiveTraceHistogram)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Version = v
}
  return nil
}

func (p *TActiveTraceHistogram)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.HistogramSchemaType = &v
}
  return nil
}

func (p *TActiveTraceHistogram)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ActiveTraceCount =  tSlice
  for i := 0; i < size; i ++ {
var _elem10 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem10 = v
}
    p.ActiveTraceCount = append(p.ActiveTraceCount, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TActiveTraceHistogram) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TActiveTraceHistogram"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActiveTraceHistogram) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "version", thrift.I16, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:version: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Version)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.version (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:version: ", p), err) }
  return err
}

func (p *TActiveTraceHistogram) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHistogramSchemaType() {
    if err := oprot.WriteFieldBegin(ctx, "histogramSchemaType", thrift.I32, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:histogramSchemaType: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.HistogramSchemaType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.histogramSchemaType (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:histogramSchemaType: ", p), err) }
  }
  return err
}

func (p *TActiveTraceHistogram) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetActiveTraceCount() {
    if err := oprot.WriteFieldBegin(ctx, "activeTraceCount", thrift.LIST, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:activeTraceCount: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.ActiveTraceCount)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ActiveTraceCount {
      if err := oprot.WriteI32(ctx, int32(v)); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:activeTraceCount: ", p), err) }
  }
  return err
}

func (p *TActiveTraceHistogram) Equals(other *TActiveTraceHistogram) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Version != other.Version { return false }
  if p.HistogramSchemaType != other.HistogramSchemaType {
    if p.HistogramSchemaType == nil || other.HistogramSchemaType == nil {
      return false
    }
    if (*p.HistogramSchemaType) != (*other.HistogramSchemaType) { return false }
  }
  if len(p.ActiveTraceCount) != len(other.ActiveTraceCount) { return false }
  for i, _tgt := range p.ActiveTraceCount {
    _src11 := other.ActiveTraceCount[i]
    if _tgt != _src11 { return false }
  }
  return true
}

func (p *TActiveTraceHistogram) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActiveTraceHistogram(%+v)", *p)
}

func (p *TActiveTraceHistogram) Validate() error {
  return nil
}
// Attributes:
//  - Histogram
type TActiveTrace struct {
  Histogram *TActiveTraceHistogram `thrift:"histogram,1" db:"histogram" json:"histogram,omitempty"`
}

func NewTActiveTrace() *TActiveTrace {
  return &TActiveTrace{}
}

var TActiveTrace_Histogram_DEFAULT *TActiveTraceHistogram
func (p *TActiveTrace) GetHistogram() *TActiveTraceHistogram {
  if !p.IsSetHistogram() {
    return TActiveTrace_Histogram_DEFAULT
  }
return p.Histogram
}
func (p *TActiveTrace) IsSetHistogram() bool {
  return p.Histogram != nil
}

func (p *TActiveTrace) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActiveTrace)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  p.Histogram = &TActiveTraceHistogram{}
  if err := p.Histogram.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Histogram), err)
  }
  return nil
}

func (p *TActiveTrace) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TActiveTrace"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActiveTrace) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHistogram() {
    if err := oprot.WriteFieldBegin(ctx, "histogram", thrift.STRUCT, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:histogram: ", p), err) }
    if err := p.Histogram.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Histogram), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:histogram: ", p), err) }
  }
  return err
}

func (p *TActiveTrace) Equals(other *TActiveTrace) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if !p.Histogram.Equals(other.Histogram) { return false }
  return true
}

func (p *TActiveTrace) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActiveTrace(%+v)", *p)
}

func (p *TActiveTrace) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - StartTimestamp
//  - Timestamp
//  - CollectInterval
//  - Gc
//  - CpuLoad
//  - Transaction
//  - ActiveTrace
//  - Metadata
//  - ThreadCount
type TAgentStat struct {
  AgentId *string `thrift:"agentId,1" db:"agentId" json:"agentId,omitempty"`
  StartTimestamp *int64 `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp,omitempty"`
  Timestamp *int64 `thrift:"timestamp,3" db:"timestamp" json:"timestamp,omitempty"`
  CollectInterval *int64 `thrift:"collectInterval,4" db:"collectInterval" json:"collectInterval,omitempty"`
  // unused fields # 5 to 9
  Gc *TJvmGc `thrift:"gc,10" db:"gc" json:"gc,omitempty"`
  // unused fields # 11 to 19
  CpuLoad *TCpuLoad `thrift:"cpuLoad,20" db:"cpuLoad" json:"cpuLoad,omitempty"`
  // unused fields # 21 to 29
  Transaction *TTransaction `thrift:"transaction,30" db:"transaction" json:"transaction,omitempty"`
  // unused fields # 31 to 39
  ActiveTrace *TActiveTrace `thrift:"activeTrace,40" db:"activeTrace" json:"activeTrace,omitempty"`
  // unused fields # 41 to 199
  Metadata *string `thrift:"metadata,200" db:"metadata" json:"metadata,omitempty"`
  // unused fields # 201 to 209
  ThreadCount *int32 `thrift:"threadCount,210" db:"threadCount" json:"threadCount,omitempty"`
}

func NewTAgentStat() *TAgentStat {
  return &TAgentStat{}
}

var TAgentStat_AgentId_DEFAULT string
func (p *TAgentStat) GetAgentId() string {
  if !p.IsSetAgentId() {
    return TAgentStat_AgentId_DEFAULT
  }
return *p.AgentId
}
var TAgentStat_StartTimestamp_DEFAULT int64
func (p *TAgentStat) GetStartTimestamp() int64 {
  if !p.IsSetStartTimestamp() {
    return TAgentStat_StartTimestamp_DEFAULT
  }
return *p.StartTimestamp
}
var TAgentStat_Timestamp_DEFAULT int64
func (p *TAgentStat) GetTimestamp() int64 {
  if !p.IsSetTimestamp() {
    return TAgentStat_Timestamp_DEFAULT
  }
return *p.Timestamp
}
var TAgentStat_CollectInterval_DEFAULT int64
func (p *TAgentStat) GetCollectInterval() int64 {
  if !p.IsSetCollectInterval() {
    return TAgentStat_CollectInterval_DEFAULT
  }
return *p.CollectInterval
}
var TAgentStat_Gc_DEFAULT *TJvmGc
func (p *TAgentStat) GetGc() *TJvmGc {
  if !p.IsSetGc() {
    return TAgentStat_Gc_DEFAULT
  }
return p.Gc
}
var TAgentStat_CpuLoad_DEFAULT *TCpuLoad
func (p *TAgentStat) GetCpuLoad() *TCpuLoad {
  if !p.IsSetCpuLoad() {
    return TAgentStat_CpuLoad_DEFAULT
  }
return p.CpuLoad
}
var TAgentStat_Transaction_DEFAULT *TTransaction
func (p *TAgentStat) GetTransaction() *TTransaction {
  if !p.IsSetTransaction() {
    return TAgentStat_Transaction_DEFAULT
  }
return p.Transaction
}
var TAgentStat_ActiveTrace_DEFAULT *TActiveTrace
func (p *TAgentStat) GetActiveTrace() *TActiveTrace {
  if !p.IsSetActiveTrace() {
    return TAgentStat_ActiveTrace_DEFAULT
  }
return p.ActiveTrace
}
var TAgentStat_Metadata_DEFAULT string
func (p *TAgentStat) GetMetadata() string {
  if !p.IsSetMetadata() {
    return TAgentStat_Metadata_DEFAULT
  }
return *p.Metadata
}
var TAgentStat_ThreadCount_DEFAULT int32
func (p *TAgentStat) GetThreadCount() int32 {
  if !p.IsSetThreadCount() {
    return TAgentStat_ThreadCount_DEFAULT
  }
return *p.ThreadCount
}
func (p *TAgentStat) IsSetAgentId() bool {
  return p.AgentId != nil
}

func (p *TAgentStat) IsSetStartTimestamp() bool {
  return p.StartTimestamp != nil
}

func (p *TAgentStat) IsSetTimestamp() bool {
  return p.Timestamp != nil
}

func (p *TAgentStat) IsSetCollectInterval() bool {
  return p.CollectInterval != nil
}

func (p *TAgentStat) IsSetGc() bool {
  return p.Gc != nil
}

func (p *TAgentStat) IsSetCpuLoad() bool {
  return p.CpuLoad != nil
}

func (p *TAgentStat) IsSetTransaction() bool {
  return p.Transaction != nil
}

func (p *TAgentStat) IsSetActiveTrace() bool {
  return p.ActiveTrace != nil
}

func (p *TAgentStat) IsSetMetadata() bool {
  return p.Metadata != nil
}

func (p *TAgentStat) IsSetThreadCount() bool {
  return p.ThreadCount != nil
}

func (p *TAgentStat) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 200:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField200(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 210:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField210(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = &v
}
  return nil
}

func (p *TAgentStat)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTimestamp = &v
}
  return nil
}

func (p *TAgentStat)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Timestamp = &v
}
  return nil
}

func (p *TAgentStat)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.CollectInterval = &v
}
  return nil
}

func (p *TAgentStat)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.Gc = &TJvmGc{
  Type: 0,
}
  if err := p.Gc.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Gc), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  p.CpuLoad = &TCpuLoad{}
  if err := p.CpuLoad.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.CpuLoad), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  p.Transaction = &TTransaction{}
  if err := p.Transaction.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Transaction), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  p.ActiveTrace = &TActiveTrace{}
  if err := p.ActiveTrace.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ActiveTrace), err)
  }
  return nil
}

func (p *TAgentStat)  ReadField200(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 200: ", err)
} else {
  p.Metadata = &v
}
  return nil
}

func (p *TAgentStat)  ReadField210(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 210: ", err)
} else {
  p.ThreadCount = &v
}
  return nil
}

func (p *TAgentStat) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentStat"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField200(ctx, oprot); err != nil { return err }
    if err := p.writeField210(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentStat) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAgentId() {
    if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AgentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTimestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimestamp() {
    if err := oprot.WriteFieldBegin(ctx, "timestamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timestamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.Timestamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timestamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timestamp: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCollectInterval() {
    if err := oprot.WriteFieldBegin(ctx, "collectInterval", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:collectInterval: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.CollectInterval)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.collectInterval (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:collectInterval: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetGc() {
    if err := oprot.WriteFieldBegin(ctx, "gc", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:gc: ", p), err) }
    if err := p.Gc.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Gc), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:gc: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetCpuLoad() {
    if err := oprot.WriteFieldBegin(ctx, "cpuLoad", thrift.STRUCT, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:cpuLoad: ", p), err) }
    if err := p.CpuLoad.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.CpuLoad), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:cpuLoad: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTransaction() {
    if err := oprot.WriteFieldBegin(ctx, "transaction", thrift.STRUCT, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:transaction: ", p), err) }
    if err := p.Transaction.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Transaction), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:transaction: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetActiveTrace() {
    if err := oprot.WriteFieldBegin(ctx, "activeTrace", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:activeTrace: ", p), err) }
    if err := p.ActiveTrace.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ActiveTrace), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:activeTrace: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField200(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMetadata() {
    if err := oprot.WriteFieldBegin(ctx, "metadata", thrift.STRING, 200); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 200:metadata: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Metadata)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.metadata (200) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 200:metadata: ", p), err) }
  }
  return err
}

func (p *TAgentStat) writeField210(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadCount() {
    if err := oprot.WriteFieldBegin(ctx, "threadCount", thrift.I32, 210); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 210:threadCount: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ThreadCount)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadCount (210) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 210:threadCount: ", p), err) }
  }
  return err
}

func (p *TAgentStat) Equals(other *TAgentStat) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId {
    if p.AgentId == nil || other.AgentId == nil {
      return false
    }
    if (*p.AgentId) != (*other.AgentId) { return false }
  }
  if p.StartTimestamp != other.StartTimestamp {
    if p.StartTimestamp == nil || other.StartTimestamp == nil {
      return false
    }
    if (*p.StartTimestamp) != (*other.StartTimestamp) { return false }
  }
  if p.Timestamp != other.Timestamp {
    if p.Timestamp == nil || other.Timestamp == nil {
      return false
    }
    if (*p.Timestamp) != (*other.Timestamp) { return false }
  }
  if p.CollectInterval != other.CollectInterval {
    if p.CollectInterval == nil || other.CollectInterval == nil {
      return false
    }
    if (*p.CollectInterval) != (*other.CollectInterval) { return false }
  }
  if !p.Gc.Equals(other.Gc) { return false }
  if !p.CpuLoad.Equals(other.CpuLoad) { return false }
  if !p.Transaction.Equals(other.Transaction) { return false }
  if !p.ActiveTrace.Equals(other.ActiveTrace) { return false }
  if p.Metadata != other.Metadata {
    if p.Metadata == nil || other.Metadata == nil {
      return false
    }
    if (*p.Metadata) != (*other.Metadata) { return false }
  }
  if p.ThreadCount != other.ThreadCount {
    if p.ThreadCount == nil || other.ThreadCount == nil {
      return false
    }
    if (*p.ThreadCount) != (*other.ThreadCount) { return false }
  }
  return true
}

func (p *TAgentStat) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentStat(%+v)", *p)
}

func (p *TAgentStat) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - StartTimestamp
//  - AppKey
//  - AppId
//  - Tenant
//  - AgentStats
//  - ServiceType
type TAgentStatBatch struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  StartTimestamp int64 `thrift:"startTimestamp,2" db:"startTimestamp" json:"startTimestamp"`
  AppKey string `thrift:"appKey,3" db:"appKey" json:"appKey"`
  AppId string `thrift:"appId,4" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,5" db:"tenant" json:"tenant"`
  // unused fields # 6 to 9
  AgentStats []*TAgentStat `thrift:"agentStats,10" db:"agentStats" json:"agentStats"`
  ServiceType *int16 `thrift:"serviceType,11" db:"serviceType" json:"serviceType,omitempty"`
}

func NewTAgentStatBatch() *TAgentStatBatch {
  return &TAgentStatBatch{}
}


func (p *TAgentStatBatch) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentStatBatch) GetStartTimestamp() int64 {
  return p.StartTimestamp
}

func (p *TAgentStatBatch) GetAppKey() string {
  return p.AppKey
}

func (p *TAgentStatBatch) GetAppId() string {
  return p.AppId
}

func (p *TAgentStatBatch) GetTenant() string {
  return p.Tenant
}

func (p *TAgentStatBatch) GetAgentStats() []*TAgentStat {
  return p.AgentStats
}
var TAgentStatBatch_ServiceType_DEFAULT int16
func (p *TAgentStatBatch) GetServiceType() int16 {
  if !p.IsSetServiceType() {
    return TAgentStatBatch_ServiceType_DEFAULT
  }
return *p.ServiceType
}
func (p *TAgentStatBatch) IsSetServiceType() bool {
  return p.ServiceType != nil
}

func (p *TAgentStatBatch) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentStatBatch)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentStatBatch)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAgentStat, 0, size)
  p.AgentStats =  tSlice
  for i := 0; i < size; i ++ {
    _elem12 := &TAgentStat{}
    if err := _elem12.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem12), err)
    }
    p.AgentStats = append(p.AgentStats, _elem12)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAgentStatBatch)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ServiceType = &v
}
  return nil
}

func (p *TAgentStatBatch) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentStatBatch"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentStatBatch) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:startTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:startTimestamp: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appKey", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKey (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appKey: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appId: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tenant: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStats", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:agentStats: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.AgentStats)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.AgentStats {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:agentStats: ", p), err) }
  return err
}

func (p *TAgentStatBatch) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:serviceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceType (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:serviceType: ", p), err) }
  }
  return err
}

func (p *TAgentStatBatch) Equals(other *TAgentStatBatch) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.StartTimestamp != other.StartTimestamp { return false }
  if p.AppKey != other.AppKey { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if len(p.AgentStats) != len(other.AgentStats) { return false }
  for i, _tgt := range p.AgentStats {
    _src13 := other.AgentStats[i]
    if !_tgt.Equals(_src13) { return false }
  }
  if p.ServiceType != other.ServiceType {
    if p.ServiceType == nil || other.ServiceType == nil {
      return false
    }
    if (*p.ServiceType) != (*other.ServiceType) { return false }
  }
  return true
}

func (p *TAgentStatBatch) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentStatBatch(%+v)", *p)
}

func (p *TAgentStatBatch) Validate() error {
  return nil
}
// Attributes:
//  - Appkey
//  - AppId
//  - Tenant
//  - AgentId
//  - StartTimestamp
//  - EventTimestamp
//  - Status
//  - Duration
//  - ServiceType
type TAgentLifeCycle struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  AppId string `thrift:"appId,2" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,3" db:"tenant" json:"tenant"`
  // unused field # 4
  AgentId string `thrift:"agentId,5" db:"agentId" json:"agentId"`
  StartTimestamp int64 `thrift:"startTimestamp,6" db:"startTimestamp" json:"startTimestamp"`
  EventTimestamp int64 `thrift:"eventTimestamp,7" db:"eventTimestamp" json:"eventTimestamp"`
  Status string `thrift:"status,8" db:"status" json:"status"`
  Duration int32 `thrift:"duration,9" db:"duration" json:"duration"`
  ServiceType *int16 `thrift:"serviceType,10" db:"serviceType" json:"serviceType,omitempty"`
}

func NewTAgentLifeCycle() *TAgentLifeCycle {
  return &TAgentLifeCycle{}
}


func (p *TAgentLifeCycle) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentLifeCycle) GetAppId() string {
  return p.AppId
}

func (p *TAgentLifeCycle) GetTenant() string {
  return p.Tenant
}

func (p *TAgentLifeCycle) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentLifeCycle) GetStartTimestamp() int64 {
  return p.StartTimestamp
}

func (p *TAgentLifeCycle) GetEventTimestamp() int64 {
  return p.EventTimestamp
}

func (p *TAgentLifeCycle) GetStatus() string {
  return p.Status
}

func (p *TAgentLifeCycle) GetDuration() int32 {
  return p.Duration
}
var TAgentLifeCycle_ServiceType_DEFAULT int16
func (p *TAgentLifeCycle) GetServiceType() int16 {
  if !p.IsSetServiceType() {
    return TAgentLifeCycle_ServiceType_DEFAULT
  }
return *p.ServiceType
}
func (p *TAgentLifeCycle) IsSetServiceType() bool {
  return p.ServiceType != nil
}

func (p *TAgentLifeCycle) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentLifeCycle)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.StartTimestamp = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.EventTimestamp = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.Duration = v
}
  return nil
}

func (p *TAgentLifeCycle)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.ServiceType = &v
}
  return nil
}

func (p *TAgentLifeCycle) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentLifeCycle"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentLifeCycle) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appId: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:tenant: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentId: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTimestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:startTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTimestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:startTimestamp: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventTimestamp", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:eventTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EventTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventTimestamp (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:eventTimestamp: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:status: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:status: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "duration", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:duration: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Duration)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.duration (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:duration: ", p), err) }
  return err
}

func (p *TAgentLifeCycle) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.serviceType (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceType: ", p), err) }
  }
  return err
}

func (p *TAgentLifeCycle) Equals(other *TAgentLifeCycle) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Appkey != other.Appkey { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.AgentId != other.AgentId { return false }
  if p.StartTimestamp != other.StartTimestamp { return false }
  if p.EventTimestamp != other.EventTimestamp { return false }
  if p.Status != other.Status { return false }
  if p.Duration != other.Duration { return false }
  if p.ServiceType != other.ServiceType {
    if p.ServiceType == nil || other.ServiceType == nil {
      return false
    }
    if (*p.ServiceType) != (*other.ServiceType) { return false }
  }
  return true
}

func (p *TAgentLifeCycle) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentLifeCycle(%+v)", *p)
}

func (p *TAgentLifeCycle) Validate() error {
  return nil
}
// Attributes:
//  - Code
//  - Desc
type TAgentEventType struct {
  Code int32 `thrift:"code,1" db:"code" json:"code"`
  Desc string `thrift:"desc,2" db:"desc" json:"desc"`
}

func NewTAgentEventType() *TAgentEventType {
  return &TAgentEventType{}
}


func (p *TAgentEventType) GetCode() int32 {
  return p.Code
}

func (p *TAgentEventType) GetDesc() string {
  return p.Desc
}
func (p *TAgentEventType) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentEventType)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TAgentEventType)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *TAgentEventType) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentEventType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentEventType) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:code: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:code: ", p), err) }
  return err
}

func (p *TAgentEventType) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "desc", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:desc: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:desc: ", p), err) }
  return err
}

func (p *TAgentEventType) Equals(other *TAgentEventType) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Code != other.Code { return false }
  if p.Desc != other.Desc { return false }
  return true
}

func (p *TAgentEventType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentEventType(%+v)", *p)
}

func (p *TAgentEventType) Validate() error {
  return nil
}
// Attributes:
//  - Appkey
//  - AgentId
//  - EventTimestamp
//  - EventType
//  - EventMessage
type TAgentEvent struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  // unused fields # 2 to 4
  AgentId string `thrift:"agentId,5" db:"agentId" json:"agentId"`
  EventTimestamp int64 `thrift:"eventTimestamp,6" db:"eventTimestamp" json:"eventTimestamp"`
  EventType *TAgentEventType `thrift:"eventType,7" db:"eventType" json:"eventType"`
  EventMessage *string `thrift:"eventMessage,8" db:"eventMessage" json:"eventMessage,omitempty"`
}

func NewTAgentEvent() *TAgentEvent {
  return &TAgentEvent{}
}


func (p *TAgentEvent) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentEvent) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentEvent) GetEventTimestamp() int64 {
  return p.EventTimestamp
}
var TAgentEvent_EventType_DEFAULT *TAgentEventType
func (p *TAgentEvent) GetEventType() *TAgentEventType {
  if !p.IsSetEventType() {
    return TAgentEvent_EventType_DEFAULT
  }
return p.EventType
}
var TAgentEvent_EventMessage_DEFAULT string
func (p *TAgentEvent) GetEventMessage() string {
  if !p.IsSetEventMessage() {
    return TAgentEvent_EventMessage_DEFAULT
  }
return *p.EventMessage
}
func (p *TAgentEvent) IsSetEventType() bool {
  return p.EventType != nil
}

func (p *TAgentEvent) IsSetEventMessage() bool {
  return p.EventMessage != nil
}

func (p *TAgentEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentEvent)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentEvent)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentEvent)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.EventTimestamp = v
}
  return nil
}

func (p *TAgentEvent)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  p.EventType = &TAgentEventType{}
  if err := p.EventType.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.EventType), err)
  }
  return nil
}

func (p *TAgentEvent)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.EventMessage = &v
}
  return nil
}

func (p *TAgentEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentEvent) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentId: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventTimestamp", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:eventTimestamp: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.EventTimestamp)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.eventTimestamp (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:eventTimestamp: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "eventType", thrift.STRUCT, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:eventType: ", p), err) }
  if err := p.EventType.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.EventType), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:eventType: ", p), err) }
  return err
}

func (p *TAgentEvent) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEventMessage() {
    if err := oprot.WriteFieldBegin(ctx, "eventMessage", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:eventMessage: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EventMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.eventMessage (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:eventMessage: ", p), err) }
  }
  return err
}

func (p *TAgentEvent) Equals(other *TAgentEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Appkey != other.Appkey { return false }
  if p.AgentId != other.AgentId { return false }
  if p.EventTimestamp != other.EventTimestamp { return false }
  if !p.EventType.Equals(other.EventType) { return false }
  if p.EventMessage != other.EventMessage {
    if p.EventMessage == nil || other.EventMessage == nil {
      return false
    }
    if (*p.EventMessage) != (*other.EventMessage) { return false }
  }
  return true
}

func (p *TAgentEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentEvent(%+v)", *p)
}

func (p *TAgentEvent) Validate() error {
  return nil
}
// Attributes:
//  - StackDepth
//  - StackTraceElement
//  - ClassName
//  - IdentityHashCode
type LockedMonitorInfo struct {
  StackDepth int32 `thrift:"stackDepth,1" db:"stackDepth" json:"stackDepth"`
  StackTraceElement string `thrift:"stackTraceElement,2" db:"stackTraceElement" json:"stackTraceElement"`
  ClassName string `thrift:"className,3" db:"className" json:"className"`
  IdentityHashCode int32 `thrift:"identityHashCode,4" db:"identityHashCode" json:"identityHashCode"`
}

func NewLockedMonitorInfo() *LockedMonitorInfo {
  return &LockedMonitorInfo{}
}


func (p *LockedMonitorInfo) GetStackDepth() int32 {
  return p.StackDepth
}

func (p *LockedMonitorInfo) GetStackTraceElement() string {
  return p.StackTraceElement
}

func (p *LockedMonitorInfo) GetClassName() string {
  return p.ClassName
}

func (p *LockedMonitorInfo) GetIdentityHashCode() int32 {
  return p.IdentityHashCode
}
func (p *LockedMonitorInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *LockedMonitorInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StackDepth = v
}
  return nil
}

func (p *LockedMonitorInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StackTraceElement = v
}
  return nil
}

func (p *LockedMonitorInfo)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.ClassName = v
}
  return nil
}

func (p *LockedMonitorInfo)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IdentityHashCode = v
}
  return nil
}

func (p *LockedMonitorInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "LockedMonitorInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *LockedMonitorInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stackDepth", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stackDepth: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StackDepth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stackDepth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stackDepth: ", p), err) }
  return err
}

func (p *LockedMonitorInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stackTraceElement", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stackTraceElement: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StackTraceElement)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stackTraceElement (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stackTraceElement: ", p), err) }
  return err
}

func (p *LockedMonitorInfo) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "className", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:className: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ClassName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.className (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:className: ", p), err) }
  return err
}

func (p *LockedMonitorInfo) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "identityHashCode", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:identityHashCode: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IdentityHashCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.identityHashCode (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:identityHashCode: ", p), err) }
  return err
}

func (p *LockedMonitorInfo) Equals(other *LockedMonitorInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StackDepth != other.StackDepth { return false }
  if p.StackTraceElement != other.StackTraceElement { return false }
  if p.ClassName != other.ClassName { return false }
  if p.IdentityHashCode != other.IdentityHashCode { return false }
  return true
}

func (p *LockedMonitorInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("LockedMonitorInfo(%+v)", *p)
}

func (p *LockedMonitorInfo) Validate() error {
  return nil
}
// Attributes:
//  - ClassName
//  - MethodName
//  - FileName
//  - LineNumber
type ThreadDetailStackTraceElement struct {
  ClassName string `thrift:"className,1" db:"className" json:"className"`
  MethodName string `thrift:"methodName,2" db:"methodName" json:"methodName"`
  FileName string `thrift:"fileName,3" db:"fileName" json:"fileName"`
  LineNumber int32 `thrift:"lineNumber,4" db:"lineNumber" json:"lineNumber"`
}

func NewThreadDetailStackTraceElement() *ThreadDetailStackTraceElement {
  return &ThreadDetailStackTraceElement{}
}


func (p *ThreadDetailStackTraceElement) GetClassName() string {
  return p.ClassName
}

func (p *ThreadDetailStackTraceElement) GetMethodName() string {
  return p.MethodName
}

func (p *ThreadDetailStackTraceElement) GetFileName() string {
  return p.FileName
}

func (p *ThreadDetailStackTraceElement) GetLineNumber() int32 {
  return p.LineNumber
}
func (p *ThreadDetailStackTraceElement) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *ThreadDetailStackTraceElement)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ClassName = v
}
  return nil
}

func (p *ThreadDetailStackTraceElement)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.MethodName = v
}
  return nil
}

func (p *ThreadDetailStackTraceElement)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.FileName = v
}
  return nil
}

func (p *ThreadDetailStackTraceElement)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LineNumber = v
}
  return nil
}

func (p *ThreadDetailStackTraceElement) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "ThreadDetailStackTraceElement"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *ThreadDetailStackTraceElement) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "className", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:className: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ClassName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.className (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:className: ", p), err) }
  return err
}

func (p *ThreadDetailStackTraceElement) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "methodName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:methodName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.MethodName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.methodName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:methodName: ", p), err) }
  return err
}

func (p *ThreadDetailStackTraceElement) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "fileName", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:fileName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.FileName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.fileName (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:fileName: ", p), err) }
  return err
}

func (p *ThreadDetailStackTraceElement) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lineNumber", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:lineNumber: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.LineNumber)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lineNumber (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:lineNumber: ", p), err) }
  return err
}

func (p *ThreadDetailStackTraceElement) Equals(other *ThreadDetailStackTraceElement) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ClassName != other.ClassName { return false }
  if p.MethodName != other.MethodName { return false }
  if p.FileName != other.FileName { return false }
  if p.LineNumber != other.LineNumber { return false }
  return true
}

func (p *ThreadDetailStackTraceElement) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("ThreadDetailStackTraceElement(%+v)", *p)
}

func (p *ThreadDetailStackTraceElement) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Group
//  - CpuTime
//  - State
//  - OwnedMonitors
//  - WaitOn
//  - Priority
//  - ThreadId
//  - StackTraceElements
type TAgentThreadDetail struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Group string `thrift:"group,2" db:"group" json:"group"`
  CpuTime int64 `thrift:"cpuTime,3" db:"cpuTime" json:"cpuTime"`
  State string `thrift:"state,4" db:"state" json:"state"`
  OwnedMonitors []*LockedMonitorInfo `thrift:"ownedMonitors,5" db:"ownedMonitors" json:"ownedMonitors,omitempty"`
  WaitOn string `thrift:"waitOn,6" db:"waitOn" json:"waitOn"`
  Priority int32 `thrift:"priority,7" db:"priority" json:"priority"`
  ThreadId int64 `thrift:"threadId,8" db:"threadId" json:"threadId"`
  StackTraceElements []*ThreadDetailStackTraceElement `thrift:"stackTraceElements,9" db:"stackTraceElements" json:"stackTraceElements,omitempty"`
}

func NewTAgentThreadDetail() *TAgentThreadDetail {
  return &TAgentThreadDetail{}
}


func (p *TAgentThreadDetail) GetName() string {
  return p.Name
}

func (p *TAgentThreadDetail) GetGroup() string {
  return p.Group
}

func (p *TAgentThreadDetail) GetCpuTime() int64 {
  return p.CpuTime
}

func (p *TAgentThreadDetail) GetState() string {
  return p.State
}
var TAgentThreadDetail_OwnedMonitors_DEFAULT []*LockedMonitorInfo

func (p *TAgentThreadDetail) GetOwnedMonitors() []*LockedMonitorInfo {
  return p.OwnedMonitors
}

func (p *TAgentThreadDetail) GetWaitOn() string {
  return p.WaitOn
}

func (p *TAgentThreadDetail) GetPriority() int32 {
  return p.Priority
}

func (p *TAgentThreadDetail) GetThreadId() int64 {
  return p.ThreadId
}
var TAgentThreadDetail_StackTraceElements_DEFAULT []*ThreadDetailStackTraceElement

func (p *TAgentThreadDetail) GetStackTraceElements() []*ThreadDetailStackTraceElement {
  return p.StackTraceElements
}
func (p *TAgentThreadDetail) IsSetOwnedMonitors() bool {
  return p.OwnedMonitors != nil
}

func (p *TAgentThreadDetail) IsSetStackTraceElements() bool {
  return p.StackTraceElements != nil
}

func (p *TAgentThreadDetail) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentThreadDetail)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Group = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.CpuTime = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.State = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*LockedMonitorInfo, 0, size)
  p.OwnedMonitors =  tSlice
  for i := 0; i < size; i ++ {
    _elem14 := &LockedMonitorInfo{}
    if err := _elem14.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem14), err)
    }
    p.OwnedMonitors = append(p.OwnedMonitors, _elem14)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAgentThreadDetail)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WaitOn = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Priority = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TAgentThreadDetail)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*ThreadDetailStackTraceElement, 0, size)
  p.StackTraceElements =  tSlice
  for i := 0; i < size; i ++ {
    _elem15 := &ThreadDetailStackTraceElement{}
    if err := _elem15.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem15), err)
    }
    p.StackTraceElements = append(p.StackTraceElements, _elem15)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAgentThreadDetail) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentThreadDetail"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentThreadDetail) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "group", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:group: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Group)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.group (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:group: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "cpuTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:cpuTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.CpuTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.cpuTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:cpuTime: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "state", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:state: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.State)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.state (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:state: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOwnedMonitors() {
    if err := oprot.WriteFieldBegin(ctx, "ownedMonitors", thrift.LIST, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:ownedMonitors: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.OwnedMonitors)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.OwnedMonitors {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:ownedMonitors: ", p), err) }
  }
  return err
}

func (p *TAgentThreadDetail) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "waitOn", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:waitOn: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.WaitOn)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.waitOn (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:waitOn: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "priority", thrift.I32, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:priority: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Priority)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.priority (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:priority: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:threadId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:threadId: ", p), err) }
  return err
}

func (p *TAgentThreadDetail) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStackTraceElements() {
    if err := oprot.WriteFieldBegin(ctx, "stackTraceElements", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:stackTraceElements: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.StackTraceElements)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.StackTraceElements {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:stackTraceElements: ", p), err) }
  }
  return err
}

func (p *TAgentThreadDetail) Equals(other *TAgentThreadDetail) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Group != other.Group { return false }
  if p.CpuTime != other.CpuTime { return false }
  if p.State != other.State { return false }
  if len(p.OwnedMonitors) != len(other.OwnedMonitors) { return false }
  for i, _tgt := range p.OwnedMonitors {
    _src16 := other.OwnedMonitors[i]
    if !_tgt.Equals(_src16) { return false }
  }
  if p.WaitOn != other.WaitOn { return false }
  if p.Priority != other.Priority { return false }
  if p.ThreadId != other.ThreadId { return false }
  if len(p.StackTraceElements) != len(other.StackTraceElements) { return false }
  for i, _tgt := range p.StackTraceElements {
    _src17 := other.StackTraceElements[i]
    if !_tgt.Equals(_src17) { return false }
  }
  return true
}

func (p *TAgentThreadDetail) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentThreadDetail(%+v)", *p)
}

func (p *TAgentThreadDetail) Validate() error {
  return nil
}
// Attributes:
//  - Appkey
//  - ID
//  - ApplicationName
//  - AgentId
//  - Ts
//  - IsDeadLock
//  - DeadLockMessage
//  - ThreadDetail
//  - Analysisid
//  - AppId
//  - Tenant
type TAgentThread struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  ID int64 `thrift:"id,2" db:"id" json:"id"`
  // unused field # 3
  ApplicationName string `thrift:"applicationName,4" db:"applicationName" json:"applicationName"`
  AgentId string `thrift:"agentId,5" db:"agentId" json:"agentId"`
  Ts int64 `thrift:"ts,6" db:"ts" json:"ts"`
  IsDeadLock bool `thrift:"isDeadLock,7" db:"isDeadLock" json:"isDeadLock"`
  DeadLockMessage *string `thrift:"deadLockMessage,8" db:"deadLockMessage" json:"deadLockMessage,omitempty"`
  ThreadDetail []*TAgentThreadDetail `thrift:"threadDetail,9" db:"threadDetail" json:"threadDetail,omitempty"`
  Analysisid int64 `thrift:"analysisid,10" db:"analysisid" json:"analysisid"`
  AppId string `thrift:"appId,11" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,12" db:"tenant" json:"tenant"`
}

func NewTAgentThread() *TAgentThread {
  return &TAgentThread{}
}


func (p *TAgentThread) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentThread) GetID() int64 {
  return p.ID
}

func (p *TAgentThread) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TAgentThread) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentThread) GetTs() int64 {
  return p.Ts
}

func (p *TAgentThread) GetIsDeadLock() bool {
  return p.IsDeadLock
}
var TAgentThread_DeadLockMessage_DEFAULT string
func (p *TAgentThread) GetDeadLockMessage() string {
  if !p.IsSetDeadLockMessage() {
    return TAgentThread_DeadLockMessage_DEFAULT
  }
return *p.DeadLockMessage
}
var TAgentThread_ThreadDetail_DEFAULT []*TAgentThreadDetail

func (p *TAgentThread) GetThreadDetail() []*TAgentThreadDetail {
  return p.ThreadDetail
}

func (p *TAgentThread) GetAnalysisid() int64 {
  return p.Analysisid
}

func (p *TAgentThread) GetAppId() string {
  return p.AppId
}

func (p *TAgentThread) GetTenant() string {
  return p.Tenant
}
func (p *TAgentThread) IsSetDeadLockMessage() bool {
  return p.DeadLockMessage != nil
}

func (p *TAgentThread) IsSetThreadDetail() bool {
  return p.ThreadDetail != nil
}

func (p *TAgentThread) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentThread)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentThread)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TAgentThread)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TAgentThread)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentThread)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Ts = v
}
  return nil
}

func (p *TAgentThread)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsDeadLock = v
}
  return nil
}

func (p *TAgentThread)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.DeadLockMessage = &v
}
  return nil
}

func (p *TAgentThread)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAgentThreadDetail, 0, size)
  p.ThreadDetail =  tSlice
  for i := 0; i < size; i ++ {
    _elem18 := &TAgentThreadDetail{}
    if err := _elem18.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem18), err)
    }
    p.ThreadDetail = append(p.ThreadDetail, _elem18)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAgentThread)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *TAgentThread)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentThread)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentThread) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentThread"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentThread) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *TAgentThread) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TAgentThread) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applicationName: ", p), err) }
  return err
}

func (p *TAgentThread) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentId: ", p), err) }
  return err
}

func (p *TAgentThread) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ts: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ts (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ts: ", p), err) }
  return err
}

func (p *TAgentThread) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isDeadLock", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isDeadLock: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsDeadLock)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isDeadLock (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isDeadLock: ", p), err) }
  return err
}

func (p *TAgentThread) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDeadLockMessage() {
    if err := oprot.WriteFieldBegin(ctx, "deadLockMessage", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:deadLockMessage: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DeadLockMessage)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.deadLockMessage (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:deadLockMessage: ", p), err) }
  }
  return err
}

func (p *TAgentThread) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadDetail() {
    if err := oprot.WriteFieldBegin(ctx, "threadDetail", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:threadDetail: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ThreadDetail)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ThreadDetail {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:threadDetail: ", p), err) }
  }
  return err
}

func (p *TAgentThread) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:analysisid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:analysisid: ", p), err) }
  return err
}

func (p *TAgentThread) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:appId: ", p), err) }
  return err
}

func (p *TAgentThread) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tenant: ", p), err) }
  return err
}

func (p *TAgentThread) Equals(other *TAgentThread) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Appkey != other.Appkey { return false }
  if p.ID != other.ID { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentId != other.AgentId { return false }
  if p.Ts != other.Ts { return false }
  if p.IsDeadLock != other.IsDeadLock { return false }
  if p.DeadLockMessage != other.DeadLockMessage {
    if p.DeadLockMessage == nil || other.DeadLockMessage == nil {
      return false
    }
    if (*p.DeadLockMessage) != (*other.DeadLockMessage) { return false }
  }
  if len(p.ThreadDetail) != len(other.ThreadDetail) { return false }
  for i, _tgt := range p.ThreadDetail {
    _src19 := other.ThreadDetail[i]
    if !_tgt.Equals(_src19) { return false }
  }
  if p.Analysisid != other.Analysisid { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  return true
}

func (p *TAgentThread) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentThread(%+v)", *p)
}

func (p *TAgentThread) Validate() error {
  return nil
}
// Attributes:
//  - Appkey
//  - ID
//  - ApplicationName
//  - AgentId
//  - Ts
//  - ThreadDetail
//  - Analysisid
//  - AppId
//  - Tenant
type TAgentThreadChunk struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  ID int64 `thrift:"id,2" db:"id" json:"id"`
  // unused field # 3
  ApplicationName string `thrift:"applicationName,4" db:"applicationName" json:"applicationName"`
  AgentId string `thrift:"agentId,5" db:"agentId" json:"agentId"`
  Ts int64 `thrift:"ts,6" db:"ts" json:"ts"`
  // unused fields # 7 to 8
  ThreadDetail []*TAgentThreadDetail `thrift:"threadDetail,9" db:"threadDetail" json:"threadDetail,omitempty"`
  Analysisid int64 `thrift:"analysisid,10" db:"analysisid" json:"analysisid"`
  AppId string `thrift:"appId,11" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,12" db:"tenant" json:"tenant"`
}

func NewTAgentThreadChunk() *TAgentThreadChunk {
  return &TAgentThreadChunk{}
}


func (p *TAgentThreadChunk) GetAppkey() string {
  return p.Appkey
}

func (p *TAgentThreadChunk) GetID() int64 {
  return p.ID
}

func (p *TAgentThreadChunk) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TAgentThreadChunk) GetAgentId() string {
  return p.AgentId
}

func (p *TAgentThreadChunk) GetTs() int64 {
  return p.Ts
}
var TAgentThreadChunk_ThreadDetail_DEFAULT []*TAgentThreadDetail

func (p *TAgentThreadChunk) GetThreadDetail() []*TAgentThreadDetail {
  return p.ThreadDetail
}

func (p *TAgentThreadChunk) GetAnalysisid() int64 {
  return p.Analysisid
}

func (p *TAgentThreadChunk) GetAppId() string {
  return p.AppId
}

func (p *TAgentThreadChunk) GetTenant() string {
  return p.Tenant
}
func (p *TAgentThreadChunk) IsSetThreadDetail() bool {
  return p.ThreadDetail != nil
}

func (p *TAgentThreadChunk) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAgentThreadChunk)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ID = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Ts = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAgentThreadDetail, 0, size)
  p.ThreadDetail =  tSlice
  for i := 0; i < size; i ++ {
    _elem20 := &TAgentThreadDetail{}
    if err := _elem20.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem20), err)
    }
    p.ThreadDetail = append(p.ThreadDetail, _elem20)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TAgentThreadChunk)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Analysisid = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TAgentThreadChunk)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TAgentThreadChunk) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAgentThreadChunk"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAgentThreadChunk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "id", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:id: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:id: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:applicationName: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:agentId: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:ts: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ts (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:ts: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadDetail() {
    if err := oprot.WriteFieldBegin(ctx, "threadDetail", thrift.LIST, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:threadDetail: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ThreadDetail)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.ThreadDetail {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:threadDetail: ", p), err) }
  }
  return err
}

func (p *TAgentThreadChunk) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "analysisid", thrift.I64, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:analysisid: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Analysisid)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.analysisid (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:analysisid: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:appId: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:tenant: ", p), err) }
  return err
}

func (p *TAgentThreadChunk) Equals(other *TAgentThreadChunk) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Appkey != other.Appkey { return false }
  if p.ID != other.ID { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentId != other.AgentId { return false }
  if p.Ts != other.Ts { return false }
  if len(p.ThreadDetail) != len(other.ThreadDetail) { return false }
  for i, _tgt := range p.ThreadDetail {
    _src21 := other.ThreadDetail[i]
    if !_tgt.Equals(_src21) { return false }
  }
  if p.Analysisid != other.Analysisid { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  return true
}

func (p *TAgentThreadChunk) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAgentThreadChunk(%+v)", *p)
}

func (p *TAgentThreadChunk) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - AppKey
//  - DbUrl
//  - DbHost
//  - DbName
//  - DbTypeCode
type TDbMetaData struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  AppKey string `thrift:"appKey,2" db:"appKey" json:"appKey"`
  // unused field # 3
  DbUrl string `thrift:"dbUrl,4" db:"dbUrl" json:"dbUrl"`
  DbHost string `thrift:"dbHost,5" db:"dbHost" json:"dbHost"`
  DbName string `thrift:"dbName,6" db:"dbName" json:"dbName"`
  // unused field # 7
  DbTypeCode int16 `thrift:"dbTypeCode,8" db:"dbTypeCode" json:"dbTypeCode"`
}

func NewTDbMetaData() *TDbMetaData {
  return &TDbMetaData{}
}


func (p *TDbMetaData) GetAgentId() string {
  return p.AgentId
}

func (p *TDbMetaData) GetAppKey() string {
  return p.AppKey
}

func (p *TDbMetaData) GetDbUrl() string {
  return p.DbUrl
}

func (p *TDbMetaData) GetDbHost() string {
  return p.DbHost
}

func (p *TDbMetaData) GetDbName() string {
  return p.DbName
}

func (p *TDbMetaData) GetDbTypeCode() int16 {
  return p.DbTypeCode
}
func (p *TDbMetaData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TDbMetaData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TDbMetaData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TDbMetaData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.DbUrl = v
}
  return nil
}

func (p *TDbMetaData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.DbHost = v
}
  return nil
}

func (p *TDbMetaData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DbName = v
}
  return nil
}

func (p *TDbMetaData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.DbTypeCode = v
}
  return nil
}

func (p *TDbMetaData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TDbMetaData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TDbMetaData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TDbMetaData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appKey", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:appKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKey (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:appKey: ", p), err) }
  return err
}

func (p *TDbMetaData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbUrl", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:dbUrl: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbUrl)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbUrl (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:dbUrl: ", p), err) }
  return err
}

func (p *TDbMetaData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbHost", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:dbHost: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbHost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbHost (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:dbHost: ", p), err) }
  return err
}

func (p *TDbMetaData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:dbName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.DbName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:dbName: ", p), err) }
  return err
}

func (p *TDbMetaData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbTypeCode", thrift.I16, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:dbTypeCode: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.DbTypeCode)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbTypeCode (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:dbTypeCode: ", p), err) }
  return err
}

func (p *TDbMetaData) Equals(other *TDbMetaData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.AppKey != other.AppKey { return false }
  if p.DbUrl != other.DbUrl { return false }
  if p.DbHost != other.DbHost { return false }
  if p.DbName != other.DbName { return false }
  if p.DbTypeCode != other.DbTypeCode { return false }
  return true
}

func (p *TDbMetaData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TDbMetaData(%+v)", *p)
}

func (p *TDbMetaData) Validate() error {
  return nil
}
// Attributes:
//  - IntValue
//  - StringValue
type TIntStringValue struct {
  IntValue int32 `thrift:"intValue,1" db:"intValue" json:"intValue"`
  StringValue *string `thrift:"stringValue,2" db:"stringValue" json:"stringValue,omitempty"`
}

func NewTIntStringValue() *TIntStringValue {
  return &TIntStringValue{}
}


func (p *TIntStringValue) GetIntValue() int32 {
  return p.IntValue
}
var TIntStringValue_StringValue_DEFAULT string
func (p *TIntStringValue) GetStringValue() string {
  if !p.IsSetStringValue() {
    return TIntStringValue_StringValue_DEFAULT
  }
return *p.StringValue
}
func (p *TIntStringValue) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *TIntStringValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIntStringValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *TIntStringValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *TIntStringValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TIntStringValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIntStringValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue: ", p), err) }
  return err
}

func (p *TIntStringValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue: ", p), err) }
  }
  return err
}

func (p *TIntStringValue) Equals(other *TIntStringValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IntValue != other.IntValue { return false }
  if p.StringValue != other.StringValue {
    if p.StringValue == nil || other.StringValue == nil {
      return false
    }
    if (*p.StringValue) != (*other.StringValue) { return false }
  }
  return true
}

func (p *TIntStringValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIntStringValue(%+v)", *p)
}

func (p *TIntStringValue) Validate() error {
  return nil
}
// Attributes:
//  - IntValue
//  - StringValue1
//  - StringValue2
type TIntStringStringValue struct {
  IntValue int32 `thrift:"intValue,1" db:"intValue" json:"intValue"`
  StringValue1 *string `thrift:"stringValue1,2" db:"stringValue1" json:"stringValue1,omitempty"`
  StringValue2 *string `thrift:"stringValue2,3" db:"stringValue2" json:"stringValue2,omitempty"`
}

func NewTIntStringStringValue() *TIntStringStringValue {
  return &TIntStringStringValue{}
}


func (p *TIntStringStringValue) GetIntValue() int32 {
  return p.IntValue
}
var TIntStringStringValue_StringValue1_DEFAULT string
func (p *TIntStringStringValue) GetStringValue1() string {
  if !p.IsSetStringValue1() {
    return TIntStringStringValue_StringValue1_DEFAULT
  }
return *p.StringValue1
}
var TIntStringStringValue_StringValue2_DEFAULT string
func (p *TIntStringStringValue) GetStringValue2() string {
  if !p.IsSetStringValue2() {
    return TIntStringStringValue_StringValue2_DEFAULT
  }
return *p.StringValue2
}
func (p *TIntStringStringValue) IsSetStringValue1() bool {
  return p.StringValue1 != nil
}

func (p *TIntStringStringValue) IsSetStringValue2() bool {
  return p.StringValue2 != nil
}

func (p *TIntStringStringValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIntStringStringValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *TIntStringStringValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringValue1 = &v
}
  return nil
}

func (p *TIntStringStringValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StringValue2 = &v
}
  return nil
}

func (p *TIntStringStringValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TIntStringStringValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIntStringStringValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue: ", p), err) }
  return err
}

func (p *TIntStringStringValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue1() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue1", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue1: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue1 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue1: ", p), err) }
  }
  return err
}

func (p *TIntStringStringValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue2() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue2", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringValue2: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue2 (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringValue2: ", p), err) }
  }
  return err
}

func (p *TIntStringStringValue) Equals(other *TIntStringStringValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IntValue != other.IntValue { return false }
  if p.StringValue1 != other.StringValue1 {
    if p.StringValue1 == nil || other.StringValue1 == nil {
      return false
    }
    if (*p.StringValue1) != (*other.StringValue1) { return false }
  }
  if p.StringValue2 != other.StringValue2 {
    if p.StringValue2 == nil || other.StringValue2 == nil {
      return false
    }
    if (*p.StringValue2) != (*other.StringValue2) { return false }
  }
  return true
}

func (p *TIntStringStringValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIntStringStringValue(%+v)", *p)
}

func (p *TIntStringStringValue) Validate() error {
  return nil
}
// Attributes:
//  - StringValue
//  - BoolValue
//  - IntValue
//  - LongValue
//  - ShortValue
//  - DoubleValue
//  - BinaryValue
//  - ByteValue
//  - IntStringValue
//  - IntStringStringValue
type TAnnotationValue struct {
  StringValue *string `thrift:"stringValue,1" db:"stringValue" json:"stringValue,omitempty"`
  BoolValue *bool `thrift:"boolValue,2" db:"boolValue" json:"boolValue,omitempty"`
  IntValue *int32 `thrift:"intValue,3" db:"intValue" json:"intValue,omitempty"`
  LongValue *int64 `thrift:"longValue,4" db:"longValue" json:"longValue,omitempty"`
  ShortValue *int16 `thrift:"shortValue,5" db:"shortValue" json:"shortValue,omitempty"`
  DoubleValue *float64 `thrift:"doubleValue,6" db:"doubleValue" json:"doubleValue,omitempty"`
  BinaryValue []byte `thrift:"binaryValue,7" db:"binaryValue" json:"binaryValue,omitempty"`
  ByteValue *int8 `thrift:"byteValue,8" db:"byteValue" json:"byteValue,omitempty"`
  IntStringValue *TIntStringValue `thrift:"intStringValue,9" db:"intStringValue" json:"intStringValue,omitempty"`
  IntStringStringValue *TIntStringStringValue `thrift:"intStringStringValue,10" db:"intStringStringValue" json:"intStringStringValue,omitempty"`
}

func NewTAnnotationValue() *TAnnotationValue {
  return &TAnnotationValue{}
}

var TAnnotationValue_StringValue_DEFAULT string
func (p *TAnnotationValue) GetStringValue() string {
  if !p.IsSetStringValue() {
    return TAnnotationValue_StringValue_DEFAULT
  }
return *p.StringValue
}
var TAnnotationValue_BoolValue_DEFAULT bool
func (p *TAnnotationValue) GetBoolValue() bool {
  if !p.IsSetBoolValue() {
    return TAnnotationValue_BoolValue_DEFAULT
  }
return *p.BoolValue
}
var TAnnotationValue_IntValue_DEFAULT int32
func (p *TAnnotationValue) GetIntValue() int32 {
  if !p.IsSetIntValue() {
    return TAnnotationValue_IntValue_DEFAULT
  }
return *p.IntValue
}
var TAnnotationValue_LongValue_DEFAULT int64
func (p *TAnnotationValue) GetLongValue() int64 {
  if !p.IsSetLongValue() {
    return TAnnotationValue_LongValue_DEFAULT
  }
return *p.LongValue
}
var TAnnotationValue_ShortValue_DEFAULT int16
func (p *TAnnotationValue) GetShortValue() int16 {
  if !p.IsSetShortValue() {
    return TAnnotationValue_ShortValue_DEFAULT
  }
return *p.ShortValue
}
var TAnnotationValue_DoubleValue_DEFAULT float64
func (p *TAnnotationValue) GetDoubleValue() float64 {
  if !p.IsSetDoubleValue() {
    return TAnnotationValue_DoubleValue_DEFAULT
  }
return *p.DoubleValue
}
var TAnnotationValue_BinaryValue_DEFAULT []byte

func (p *TAnnotationValue) GetBinaryValue() []byte {
  return p.BinaryValue
}
var TAnnotationValue_ByteValue_DEFAULT int8
func (p *TAnnotationValue) GetByteValue() int8 {
  if !p.IsSetByteValue() {
    return TAnnotationValue_ByteValue_DEFAULT
  }
return *p.ByteValue
}
var TAnnotationValue_IntStringValue_DEFAULT *TIntStringValue
func (p *TAnnotationValue) GetIntStringValue() *TIntStringValue {
  if !p.IsSetIntStringValue() {
    return TAnnotationValue_IntStringValue_DEFAULT
  }
return p.IntStringValue
}
var TAnnotationValue_IntStringStringValue_DEFAULT *TIntStringStringValue
func (p *TAnnotationValue) GetIntStringStringValue() *TIntStringStringValue {
  if !p.IsSetIntStringStringValue() {
    return TAnnotationValue_IntStringStringValue_DEFAULT
  }
return p.IntStringStringValue
}
func (p *TAnnotationValue) CountSetFieldsTAnnotationValue() int {
  count := 0
  if (p.IsSetStringValue()) {
    count++
  }
  if (p.IsSetBoolValue()) {
    count++
  }
  if (p.IsSetIntValue()) {
    count++
  }
  if (p.IsSetLongValue()) {
    count++
  }
  if (p.IsSetShortValue()) {
    count++
  }
  if (p.IsSetDoubleValue()) {
    count++
  }
  if (p.IsSetBinaryValue()) {
    count++
  }
  if (p.IsSetByteValue()) {
    count++
  }
  if (p.IsSetIntStringValue()) {
    count++
  }
  if (p.IsSetIntStringStringValue()) {
    count++
  }
  return count

}

func (p *TAnnotationValue) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *TAnnotationValue) IsSetBoolValue() bool {
  return p.BoolValue != nil
}

func (p *TAnnotationValue) IsSetIntValue() bool {
  return p.IntValue != nil
}

func (p *TAnnotationValue) IsSetLongValue() bool {
  return p.LongValue != nil
}

func (p *TAnnotationValue) IsSetShortValue() bool {
  return p.ShortValue != nil
}

func (p *TAnnotationValue) IsSetDoubleValue() bool {
  return p.DoubleValue != nil
}

func (p *TAnnotationValue) IsSetBinaryValue() bool {
  return p.BinaryValue != nil
}

func (p *TAnnotationValue) IsSetByteValue() bool {
  return p.ByteValue != nil
}

func (p *TAnnotationValue) IsSetIntStringValue() bool {
  return p.IntStringValue != nil
}

func (p *TAnnotationValue) IsSetIntStringStringValue() bool {
  return p.IntStringStringValue != nil
}

func (p *TAnnotationValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAnnotationValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BoolValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IntValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LongValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ShortValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DoubleValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BinaryValue = v
}
  return nil
}

func (p *TAnnotationValue)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := int8(v)
  p.ByteValue = &temp
}
  return nil
}

func (p *TAnnotationValue)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.IntStringValue = &TIntStringValue{}
  if err := p.IntStringValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntStringValue), err)
  }
  return nil
}

func (p *TAnnotationValue)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.IntStringStringValue = &TIntStringStringValue{}
  if err := p.IntStringStringValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntStringStringValue), err)
  }
  return nil
}

func (p *TAnnotationValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsTAnnotationValue(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "TAnnotationValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAnnotationValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stringValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stringValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolValue() {
    if err := oprot.WriteFieldBegin(ctx, "boolValue", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:boolValue: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.BoolValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:boolValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntValue() {
    if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intValue: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.IntValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.intValue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLongValue() {
    if err := oprot.WriteFieldBegin(ctx, "longValue", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longValue: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LongValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longValue (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetShortValue() {
    if err := oprot.WriteFieldBegin(ctx, "shortValue", thrift.I16, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shortValue: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ShortValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shortValue (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shortValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleValue() {
    if err := oprot.WriteFieldBegin(ctx, "doubleValue", thrift.DOUBLE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:doubleValue: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.DoubleValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleValue (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:doubleValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBinaryValue() {
    if err := oprot.WriteFieldBegin(ctx, "binaryValue", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:binaryValue: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BinaryValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.binaryValue (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:binaryValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetByteValue() {
    if err := oprot.WriteFieldBegin(ctx, "byteValue", thrift.BYTE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:byteValue: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.ByteValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.byteValue (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:byteValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "intStringValue", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:intStringValue: ", p), err) }
    if err := p.IntStringValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntStringValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:intStringValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntStringStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "intStringStringValue", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:intStringStringValue: ", p), err) }
    if err := p.IntStringStringValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntStringStringValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:intStringStringValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) Equals(other *TAnnotationValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StringValue != other.StringValue {
    if p.StringValue == nil || other.StringValue == nil {
      return false
    }
    if (*p.StringValue) != (*other.StringValue) { return false }
  }
  if p.BoolValue != other.BoolValue {
    if p.BoolValue == nil || other.BoolValue == nil {
      return false
    }
    if (*p.BoolValue) != (*other.BoolValue) { return false }
  }
  if p.IntValue != other.IntValue {
    if p.IntValue == nil || other.IntValue == nil {
      return false
    }
    if (*p.IntValue) != (*other.IntValue) { return false }
  }
  if p.LongValue != other.LongValue {
    if p.LongValue == nil || other.LongValue == nil {
      return false
    }
    if (*p.LongValue) != (*other.LongValue) { return false }
  }
  if p.ShortValue != other.ShortValue {
    if p.ShortValue == nil || other.ShortValue == nil {
      return false
    }
    if (*p.ShortValue) != (*other.ShortValue) { return false }
  }
  if p.DoubleValue != other.DoubleValue {
    if p.DoubleValue == nil || other.DoubleValue == nil {
      return false
    }
    if (*p.DoubleValue) != (*other.DoubleValue) { return false }
  }
  if bytes.Compare(p.BinaryValue, other.BinaryValue) != 0 { return false }
  if p.ByteValue != other.ByteValue {
    if p.ByteValue == nil || other.ByteValue == nil {
      return false
    }
    if (*p.ByteValue) != (*other.ByteValue) { return false }
  }
  if !p.IntStringValue.Equals(other.IntStringValue) { return false }
  if !p.IntStringStringValue.Equals(other.IntStringStringValue) { return false }
  return true
}

func (p *TAnnotationValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAnnotationValue(%+v)", *p)
}

func (p *TAnnotationValue) Validate() error {
  return nil
}
// Attributes:
//  - Key
//  - Value
type TAnnotation struct {
  Key int32 `thrift:"key,1" db:"key" json:"key"`
  Value *TAnnotationValue `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewTAnnotation() *TAnnotation {
  return &TAnnotation{}
}


func (p *TAnnotation) GetKey() int32 {
  return p.Key
}
var TAnnotation_Value_DEFAULT *TAnnotationValue
func (p *TAnnotation) GetValue() *TAnnotationValue {
  if !p.IsSetValue() {
    return TAnnotation_Value_DEFAULT
  }
return p.Value
}
func (p *TAnnotation) IsSetValue() bool {
  return p.Value != nil
}

func (p *TAnnotation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAnnotation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TAnnotation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &TAnnotationValue{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *TAnnotation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAnnotation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAnnotation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TAnnotation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := p.Value.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *TAnnotation) Equals(other *TAnnotation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Key != other.Key { return false }
  if !p.Value.Equals(other.Value) { return false }
  return true
}

func (p *TAnnotation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAnnotation(%+v)", *p)
}

func (p *TAnnotation) Validate() error {
  return nil
}
// Attributes:
//  - Dbhost
//  - Dbtype
//  - Db
//  - SqlHash
//  - Outputs
//  - BindValue
//  - Status
//  - Err
//  - StartTime
//  - Dur
type TSql struct {
  Dbhost string `thrift:"dbhost,1" db:"dbhost" json:"dbhost"`
  Dbtype string `thrift:"dbtype,2" db:"dbtype" json:"dbtype"`
  Db string `thrift:"db,3" db:"db" json:"db"`
  // unused fields # 4 to 5
  SqlHash string `thrift:"sqlHash,6" db:"sqlHash" json:"sqlHash"`
  Outputs *string `thrift:"outputs,7" db:"outputs" json:"outputs,omitempty"`
  BindValue *string `thrift:"bindValue,8" db:"bindValue" json:"bindValue,omitempty"`
  // unused field # 9
  Status string `thrift:"status,10" db:"status" json:"status"`
  Err *string `thrift:"err,11" db:"err" json:"err,omitempty"`
  StartTime int64 `thrift:"startTime,12" db:"startTime" json:"startTime"`
  Dur int64 `thrift:"dur,13" db:"dur" json:"dur"`
}

func NewTSql() *TSql {
  return &TSql{}
}


func (p *TSql) GetDbhost() string {
  return p.Dbhost
}

func (p *TSql) GetDbtype() string {
  return p.Dbtype
}

func (p *TSql) GetDb() string {
  return p.Db
}

func (p *TSql) GetSqlHash() string {
  return p.SqlHash
}
var TSql_Outputs_DEFAULT string
func (p *TSql) GetOutputs() string {
  if !p.IsSetOutputs() {
    return TSql_Outputs_DEFAULT
  }
return *p.Outputs
}
var TSql_BindValue_DEFAULT string
func (p *TSql) GetBindValue() string {
  if !p.IsSetBindValue() {
    return TSql_BindValue_DEFAULT
  }
return *p.BindValue
}

func (p *TSql) GetStatus() string {
  return p.Status
}
var TSql_Err_DEFAULT string
func (p *TSql) GetErr() string {
  if !p.IsSetErr() {
    return TSql_Err_DEFAULT
  }
return *p.Err
}

func (p *TSql) GetStartTime() int64 {
  return p.StartTime
}

func (p *TSql) GetDur() int64 {
  return p.Dur
}
func (p *TSql) IsSetOutputs() bool {
  return p.Outputs != nil
}

func (p *TSql) IsSetBindValue() bool {
  return p.BindValue != nil
}

func (p *TSql) IsSetErr() bool {
  return p.Err != nil
}

func (p *TSql) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSql)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbhost = v
}
  return nil
}

func (p *TSql)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbtype = v
}
  return nil
}

func (p *TSql)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *TSql)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SqlHash = v
}
  return nil
}

func (p *TSql)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Outputs = &v
}
  return nil
}

func (p *TSql)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BindValue = &v
}
  return nil
}

func (p *TSql)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TSql)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Err = &v
}
  return nil
}

func (p *TSql)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TSql)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Dur = v
}
  return nil
}

func (p *TSql) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSql"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSql) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbhost", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbhost: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbhost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbhost (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbhost: ", p), err) }
  return err
}

func (p *TSql) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbtype", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbtype: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbtype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbtype (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbtype: ", p), err) }
  return err
}

func (p *TSql) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:db: ", p), err) }
  return err
}

func (p *TSql) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sqlHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sqlHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SqlHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sqlHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sqlHash: ", p), err) }
  return err
}

func (p *TSql) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputs() {
    if err := oprot.WriteFieldBegin(ctx, "outputs", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:outputs: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Outputs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputs (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:outputs: ", p), err) }
  }
  return err
}

func (p *TSql) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBindValue() {
    if err := oprot.WriteFieldBegin(ctx, "bindValue", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bindValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BindValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bindValue (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bindValue: ", p), err) }
  }
  return err
}

func (p *TSql) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err) }
  return err
}

func (p *TSql) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:err: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Err)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.err (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:err: ", p), err) }
  }
  return err
}

func (p *TSql) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:startTime: ", p), err) }
  return err
}

func (p *TSql) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dur", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:dur: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Dur)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dur (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:dur: ", p), err) }
  return err
}

func (p *TSql) Equals(other *TSql) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dbhost != other.Dbhost { return false }
  if p.Dbtype != other.Dbtype { return false }
  if p.Db != other.Db { return false }
  if p.SqlHash != other.SqlHash { return false }
  if p.Outputs != other.Outputs {
    if p.Outputs == nil || other.Outputs == nil {
      return false
    }
    if (*p.Outputs) != (*other.Outputs) { return false }
  }
  if p.BindValue != other.BindValue {
    if p.BindValue == nil || other.BindValue == nil {
      return false
    }
    if (*p.BindValue) != (*other.BindValue) { return false }
  }
  if p.Status != other.Status { return false }
  if p.Err != other.Err {
    if p.Err == nil || other.Err == nil {
      return false
    }
    if (*p.Err) != (*other.Err) { return false }
  }
  if p.StartTime != other.StartTime { return false }
  if p.Dur != other.Dur { return false }
  return true
}

func (p *TSql) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSql(%+v)", *p)
}

func (p *TSql) Validate() error {
  return nil
}
// Attributes:
//  - SpanId
//  - Sequence
//  - StartElapsed
//  - EndElapsed
//  - RPC
//  - ServiceType
//  - EndPoint
//  - Annotations
//  - Depth
//  - NextSpanId
//  - DestinationId
//  - ApiId
//  - ExceptionInfo
//  - ExceptionClassName
//  - AsyncId
//  - NextAsyncId
//  - AsyncSequence
//  - ApiInfo
//  - LineNumber
//  - Sql
//  - Retcode
//  - RequestHeaders
//  - RequestBody
//  - ResponseBody
//  - URL
//  - Method
//  - Arguments
type TSpanEvent struct {
  // unused fields # 1 to 6
  SpanId *int64 `thrift:"spanId,7" db:"spanId" json:"spanId,omitempty"`
  Sequence int32 `thrift:"sequence,8" db:"sequence" json:"sequence"`
  StartElapsed int32 `thrift:"startElapsed,9" db:"startElapsed" json:"startElapsed"`
  EndElapsed int32 `thrift:"endElapsed,10" db:"endElapsed" json:"endElapsed"`
  RPC *string `thrift:"rpc,11" db:"rpc" json:"rpc,omitempty"`
  ServiceType int16 `thrift:"serviceType,12" db:"serviceType" json:"serviceType"`
  EndPoint *string `thrift:"endPoint,13" db:"endPoint" json:"endPoint,omitempty"`
  Annotations []*TAnnotation `thrift:"annotations,14" db:"annotations" json:"annotations,omitempty"`
  Depth int32 `thrift:"depth,15" db:"depth" json:"depth"`
  NextSpanId int64 `thrift:"nextSpanId,16" db:"nextSpanId" json:"nextSpanId"`
  // unused fields # 17 to 19
  DestinationId *string `thrift:"destinationId,20" db:"destinationId" json:"destinationId,omitempty"`
  // unused fields # 21 to 24
  ApiId *int32 `thrift:"apiId,25" db:"apiId" json:"apiId,omitempty"`
  ExceptionInfo *TIntStringValue `thrift:"exceptionInfo,26" db:"exceptionInfo" json:"exceptionInfo,omitempty"`
  ExceptionClassName *string `thrift:"exceptionClassName,27" db:"exceptionClassName" json:"exceptionClassName,omitempty"`
  // unused fields # 28 to 29
  AsyncId *int32 `thrift:"asyncId,30" db:"asyncId" json:"asyncId,omitempty"`
  NextAsyncId *int32 `thrift:"nextAsyncId,31" db:"nextAsyncId" json:"nextAsyncId,omitempty"`
  AsyncSequence *int32 `thrift:"asyncSequence,32" db:"asyncSequence" json:"asyncSequence,omitempty"`
  ApiInfo string `thrift:"apiInfo,33" db:"apiInfo" json:"apiInfo"`
  LineNumber *int32 `thrift:"lineNumber,34" db:"lineNumber" json:"lineNumber,omitempty"`
  // unused fields # 35 to 39
  Sql *TSql `thrift:"sql,40" db:"sql" json:"sql,omitempty"`
  Retcode *int32 `thrift:"retcode,41" db:"retcode" json:"retcode,omitempty"`
  // unused fields # 42 to 50
  RequestHeaders *string `thrift:"requestHeaders,51" db:"requestHeaders" json:"requestHeaders,omitempty"`
  // unused fields # 52 to 60
  RequestBody *string `thrift:"requestBody,61" db:"requestBody" json:"requestBody,omitempty"`
  // unused fields # 62 to 70
  ResponseBody *string `thrift:"responseBody,71" db:"responseBody" json:"responseBody,omitempty"`
  // unused fields # 72 to 80
  URL *string `thrift:"url,81" db:"url" json:"url,omitempty"`
  // unused fields # 82 to 90
  Method *string `thrift:"method,91" db:"method" json:"method,omitempty"`
  Arguments *string `thrift:"arguments,92" db:"arguments" json:"arguments,omitempty"`
}

func NewTSpanEvent() *TSpanEvent {
  return &TSpanEvent{
Depth: -1,

NextSpanId: -1,
}
}

var TSpanEvent_SpanId_DEFAULT int64
func (p *TSpanEvent) GetSpanId() int64 {
  if !p.IsSetSpanId() {
    return TSpanEvent_SpanId_DEFAULT
  }
return *p.SpanId
}

func (p *TSpanEvent) GetSequence() int32 {
  return p.Sequence
}

func (p *TSpanEvent) GetStartElapsed() int32 {
  return p.StartElapsed
}
var TSpanEvent_EndElapsed_DEFAULT int32 = 0

func (p *TSpanEvent) GetEndElapsed() int32 {
  return p.EndElapsed
}
var TSpanEvent_RPC_DEFAULT string
func (p *TSpanEvent) GetRPC() string {
  if !p.IsSetRPC() {
    return TSpanEvent_RPC_DEFAULT
  }
return *p.RPC
}

func (p *TSpanEvent) GetServiceType() int16 {
  return p.ServiceType
}
var TSpanEvent_EndPoint_DEFAULT string
func (p *TSpanEvent) GetEndPoint() string {
  if !p.IsSetEndPoint() {
    return TSpanEvent_EndPoint_DEFAULT
  }
return *p.EndPoint
}
var TSpanEvent_Annotations_DEFAULT []*TAnnotation

func (p *TSpanEvent) GetAnnotations() []*TAnnotation {
  return p.Annotations
}
var TSpanEvent_Depth_DEFAULT int32 = -1

func (p *TSpanEvent) GetDepth() int32 {
  return p.Depth
}
var TSpanEvent_NextSpanId_DEFAULT int64 = -1

func (p *TSpanEvent) GetNextSpanId() int64 {
  return p.NextSpanId
}
var TSpanEvent_DestinationId_DEFAULT string
func (p *TSpanEvent) GetDestinationId() string {
  if !p.IsSetDestinationId() {
    return TSpanEvent_DestinationId_DEFAULT
  }
return *p.DestinationId
}
var TSpanEvent_ApiId_DEFAULT int32
func (p *TSpanEvent) GetApiId() int32 {
  if !p.IsSetApiId() {
    return TSpanEvent_ApiId_DEFAULT
  }
return *p.ApiId
}
var TSpanEvent_ExceptionInfo_DEFAULT *TIntStringValue
func (p *TSpanEvent) GetExceptionInfo() *TIntStringValue {
  if !p.IsSetExceptionInfo() {
    return TSpanEvent_ExceptionInfo_DEFAULT
  }
return p.ExceptionInfo
}
var TSpanEvent_ExceptionClassName_DEFAULT string
func (p *TSpanEvent) GetExceptionClassName() string {
  if !p.IsSetExceptionClassName() {
    return TSpanEvent_ExceptionClassName_DEFAULT
  }
return *p.ExceptionClassName
}
var TSpanEvent_AsyncId_DEFAULT int32
func (p *TSpanEvent) GetAsyncId() int32 {
  if !p.IsSetAsyncId() {
    return TSpanEvent_AsyncId_DEFAULT
  }
return *p.AsyncId
}
var TSpanEvent_NextAsyncId_DEFAULT int32
func (p *TSpanEvent) GetNextAsyncId() int32 {
  if !p.IsSetNextAsyncId() {
    return TSpanEvent_NextAsyncId_DEFAULT
  }
return *p.NextAsyncId
}
var TSpanEvent_AsyncSequence_DEFAULT int32
func (p *TSpanEvent) GetAsyncSequence() int32 {
  if !p.IsSetAsyncSequence() {
    return TSpanEvent_AsyncSequence_DEFAULT
  }
return *p.AsyncSequence
}

func (p *TSpanEvent) GetApiInfo() string {
  return p.ApiInfo
}
var TSpanEvent_LineNumber_DEFAULT int32
func (p *TSpanEvent) GetLineNumber() int32 {
  if !p.IsSetLineNumber() {
    return TSpanEvent_LineNumber_DEFAULT
  }
return *p.LineNumber
}
var TSpanEvent_Sql_DEFAULT *TSql
func (p *TSpanEvent) GetSql() *TSql {
  if !p.IsSetSql() {
    return TSpanEvent_Sql_DEFAULT
  }
return p.Sql
}
var TSpanEvent_Retcode_DEFAULT int32
func (p *TSpanEvent) GetRetcode() int32 {
  if !p.IsSetRetcode() {
    return TSpanEvent_Retcode_DEFAULT
  }
return *p.Retcode
}
var TSpanEvent_RequestHeaders_DEFAULT string
func (p *TSpanEvent) GetRequestHeaders() string {
  if !p.IsSetRequestHeaders() {
    return TSpanEvent_RequestHeaders_DEFAULT
  }
return *p.RequestHeaders
}
var TSpanEvent_RequestBody_DEFAULT string
func (p *TSpanEvent) GetRequestBody() string {
  if !p.IsSetRequestBody() {
    return TSpanEvent_RequestBody_DEFAULT
  }
return *p.RequestBody
}
var TSpanEvent_ResponseBody_DEFAULT string
func (p *TSpanEvent) GetResponseBody() string {
  if !p.IsSetResponseBody() {
    return TSpanEvent_ResponseBody_DEFAULT
  }
return *p.ResponseBody
}
var TSpanEvent_URL_DEFAULT string
func (p *TSpanEvent) GetURL() string {
  if !p.IsSetURL() {
    return TSpanEvent_URL_DEFAULT
  }
return *p.URL
}
var TSpanEvent_Method_DEFAULT string
func (p *TSpanEvent) GetMethod() string {
  if !p.IsSetMethod() {
    return TSpanEvent_Method_DEFAULT
  }
return *p.Method
}
var TSpanEvent_Arguments_DEFAULT string
func (p *TSpanEvent) GetArguments() string {
  if !p.IsSetArguments() {
    return TSpanEvent_Arguments_DEFAULT
  }
return *p.Arguments
}
func (p *TSpanEvent) IsSetSpanId() bool {
  return p.SpanId != nil
}

func (p *TSpanEvent) IsSetEndElapsed() bool {
  return p.EndElapsed != TSpanEvent_EndElapsed_DEFAULT
}

func (p *TSpanEvent) IsSetRPC() bool {
  return p.RPC != nil
}

func (p *TSpanEvent) IsSetEndPoint() bool {
  return p.EndPoint != nil
}

func (p *TSpanEvent) IsSetAnnotations() bool {
  return p.Annotations != nil
}

func (p *TSpanEvent) IsSetDepth() bool {
  return p.Depth != TSpanEvent_Depth_DEFAULT
}

func (p *TSpanEvent) IsSetNextSpanId() bool {
  return p.NextSpanId != TSpanEvent_NextSpanId_DEFAULT
}

func (p *TSpanEvent) IsSetDestinationId() bool {
  return p.DestinationId != nil
}

func (p *TSpanEvent) IsSetApiId() bool {
  return p.ApiId != nil
}

func (p *TSpanEvent) IsSetExceptionInfo() bool {
  return p.ExceptionInfo != nil
}

func (p *TSpanEvent) IsSetExceptionClassName() bool {
  return p.ExceptionClassName != nil
}

func (p *TSpanEvent) IsSetAsyncId() bool {
  return p.AsyncId != nil
}

func (p *TSpanEvent) IsSetNextAsyncId() bool {
  return p.NextAsyncId != nil
}

func (p *TSpanEvent) IsSetAsyncSequence() bool {
  return p.AsyncSequence != nil
}

func (p *TSpanEvent) IsSetLineNumber() bool {
  return p.LineNumber != nil
}

func (p *TSpanEvent) IsSetSql() bool {
  return p.Sql != nil
}

func (p *TSpanEvent) IsSetRetcode() bool {
  return p.Retcode != nil
}

func (p *TSpanEvent) IsSetRequestHeaders() bool {
  return p.RequestHeaders != nil
}

func (p *TSpanEvent) IsSetRequestBody() bool {
  return p.RequestBody != nil
}

func (p *TSpanEvent) IsSetResponseBody() bool {
  return p.ResponseBody != nil
}

func (p *TSpanEvent) IsSetURL() bool {
  return p.URL != nil
}

func (p *TSpanEvent) IsSetMethod() bool {
  return p.Method != nil
}

func (p *TSpanEvent) IsSetArguments() bool {
  return p.Arguments != nil
}

func (p *TSpanEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField71(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField81(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField92(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SpanId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *TSpanEvent)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartElapsed = v
}
  return nil
}

func (p *TSpanEvent)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndElapsed = v
}
  return nil
}

func (p *TSpanEvent)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RPC = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TSpanEvent)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.EndPoint = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAnnotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem22 := &TAnnotation{}
    if err := _elem22.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem22), err)
    }
    p.Annotations = append(p.Annotations, _elem22)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Depth = v
}
  return nil
}

func (p *TSpanEvent)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NextSpanId = v
}
  return nil
}

func (p *TSpanEvent)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DestinationId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ApiId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExceptionInfo = &TIntStringValue{}
  if err := p.ExceptionInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionInfo), err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.ExceptionClassName = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.AsyncId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NextAsyncId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AsyncSequence = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.ApiInfo = v
}
  return nil
}

func (p *TSpanEvent)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.LineNumber = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sql = &TSql{}
  if err := p.Sql.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sql), err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.Retcode = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.RequestHeaders = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.RequestBody = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.ResponseBody = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.Method = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 92: ", err)
} else {
  p.Arguments = &v
}
  return nil
}

func (p *TSpanEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSpanEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField71(ctx, oprot); err != nil { return err }
    if err := p.writeField81(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
    if err := p.writeField92(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpanEvent) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpanId() {
    if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spanId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SpanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.spanId (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spanId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sequence", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sequence: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sequence: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startElapsed", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startElapsed: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StartElapsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startElapsed (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startElapsed: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndElapsed() {
    if err := oprot.WriteFieldBegin(ctx, "endElapsed", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endElapsed: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.EndElapsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endElapsed (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endElapsed: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRPC() {
    if err := oprot.WriteFieldBegin(ctx, "rpc", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rpc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RPC)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rpc (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rpc: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceType: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndPoint() {
    if err := oprot.WriteFieldBegin(ctx, "endPoint", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:endPoint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndPoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endPoint (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:endPoint: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnnotations() {
    if err := oprot.WriteFieldBegin(ctx, "annotations", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:annotations: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Annotations)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Annotations {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:annotations: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDepth() {
    if err := oprot.WriteFieldBegin(ctx, "depth", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:depth: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.Depth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.depth (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:depth: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNextSpanId() {
    if err := oprot.WriteFieldBegin(ctx, "nextSpanId", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:nextSpanId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.NextSpanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextSpanId (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:nextSpanId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationId() {
    if err := oprot.WriteFieldBegin(ctx, "destinationId", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:destinationId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DestinationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:destinationId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApiId() {
    if err := oprot.WriteFieldBegin(ctx, "apiId", thrift.I32, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:apiId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ApiId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.apiId (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:apiId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionInfo() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionInfo", thrift.STRUCT, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:exceptionInfo: ", p), err) }
    if err := p.ExceptionInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:exceptionInfo: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionClassName() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionClassName", thrift.STRING, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:exceptionClassName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ExceptionClassName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.exceptionClassName (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:exceptionClassName: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAsyncId() {
    if err := oprot.WriteFieldBegin(ctx, "asyncId", thrift.I32, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:asyncId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.AsyncId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.asyncId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:asyncId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNextAsyncId() {
    if err := oprot.WriteFieldBegin(ctx, "nextAsyncId", thrift.I32, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:nextAsyncId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.NextAsyncId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextAsyncId (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:nextAsyncId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAsyncSequence() {
    if err := oprot.WriteFieldBegin(ctx, "asyncSequence", thrift.I32, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:asyncSequence: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.AsyncSequence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.asyncSequence (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:asyncSequence: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apiInfo", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:apiInfo: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApiInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiInfo (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:apiInfo: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLineNumber() {
    if err := oprot.WriteFieldBegin(ctx, "lineNumber", thrift.I32, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:lineNumber: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.LineNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lineNumber (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:lineNumber: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSql() {
    if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:sql: ", p), err) }
    if err := p.Sql.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sql), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:sql: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRetcode() {
    if err := oprot.WriteFieldBegin(ctx, "retcode", thrift.I32, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:retcode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Retcode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retcode (41) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:retcode: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestHeaders() {
    if err := oprot.WriteFieldBegin(ctx, "requestHeaders", thrift.STRING, 51); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:requestHeaders: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RequestHeaders)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestHeaders (51) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 51:requestHeaders: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestBody() {
    if err := oprot.WriteFieldBegin(ctx, "requestBody", thrift.STRING, 61); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:requestBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RequestBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestBody (61) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 61:requestBody: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResponseBody() {
    if err := oprot.WriteFieldBegin(ctx, "responseBody", thrift.STRING, 71); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:responseBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResponseBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.responseBody (71) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 71:responseBody: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 81); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:url: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (81) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 81:url: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMethod() {
    if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 91); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:method: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Method)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.method (91) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 91:method: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetArguments() {
    if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.STRING, 92); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:arguments: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Arguments)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.arguments (92) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 92:arguments: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) Equals(other *TSpanEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpanId != other.SpanId {
    if p.SpanId == nil || other.SpanId == nil {
      return false
    }
    if (*p.SpanId) != (*other.SpanId) { return false }
  }
  if p.Sequence != other.Sequence { return false }
  if p.StartElapsed != other.StartElapsed { return false }
  if p.EndElapsed != other.EndElapsed { return false }
  if p.RPC != other.RPC {
    if p.RPC == nil || other.RPC == nil {
      return false
    }
    if (*p.RPC) != (*other.RPC) { return false }
  }
  if p.ServiceType != other.ServiceType { return false }
  if p.EndPoint != other.EndPoint {
    if p.EndPoint == nil || other.EndPoint == nil {
      return false
    }
    if (*p.EndPoint) != (*other.EndPoint) { return false }
  }
  if len(p.Annotations) != len(other.Annotations) { return false }
  for i, _tgt := range p.Annotations {
    _src23 := other.Annotations[i]
    if !_tgt.Equals(_src23) { return false }
  }
  if p.Depth != other.Depth { return false }
  if p.NextSpanId != other.NextSpanId { return false }
  if p.DestinationId != other.DestinationId {
    if p.DestinationId == nil || other.DestinationId == nil {
      return false
    }
    if (*p.DestinationId) != (*other.DestinationId) { return false }
  }
  if p.ApiId != other.ApiId {
    if p.ApiId == nil || other.ApiId == nil {
      return false
    }
    if (*p.ApiId) != (*other.ApiId) { return false }
  }
  if !p.ExceptionInfo.Equals(other.ExceptionInfo) { return false }
  if p.ExceptionClassName != other.ExceptionClassName {
    if p.ExceptionClassName == nil || other.ExceptionClassName == nil {
      return false
    }
    if (*p.ExceptionClassName) != (*other.ExceptionClassName) { return false }
  }
  if p.AsyncId != other.AsyncId {
    if p.AsyncId == nil || other.AsyncId == nil {
      return false
    }
    if (*p.AsyncId) != (*other.AsyncId) { return false }
  }
  if p.NextAsyncId != other.NextAsyncId {
    if p.NextAsyncId == nil || other.NextAsyncId == nil {
      return false
    }
    if (*p.NextAsyncId) != (*other.NextAsyncId) { return false }
  }
  if p.AsyncSequence != other.AsyncSequence {
    if p.AsyncSequence == nil || other.AsyncSequence == nil {
      return false
    }
    if (*p.AsyncSequence) != (*other.AsyncSequence) { return false }
  }
  if p.ApiInfo != other.ApiInfo { return false }
  if p.LineNumber != other.LineNumber {
    if p.LineNumber == nil || other.LineNumber == nil {
      return false
    }
    if (*p.LineNumber) != (*other.LineNumber) { return false }
  }
  if !p.Sql.Equals(other.Sql) { return false }
  if p.Retcode != other.Retcode {
    if p.Retcode == nil || other.Retcode == nil {
      return false
    }
    if (*p.Retcode) != (*other.Retcode) { return false }
  }
  if p.RequestHeaders != other.RequestHeaders {
    if p.RequestHeaders == nil || other.RequestHeaders == nil {
      return false
    }
    if (*p.RequestHeaders) != (*other.RequestHeaders) { return false }
  }
  if p.RequestBody != other.RequestBody {
    if p.RequestBody == nil || other.RequestBody == nil {
      return false
    }
    if (*p.RequestBody) != (*other.RequestBody) { return false }
  }
  if p.ResponseBody != other.ResponseBody {
    if p.ResponseBody == nil || other.ResponseBody == nil {
      return false
    }
    if (*p.ResponseBody) != (*other.ResponseBody) { return false }
  }
  if p.URL != other.URL {
    if p.URL == nil || other.URL == nil {
      return false
    }
    if (*p.URL) != (*other.URL) { return false }
  }
  if p.Method != other.Method {
    if p.Method == nil || other.Method == nil {
      return false
    }
    if (*p.Method) != (*other.Method) { return false }
  }
  if p.Arguments != other.Arguments {
    if p.Arguments == nil || other.Arguments == nil {
      return false
    }
    if (*p.Arguments) != (*other.Arguments) { return false }
  }
  return true
}

func (p *TSpanEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpanEvent(%+v)", *p)
}

func (p *TSpanEvent) Validate() error {
  return nil
}
// Attributes:
//  - Ts
//  - Name
//  - Msg
//  - Method
//  - ExceptionClass
//  - ApiName
//  - URL
//  - Tier
//  - AgentID
//  - AppKey
//  - Tenant
//  - AppId
//  - TransactionId
//  - SpanId
//  - PspanId
//  - PagentId
//  - ExceptionId
//  - UserId
//  - SessionId
//  - AgentStartTime
//  - IP
type TExceptionMetaData2Api struct {
  Ts int64 `thrift:"ts,1" db:"ts" json:"ts"`
  Name string `thrift:"name,2" db:"name" json:"name"`
  Msg string `thrift:"msg,3" db:"msg" json:"msg"`
  Method string `thrift:"method,4" db:"method" json:"method"`
  ExceptionClass string `thrift:"exceptionClass,5" db:"exceptionClass" json:"exceptionClass"`
  ApiName string `thrift:"apiName,6" db:"apiName" json:"apiName"`
  URL string `thrift:"url,7" db:"url" json:"url"`
  Tier string `thrift:"tier,8" db:"tier" json:"tier"`
  AgentID string `thrift:"agent_id,9" db:"agent_id" json:"agent_id"`
  AppKey string `thrift:"app_key,10" db:"app_key" json:"app_key"`
  Tenant string `thrift:"tenant,11" db:"tenant" json:"tenant"`
  AppId string `thrift:"appId,12" db:"appId" json:"appId"`
  // unused field # 13
  TransactionId string `thrift:"transactionId,14" db:"transactionId" json:"transactionId"`
  SpanId string `thrift:"spanId,15" db:"spanId" json:"spanId"`
  PspanId string `thrift:"pspanId,16" db:"pspanId" json:"pspanId"`
  PagentId *string `thrift:"pagentId,17" db:"pagentId" json:"pagentId,omitempty"`
  ExceptionId *int32 `thrift:"exceptionId,18" db:"exceptionId" json:"exceptionId,omitempty"`
  UserId *string `thrift:"userId,19" db:"userId" json:"userId,omitempty"`
  SessionId *string `thrift:"sessionId,20" db:"sessionId" json:"sessionId,omitempty"`
  AgentStartTime int64 `thrift:"agentStartTime,21" db:"agentStartTime" json:"agentStartTime"`
  IP *string `thrift:"ip,22" db:"ip" json:"ip,omitempty"`
}

func NewTExceptionMetaData2Api() *TExceptionMetaData2Api {
  return &TExceptionMetaData2Api{}
}


func (p *TExceptionMetaData2Api) GetTs() int64 {
  return p.Ts
}

func (p *TExceptionMetaData2Api) GetName() string {
  return p.Name
}

func (p *TExceptionMetaData2Api) GetMsg() string {
  return p.Msg
}

func (p *TExceptionMetaData2Api) GetMethod() string {
  return p.Method
}

func (p *TExceptionMetaData2Api) GetExceptionClass() string {
  return p.ExceptionClass
}

func (p *TExceptionMetaData2Api) GetApiName() string {
  return p.ApiName
}

func (p *TExceptionMetaData2Api) GetURL() string {
  return p.URL
}

func (p *TExceptionMetaData2Api) GetTier() string {
  return p.Tier
}

func (p *TExceptionMetaData2Api) GetAgentID() string {
  return p.AgentID
}

func (p *TExceptionMetaData2Api) GetAppKey() string {
  return p.AppKey
}

func (p *TExceptionMetaData2Api) GetTenant() string {
  return p.Tenant
}

func (p *TExceptionMetaData2Api) GetAppId() string {
  return p.AppId
}

func (p *TExceptionMetaData2Api) GetTransactionId() string {
  return p.TransactionId
}

func (p *TExceptionMetaData2Api) GetSpanId() string {
  return p.SpanId
}

func (p *TExceptionMetaData2Api) GetPspanId() string {
  return p.PspanId
}
var TExceptionMetaData2Api_PagentId_DEFAULT string
func (p *TExceptionMetaData2Api) GetPagentId() string {
  if !p.IsSetPagentId() {
    return TExceptionMetaData2Api_PagentId_DEFAULT
  }
return *p.PagentId
}
var TExceptionMetaData2Api_ExceptionId_DEFAULT int32
func (p *TExceptionMetaData2Api) GetExceptionId() int32 {
  if !p.IsSetExceptionId() {
    return TExceptionMetaData2Api_ExceptionId_DEFAULT
  }
return *p.ExceptionId
}
var TExceptionMetaData2Api_UserId_DEFAULT string
func (p *TExceptionMetaData2Api) GetUserId() string {
  if !p.IsSetUserId() {
    return TExceptionMetaData2Api_UserId_DEFAULT
  }
return *p.UserId
}
var TExceptionMetaData2Api_SessionId_DEFAULT string
func (p *TExceptionMetaData2Api) GetSessionId() string {
  if !p.IsSetSessionId() {
    return TExceptionMetaData2Api_SessionId_DEFAULT
  }
return *p.SessionId
}

func (p *TExceptionMetaData2Api) GetAgentStartTime() int64 {
  return p.AgentStartTime
}
var TExceptionMetaData2Api_IP_DEFAULT string
func (p *TExceptionMetaData2Api) GetIP() string {
  if !p.IsSetIP() {
    return TExceptionMetaData2Api_IP_DEFAULT
  }
return *p.IP
}
func (p *TExceptionMetaData2Api) IsSetPagentId() bool {
  return p.PagentId != nil
}

func (p *TExceptionMetaData2Api) IsSetExceptionId() bool {
  return p.ExceptionId != nil
}

func (p *TExceptionMetaData2Api) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *TExceptionMetaData2Api) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *TExceptionMetaData2Api) IsSetIP() bool {
  return p.IP != nil
}

func (p *TExceptionMetaData2Api) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Ts = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Msg = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ExceptionClass = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.ApiName = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Tier = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.AgentID = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.TransactionId = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SpanId = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.PspanId = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.PagentId = &v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.ExceptionId = &v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.UserId = &v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.SessionId = &v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TExceptionMetaData2Api)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.IP = &v
}
  return nil
}

func (p *TExceptionMetaData2Api) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TExceptionMetaData2Api"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TExceptionMetaData2Api) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "ts", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:ts: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Ts)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.ts (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:ts: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "msg", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:msg: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Msg)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.msg (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:msg: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:method: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:method: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "exceptionClass", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:exceptionClass: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ExceptionClass)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.exceptionClass (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:exceptionClass: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apiName", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:apiName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApiName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiName (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:apiName: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:url: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tier", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tier: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tier)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tier (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tier: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_id", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:agent_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_id (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:agent_id: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_key", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:app_key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_key (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:app_key: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:tenant: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:appId: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:transactionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TransactionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionId (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:transactionId: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:spanId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spanId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:spanId: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pspanId", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:pspanId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PspanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pspanId (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:pspanId: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPagentId() {
    if err := oprot.WriteFieldBegin(ctx, "pagentId", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:pagentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PagentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pagentId (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:pagentId: ", p), err) }
  }
  return err
}

func (p *TExceptionMetaData2Api) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionId() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionId", thrift.I32, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:exceptionId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ExceptionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.exceptionId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:exceptionId: ", p), err) }
  }
  return err
}

func (p *TExceptionMetaData2Api) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin(ctx, "userId", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:userId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:userId: ", p), err) }
  }
  return err
}

func (p *TExceptionMetaData2Api) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionId() {
    if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:sessionId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SessionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sessionId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:sessionId: ", p), err) }
  }
  return err
}

func (p *TExceptionMetaData2Api) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:agentStartTime: ", p), err) }
  return err
}

func (p *TExceptionMetaData2Api) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIP() {
    if err := oprot.WriteFieldBegin(ctx, "ip", thrift.STRING, 22); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:ip: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.IP)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.ip (22) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 22:ip: ", p), err) }
  }
  return err
}

func (p *TExceptionMetaData2Api) Equals(other *TExceptionMetaData2Api) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Ts != other.Ts { return false }
  if p.Name != other.Name { return false }
  if p.Msg != other.Msg { return false }
  if p.Method != other.Method { return false }
  if p.ExceptionClass != other.ExceptionClass { return false }
  if p.ApiName != other.ApiName { return false }
  if p.URL != other.URL { return false }
  if p.Tier != other.Tier { return false }
  if p.AgentID != other.AgentID { return false }
  if p.AppKey != other.AppKey { return false }
  if p.Tenant != other.Tenant { return false }
  if p.AppId != other.AppId { return false }
  if p.TransactionId != other.TransactionId { return false }
  if p.SpanId != other.SpanId { return false }
  if p.PspanId != other.PspanId { return false }
  if p.PagentId != other.PagentId {
    if p.PagentId == nil || other.PagentId == nil {
      return false
    }
    if (*p.PagentId) != (*other.PagentId) { return false }
  }
  if p.ExceptionId != other.ExceptionId {
    if p.ExceptionId == nil || other.ExceptionId == nil {
      return false
    }
    if (*p.ExceptionId) != (*other.ExceptionId) { return false }
  }
  if p.UserId != other.UserId {
    if p.UserId == nil || other.UserId == nil {
      return false
    }
    if (*p.UserId) != (*other.UserId) { return false }
  }
  if p.SessionId != other.SessionId {
    if p.SessionId == nil || other.SessionId == nil {
      return false
    }
    if (*p.SessionId) != (*other.SessionId) { return false }
  }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if p.IP != other.IP {
    if p.IP == nil || other.IP == nil {
      return false
    }
    if (*p.IP) != (*other.IP) { return false }
  }
  return true
}

func (p *TExceptionMetaData2Api) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TExceptionMetaData2Api(%+v)", *p)
}

func (p *TExceptionMetaData2Api) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - ApplicationName
//  - AgentStartTime
//  - TransactionId
//  - Appkey
//  - SpanId
//  - ParentSpanId
//  - StartTime
//  - Elapsed
//  - RPC
//  - ServiceType
//  - EndPoint
//  - RemoteAddr
//  - Annotations
//  - Flag
//  - Err
//  - SpanEventList
//  - ParentApplicationName
//  - ParentApplicationType
//  - AcceptorHost
//  - ApiId
//  - ExceptionInfo
//  - ApplicationServiceType
//  - LoggingTransactionInfo
//  - HttpPara
//  - HttpMethod
//  - HttpRequestHeader
//  - HttpRequestUserAgent
//  - HttpRequestBody
//  - HttpResponseBody
//  - Retcode
//  - HttpRequestUID
//  - HttpRequestTID
//  - PagentId
//  - Apidesc
//  - HttpResponseHeader
//  - UserId
//  - SessionId
//  - AppId
//  - Tenant
//  - ThreadId
//  - ThreadName
//  - HasNextCall
type TSpan struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  ApplicationName string `thrift:"applicationName,2" db:"applicationName" json:"applicationName"`
  AgentStartTime int64 `thrift:"agentStartTime,3" db:"agentStartTime" json:"agentStartTime"`
  TransactionId []byte `thrift:"transactionId,4" db:"transactionId" json:"transactionId"`
  Appkey string `thrift:"appkey,5" db:"appkey" json:"appkey"`
  // unused field # 6
  SpanId int64 `thrift:"spanId,7" db:"spanId" json:"spanId"`
  ParentSpanId int64 `thrift:"parentSpanId,8" db:"parentSpanId" json:"parentSpanId"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  Elapsed int32 `thrift:"elapsed,10" db:"elapsed" json:"elapsed"`
  RPC *string `thrift:"rpc,11" db:"rpc" json:"rpc,omitempty"`
  ServiceType int16 `thrift:"serviceType,12" db:"serviceType" json:"serviceType"`
  EndPoint *string `thrift:"endPoint,13" db:"endPoint" json:"endPoint,omitempty"`
  RemoteAddr *string `thrift:"remoteAddr,14" db:"remoteAddr" json:"remoteAddr,omitempty"`
  Annotations []*TAnnotation `thrift:"annotations,15" db:"annotations" json:"annotations,omitempty"`
  Flag int16 `thrift:"flag,16" db:"flag" json:"flag"`
  Err *int32 `thrift:"err,17" db:"err" json:"err,omitempty"`
  SpanEventList []*TSpanEvent `thrift:"spanEventList,18" db:"spanEventList" json:"spanEventList,omitempty"`
  ParentApplicationName *string `thrift:"parentApplicationName,19" db:"parentApplicationName" json:"parentApplicationName,omitempty"`
  ParentApplicationType *int16 `thrift:"parentApplicationType,20" db:"parentApplicationType" json:"parentApplicationType,omitempty"`
  AcceptorHost *string `thrift:"acceptorHost,21" db:"acceptorHost" json:"acceptorHost,omitempty"`
  // unused fields # 22 to 24
  ApiId *int32 `thrift:"apiId,25" db:"apiId" json:"apiId,omitempty"`
  ExceptionInfo *TIntStringValue `thrift:"exceptionInfo,26" db:"exceptionInfo" json:"exceptionInfo,omitempty"`
  // unused fields # 27 to 29
  ApplicationServiceType *int16 `thrift:"applicationServiceType,30" db:"applicationServiceType" json:"applicationServiceType,omitempty"`
  LoggingTransactionInfo *int8 `thrift:"loggingTransactionInfo,31" db:"loggingTransactionInfo" json:"loggingTransactionInfo,omitempty"`
  HttpPara *string `thrift:"httpPara,32" db:"httpPara" json:"httpPara,omitempty"`
  HttpMethod *string `thrift:"httpMethod,33" db:"httpMethod" json:"httpMethod,omitempty"`
  HttpRequestHeader *string `thrift:"httpRequestHeader,34" db:"httpRequestHeader" json:"httpRequestHeader,omitempty"`
  HttpRequestUserAgent *string `thrift:"httpRequestUserAgent,35" db:"httpRequestUserAgent" json:"httpRequestUserAgent,omitempty"`
  HttpRequestBody *string `thrift:"httpRequestBody,36" db:"httpRequestBody" json:"httpRequestBody,omitempty"`
  HttpResponseBody *string `thrift:"httpResponseBody,37" db:"httpResponseBody" json:"httpResponseBody,omitempty"`
  Retcode *int16 `thrift:"retcode,38" db:"retcode" json:"retcode,omitempty"`
  HttpRequestUID *string `thrift:"httpRequestUID,39" db:"httpRequestUID" json:"httpRequestUID,omitempty"`
  HttpRequestTID *string `thrift:"httpRequestTID,40" db:"httpRequestTID" json:"httpRequestTID,omitempty"`
  PagentId *string `thrift:"pagentId,41" db:"pagentId" json:"pagentId,omitempty"`
  Apidesc *string `thrift:"apidesc,42" db:"apidesc" json:"apidesc,omitempty"`
  HttpResponseHeader *string `thrift:"httpResponseHeader,43" db:"httpResponseHeader" json:"httpResponseHeader,omitempty"`
  UserId *string `thrift:"userId,44" db:"userId" json:"userId,omitempty"`
  SessionId *string `thrift:"sessionId,45" db:"sessionId" json:"sessionId,omitempty"`
  AppId string `thrift:"appId,46" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,47" db:"tenant" json:"tenant"`
  // unused fields # 48 to 49
  ThreadId *int64 `thrift:"threadId,50" db:"threadId" json:"threadId,omitempty"`
  ThreadName *string `thrift:"threadName,51" db:"threadName" json:"threadName,omitempty"`
  HasNextCall *bool `thrift:"hasNextCall,52" db:"hasNextCall" json:"hasNextCall,omitempty"`
}

func NewTSpan() *TSpan {
  return &TSpan{
ParentSpanId: -1,
}
}


func (p *TSpan) GetAgentId() string {
  return p.AgentId
}

func (p *TSpan) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TSpan) GetAgentStartTime() int64 {
  return p.AgentStartTime
}

func (p *TSpan) GetTransactionId() []byte {
  return p.TransactionId
}

func (p *TSpan) GetAppkey() string {
  return p.Appkey
}

func (p *TSpan) GetSpanId() int64 {
  return p.SpanId
}
var TSpan_ParentSpanId_DEFAULT int64 = -1

func (p *TSpan) GetParentSpanId() int64 {
  return p.ParentSpanId
}

func (p *TSpan) GetStartTime() int64 {
  return p.StartTime
}
var TSpan_Elapsed_DEFAULT int32 = 0

func (p *TSpan) GetElapsed() int32 {
  return p.Elapsed
}
var TSpan_RPC_DEFAULT string
func (p *TSpan) GetRPC() string {
  if !p.IsSetRPC() {
    return TSpan_RPC_DEFAULT
  }
return *p.RPC
}

func (p *TSpan) GetServiceType() int16 {
  return p.ServiceType
}
var TSpan_EndPoint_DEFAULT string
func (p *TSpan) GetEndPoint() string {
  if !p.IsSetEndPoint() {
    return TSpan_EndPoint_DEFAULT
  }
return *p.EndPoint
}
var TSpan_RemoteAddr_DEFAULT string
func (p *TSpan) GetRemoteAddr() string {
  if !p.IsSetRemoteAddr() {
    return TSpan_RemoteAddr_DEFAULT
  }
return *p.RemoteAddr
}
var TSpan_Annotations_DEFAULT []*TAnnotation

func (p *TSpan) GetAnnotations() []*TAnnotation {
  return p.Annotations
}
var TSpan_Flag_DEFAULT int16 = 0

func (p *TSpan) GetFlag() int16 {
  return p.Flag
}
var TSpan_Err_DEFAULT int32
func (p *TSpan) GetErr() int32 {
  if !p.IsSetErr() {
    return TSpan_Err_DEFAULT
  }
return *p.Err
}
var TSpan_SpanEventList_DEFAULT []*TSpanEvent

func (p *TSpan) GetSpanEventList() []*TSpanEvent {
  return p.SpanEventList
}
var TSpan_ParentApplicationName_DEFAULT string
func (p *TSpan) GetParentApplicationName() string {
  if !p.IsSetParentApplicationName() {
    return TSpan_ParentApplicationName_DEFAULT
  }
return *p.ParentApplicationName
}
var TSpan_ParentApplicationType_DEFAULT int16
func (p *TSpan) GetParentApplicationType() int16 {
  if !p.IsSetParentApplicationType() {
    return TSpan_ParentApplicationType_DEFAULT
  }
return *p.ParentApplicationType
}
var TSpan_AcceptorHost_DEFAULT string
func (p *TSpan) GetAcceptorHost() string {
  if !p.IsSetAcceptorHost() {
    return TSpan_AcceptorHost_DEFAULT
  }
return *p.AcceptorHost
}
var TSpan_ApiId_DEFAULT int32
func (p *TSpan) GetApiId() int32 {
  if !p.IsSetApiId() {
    return TSpan_ApiId_DEFAULT
  }
return *p.ApiId
}
var TSpan_ExceptionInfo_DEFAULT *TIntStringValue
func (p *TSpan) GetExceptionInfo() *TIntStringValue {
  if !p.IsSetExceptionInfo() {
    return TSpan_ExceptionInfo_DEFAULT
  }
return p.ExceptionInfo
}
var TSpan_ApplicationServiceType_DEFAULT int16
func (p *TSpan) GetApplicationServiceType() int16 {
  if !p.IsSetApplicationServiceType() {
    return TSpan_ApplicationServiceType_DEFAULT
  }
return *p.ApplicationServiceType
}
var TSpan_LoggingTransactionInfo_DEFAULT int8
func (p *TSpan) GetLoggingTransactionInfo() int8 {
  if !p.IsSetLoggingTransactionInfo() {
    return TSpan_LoggingTransactionInfo_DEFAULT
  }
return *p.LoggingTransactionInfo
}
var TSpan_HttpPara_DEFAULT string
func (p *TSpan) GetHttpPara() string {
  if !p.IsSetHttpPara() {
    return TSpan_HttpPara_DEFAULT
  }
return *p.HttpPara
}
var TSpan_HttpMethod_DEFAULT string
func (p *TSpan) GetHttpMethod() string {
  if !p.IsSetHttpMethod() {
    return TSpan_HttpMethod_DEFAULT
  }
return *p.HttpMethod
}
var TSpan_HttpRequestHeader_DEFAULT string
func (p *TSpan) GetHttpRequestHeader() string {
  if !p.IsSetHttpRequestHeader() {
    return TSpan_HttpRequestHeader_DEFAULT
  }
return *p.HttpRequestHeader
}
var TSpan_HttpRequestUserAgent_DEFAULT string
func (p *TSpan) GetHttpRequestUserAgent() string {
  if !p.IsSetHttpRequestUserAgent() {
    return TSpan_HttpRequestUserAgent_DEFAULT
  }
return *p.HttpRequestUserAgent
}
var TSpan_HttpRequestBody_DEFAULT string
func (p *TSpan) GetHttpRequestBody() string {
  if !p.IsSetHttpRequestBody() {
    return TSpan_HttpRequestBody_DEFAULT
  }
return *p.HttpRequestBody
}
var TSpan_HttpResponseBody_DEFAULT string
func (p *TSpan) GetHttpResponseBody() string {
  if !p.IsSetHttpResponseBody() {
    return TSpan_HttpResponseBody_DEFAULT
  }
return *p.HttpResponseBody
}
var TSpan_Retcode_DEFAULT int16
func (p *TSpan) GetRetcode() int16 {
  if !p.IsSetRetcode() {
    return TSpan_Retcode_DEFAULT
  }
return *p.Retcode
}
var TSpan_HttpRequestUID_DEFAULT string
func (p *TSpan) GetHttpRequestUID() string {
  if !p.IsSetHttpRequestUID() {
    return TSpan_HttpRequestUID_DEFAULT
  }
return *p.HttpRequestUID
}
var TSpan_HttpRequestTID_DEFAULT string
func (p *TSpan) GetHttpRequestTID() string {
  if !p.IsSetHttpRequestTID() {
    return TSpan_HttpRequestTID_DEFAULT
  }
return *p.HttpRequestTID
}
var TSpan_PagentId_DEFAULT string
func (p *TSpan) GetPagentId() string {
  if !p.IsSetPagentId() {
    return TSpan_PagentId_DEFAULT
  }
return *p.PagentId
}
var TSpan_Apidesc_DEFAULT string
func (p *TSpan) GetApidesc() string {
  if !p.IsSetApidesc() {
    return TSpan_Apidesc_DEFAULT
  }
return *p.Apidesc
}
var TSpan_HttpResponseHeader_DEFAULT string
func (p *TSpan) GetHttpResponseHeader() string {
  if !p.IsSetHttpResponseHeader() {
    return TSpan_HttpResponseHeader_DEFAULT
  }
return *p.HttpResponseHeader
}
var TSpan_UserId_DEFAULT string
func (p *TSpan) GetUserId() string {
  if !p.IsSetUserId() {
    return TSpan_UserId_DEFAULT
  }
return *p.UserId
}
var TSpan_SessionId_DEFAULT string
func (p *TSpan) GetSessionId() string {
  if !p.IsSetSessionId() {
    return TSpan_SessionId_DEFAULT
  }
return *p.SessionId
}

func (p *TSpan) GetAppId() string {
  return p.AppId
}

func (p *TSpan) GetTenant() string {
  return p.Tenant
}
var TSpan_ThreadId_DEFAULT int64
func (p *TSpan) GetThreadId() int64 {
  if !p.IsSetThreadId() {
    return TSpan_ThreadId_DEFAULT
  }
return *p.ThreadId
}
var TSpan_ThreadName_DEFAULT string
func (p *TSpan) GetThreadName() string {
  if !p.IsSetThreadName() {
    return TSpan_ThreadName_DEFAULT
  }
return *p.ThreadName
}
var TSpan_HasNextCall_DEFAULT bool
func (p *TSpan) GetHasNextCall() bool {
  if !p.IsSetHasNextCall() {
    return TSpan_HasNextCall_DEFAULT
  }
return *p.HasNextCall
}
func (p *TSpan) IsSetParentSpanId() bool {
  return p.ParentSpanId != TSpan_ParentSpanId_DEFAULT
}

func (p *TSpan) IsSetElapsed() bool {
  return p.Elapsed != TSpan_Elapsed_DEFAULT
}

func (p *TSpan) IsSetRPC() bool {
  return p.RPC != nil
}

func (p *TSpan) IsSetEndPoint() bool {
  return p.EndPoint != nil
}

func (p *TSpan) IsSetRemoteAddr() bool {
  return p.RemoteAddr != nil
}

func (p *TSpan) IsSetAnnotations() bool {
  return p.Annotations != nil
}

func (p *TSpan) IsSetFlag() bool {
  return p.Flag != TSpan_Flag_DEFAULT
}

func (p *TSpan) IsSetErr() bool {
  return p.Err != nil
}

func (p *TSpan) IsSetSpanEventList() bool {
  return p.SpanEventList != nil
}

func (p *TSpan) IsSetParentApplicationName() bool {
  return p.ParentApplicationName != nil
}

func (p *TSpan) IsSetParentApplicationType() bool {
  return p.ParentApplicationType != nil
}

func (p *TSpan) IsSetAcceptorHost() bool {
  return p.AcceptorHost != nil
}

func (p *TSpan) IsSetApiId() bool {
  return p.ApiId != nil
}

func (p *TSpan) IsSetExceptionInfo() bool {
  return p.ExceptionInfo != nil
}

func (p *TSpan) IsSetApplicationServiceType() bool {
  return p.ApplicationServiceType != nil
}

func (p *TSpan) IsSetLoggingTransactionInfo() bool {
  return p.LoggingTransactionInfo != nil
}

func (p *TSpan) IsSetHttpPara() bool {
  return p.HttpPara != nil
}

func (p *TSpan) IsSetHttpMethod() bool {
  return p.HttpMethod != nil
}

func (p *TSpan) IsSetHttpRequestHeader() bool {
  return p.HttpRequestHeader != nil
}

func (p *TSpan) IsSetHttpRequestUserAgent() bool {
  return p.HttpRequestUserAgent != nil
}

func (p *TSpan) IsSetHttpRequestBody() bool {
  return p.HttpRequestBody != nil
}

func (p *TSpan) IsSetHttpResponseBody() bool {
  return p.HttpResponseBody != nil
}

func (p *TSpan) IsSetRetcode() bool {
  return p.Retcode != nil
}

func (p *TSpan) IsSetHttpRequestUID() bool {
  return p.HttpRequestUID != nil
}

func (p *TSpan) IsSetHttpRequestTID() bool {
  return p.HttpRequestTID != nil
}

func (p *TSpan) IsSetPagentId() bool {
  return p.PagentId != nil
}

func (p *TSpan) IsSetApidesc() bool {
  return p.Apidesc != nil
}

func (p *TSpan) IsSetHttpResponseHeader() bool {
  return p.HttpResponseHeader != nil
}

func (p *TSpan) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *TSpan) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *TSpan) IsSetThreadId() bool {
  return p.ThreadId != nil
}

func (p *TSpan) IsSetThreadName() bool {
  return p.ThreadName != nil
}

func (p *TSpan) IsSetHasNextCall() bool {
  return p.HasNextCall != nil
}

func (p *TSpan) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField52(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpan)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TSpan)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TSpan)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TSpan)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TransactionId = v
}
  return nil
}

func (p *TSpan)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TSpan)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SpanId = v
}
  return nil
}

func (p *TSpan)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ParentSpanId = v
}
  return nil
}

func (p *TSpan)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TSpan)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Elapsed = v
}
  return nil
}

func (p *TSpan)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RPC = &v
}
  return nil
}

func (p *TSpan)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TSpan)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.EndPoint = &v
}
  return nil
}

func (p *TSpan)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RemoteAddr = &v
}
  return nil
}

func (p *TSpan)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAnnotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem24 := &TAnnotation{}
    if err := _elem24.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem24), err)
    }
    p.Annotations = append(p.Annotations, _elem24)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpan)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *TSpan)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Err = &v
}
  return nil
}

func (p *TSpan)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSpanEvent, 0, size)
  p.SpanEventList =  tSlice
  for i := 0; i < size; i ++ {
    _elem25 := &TSpanEvent{
    Depth: -1,

    NextSpanId: -1,
}
    if err := _elem25.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem25), err)
    }
    p.SpanEventList = append(p.SpanEventList, _elem25)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpan)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ParentApplicationName = &v
}
  return nil
}

func (p *TSpan)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ParentApplicationType = &v
}
  return nil
}

func (p *TSpan)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.AcceptorHost = &v
}
  return nil
}

func (p *TSpan)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ApiId = &v
}
  return nil
}

func (p *TSpan)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExceptionInfo = &TIntStringValue{}
  if err := p.ExceptionInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionInfo), err)
  }
  return nil
}

func (p *TSpan)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ApplicationServiceType = &v
}
  return nil
}

func (p *TSpan)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  temp := int8(v)
  p.LoggingTransactionInfo = &temp
}
  return nil
}

func (p *TSpan)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.HttpPara = &v
}
  return nil
}

func (p *TSpan)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.HttpMethod = &v
}
  return nil
}

func (p *TSpan)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.HttpRequestHeader = &v
}
  return nil
}

func (p *TSpan)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.HttpRequestUserAgent = &v
}
  return nil
}

func (p *TSpan)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.HttpRequestBody = &v
}
  return nil
}

func (p *TSpan)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.HttpResponseBody = &v
}
  return nil
}

func (p *TSpan)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.Retcode = &v
}
  return nil
}

func (p *TSpan)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.HttpRequestUID = &v
}
  return nil
}

func (p *TSpan)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.HttpRequestTID = &v
}
  return nil
}

func (p *TSpan)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.PagentId = &v
}
  return nil
}

func (p *TSpan)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.Apidesc = &v
}
  return nil
}

func (p *TSpan)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.HttpResponseHeader = &v
}
  return nil
}

func (p *TSpan)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.UserId = &v
}
  return nil
}

func (p *TSpan)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.SessionId = &v
}
  return nil
}

func (p *TSpan)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TSpan)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TSpan)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.ThreadId = &v
}
  return nil
}

func (p *TSpan)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.ThreadName = &v
}
  return nil
}

func (p *TSpan)  ReadField52(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 52: ", err)
} else {
  p.HasNextCall = &v
}
  return nil
}

func (p *TSpan) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSpan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField52(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpan) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TSpan) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationName: ", p), err) }
  return err
}

func (p *TSpan) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentStartTime: ", p), err) }
  return err
}

func (p *TSpan) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transactionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TransactionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transactionId: ", p), err) }
  return err
}

func (p *TSpan) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appkey: ", p), err) }
  return err
}

func (p *TSpan) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spanId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SpanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spanId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spanId: ", p), err) }
  return err
}

func (p *TSpan) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentSpanId() {
    if err := oprot.WriteFieldBegin(ctx, "parentSpanId", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:parentSpanId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.ParentSpanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentSpanId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:parentSpanId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *TSpan) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetElapsed() {
    if err := oprot.WriteFieldBegin(ctx, "elapsed", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:elapsed: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.Elapsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.elapsed (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:elapsed: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRPC() {
    if err := oprot.WriteFieldBegin(ctx, "rpc", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rpc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RPC)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rpc (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rpc: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceType: ", p), err) }
  return err
}

func (p *TSpan) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndPoint() {
    if err := oprot.WriteFieldBegin(ctx, "endPoint", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:endPoint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndPoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endPoint (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:endPoint: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRemoteAddr() {
    if err := oprot.WriteFieldBegin(ctx, "remoteAddr", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:remoteAddr: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RemoteAddr)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remoteAddr (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:remoteAddr: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnnotations() {
    if err := oprot.WriteFieldBegin(ctx, "annotations", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:annotations: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Annotations)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Annotations {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:annotations: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFlag() {
    if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I16, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:flag: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(p.Flag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.flag (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:flag: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.I32, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:err: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Err)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.err (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:err: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpanEventList() {
    if err := oprot.WriteFieldBegin(ctx, "spanEventList", thrift.LIST, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:spanEventList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SpanEventList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SpanEventList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:spanEventList: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentApplicationName() {
    if err := oprot.WriteFieldBegin(ctx, "parentApplicationName", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:parentApplicationName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ParentApplicationName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentApplicationName (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:parentApplicationName: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentApplicationType() {
    if err := oprot.WriteFieldBegin(ctx, "parentApplicationType", thrift.I16, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:parentApplicationType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ParentApplicationType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentApplicationType (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:parentApplicationType: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAcceptorHost() {
    if err := oprot.WriteFieldBegin(ctx, "acceptorHost", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:acceptorHost: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AcceptorHost)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.acceptorHost (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:acceptorHost: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApiId() {
    if err := oprot.WriteFieldBegin(ctx, "apiId", thrift.I32, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:apiId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ApiId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.apiId (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:apiId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionInfo() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionInfo", thrift.STRUCT, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:exceptionInfo: ", p), err) }
    if err := p.ExceptionInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:exceptionInfo: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "applicationServiceType", thrift.I16, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:applicationServiceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ApplicationServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationServiceType (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:applicationServiceType: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLoggingTransactionInfo() {
    if err := oprot.WriteFieldBegin(ctx, "loggingTransactionInfo", thrift.BYTE, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:loggingTransactionInfo: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.LoggingTransactionInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.loggingTransactionInfo (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:loggingTransactionInfo: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpPara() {
    if err := oprot.WriteFieldBegin(ctx, "httpPara", thrift.STRING, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:httpPara: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpPara)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpPara (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:httpPara: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpMethod() {
    if err := oprot.WriteFieldBegin(ctx, "httpMethod", thrift.STRING, 33); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:httpMethod: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpMethod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpMethod (33) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 33:httpMethod: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestHeader() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestHeader", thrift.STRING, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:httpRequestHeader: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestHeader)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestHeader (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:httpRequestHeader: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestUserAgent() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestUserAgent", thrift.STRING, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:httpRequestUserAgent: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestUserAgent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestUserAgent (35) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:httpRequestUserAgent: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestBody() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestBody", thrift.STRING, 36); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:httpRequestBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestBody (36) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 36:httpRequestBody: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpResponseBody() {
    if err := oprot.WriteFieldBegin(ctx, "httpResponseBody", thrift.STRING, 37); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:httpResponseBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpResponseBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpResponseBody (37) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 37:httpResponseBody: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRetcode() {
    if err := oprot.WriteFieldBegin(ctx, "retcode", thrift.I16, 38); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:retcode: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Retcode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retcode (38) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 38:retcode: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestUID() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestUID", thrift.STRING, 39); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:httpRequestUID: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestUID (39) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 39:httpRequestUID: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestTID() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestTID", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:httpRequestTID: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestTID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestTID (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:httpRequestTID: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPagentId() {
    if err := oprot.WriteFieldBegin(ctx, "pagentId", thrift.STRING, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:pagentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PagentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pagentId (41) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:pagentId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApidesc() {
    if err := oprot.WriteFieldBegin(ctx, "apidesc", thrift.STRING, 42); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:apidesc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Apidesc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.apidesc (42) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 42:apidesc: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpResponseHeader() {
    if err := oprot.WriteFieldBegin(ctx, "httpResponseHeader", thrift.STRING, 43); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:httpResponseHeader: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpResponseHeader)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpResponseHeader (43) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 43:httpResponseHeader: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin(ctx, "userId", thrift.STRING, 44); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:userId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (44) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 44:userId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionId() {
    if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:sessionId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SessionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sessionId (45) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:sessionId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:appId: ", p), err) }
  return err
}

func (p *TSpan) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:tenant: ", p), err) }
  return err
}

func (p *TSpan) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadId() {
    if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.I64, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:threadId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ThreadId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadId (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:threadId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadName() {
    if err := oprot.WriteFieldBegin(ctx, "threadName", thrift.STRING, 51); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:threadName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThreadName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadName (51) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 51:threadName: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField52(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHasNextCall() {
    if err := oprot.WriteFieldBegin(ctx, "hasNextCall", thrift.BOOL, 52); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:hasNextCall: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.HasNextCall)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hasNextCall (52) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 52:hasNextCall: ", p), err) }
  }
  return err
}

func (p *TSpan) Equals(other *TSpan) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if bytes.Compare(p.TransactionId, other.TransactionId) != 0 { return false }
  if p.Appkey != other.Appkey { return false }
  if p.SpanId != other.SpanId { return false }
  if p.ParentSpanId != other.ParentSpanId { return false }
  if p.StartTime != other.StartTime { return false }
  if p.Elapsed != other.Elapsed { return false }
  if p.RPC != other.RPC {
    if p.RPC == nil || other.RPC == nil {
      return false
    }
    if (*p.RPC) != (*other.RPC) { return false }
  }
  if p.ServiceType != other.ServiceType { return false }
  if p.EndPoint != other.EndPoint {
    if p.EndPoint == nil || other.EndPoint == nil {
      return false
    }
    if (*p.EndPoint) != (*other.EndPoint) { return false }
  }
  if p.RemoteAddr != other.RemoteAddr {
    if p.RemoteAddr == nil || other.RemoteAddr == nil {
      return false
    }
    if (*p.RemoteAddr) != (*other.RemoteAddr) { return false }
  }
  if len(p.Annotations) != len(other.Annotations) { return false }
  for i, _tgt := range p.Annotations {
    _src26 := other.Annotations[i]
    if !_tgt.Equals(_src26) { return false }
  }
  if p.Flag != other.Flag { return false }
  if p.Err != other.Err {
    if p.Err == nil || other.Err == nil {
      return false
    }
    if (*p.Err) != (*other.Err) { return false }
  }
  if len(p.SpanEventList) != len(other.SpanEventList) { return false }
  for i, _tgt := range p.SpanEventList {
    _src27 := other.SpanEventList[i]
    if !_tgt.Equals(_src27) { return false }
  }
  if p.ParentApplicationName != other.ParentApplicationName {
    if p.ParentApplicationName == nil || other.ParentApplicationName == nil {
      return false
    }
    if (*p.ParentApplicationName) != (*other.ParentApplicationName) { return false }
  }
  if p.ParentApplicationType != other.ParentApplicationType {
    if p.ParentApplicationType == nil || other.ParentApplicationType == nil {
      return false
    }
    if (*p.ParentApplicationType) != (*other.ParentApplicationType) { return false }
  }
  if p.AcceptorHost != other.AcceptorHost {
    if p.AcceptorHost == nil || other.AcceptorHost == nil {
      return false
    }
    if (*p.AcceptorHost) != (*other.AcceptorHost) { return false }
  }
  if p.ApiId != other.ApiId {
    if p.ApiId == nil || other.ApiId == nil {
      return false
    }
    if (*p.ApiId) != (*other.ApiId) { return false }
  }
  if !p.ExceptionInfo.Equals(other.ExceptionInfo) { return false }
  if p.ApplicationServiceType != other.ApplicationServiceType {
    if p.ApplicationServiceType == nil || other.ApplicationServiceType == nil {
      return false
    }
    if (*p.ApplicationServiceType) != (*other.ApplicationServiceType) { return false }
  }
  if p.LoggingTransactionInfo != other.LoggingTransactionInfo {
    if p.LoggingTransactionInfo == nil || other.LoggingTransactionInfo == nil {
      return false
    }
    if (*p.LoggingTransactionInfo) != (*other.LoggingTransactionInfo) { return false }
  }
  if p.HttpPara != other.HttpPara {
    if p.HttpPara == nil || other.HttpPara == nil {
      return false
    }
    if (*p.HttpPara) != (*other.HttpPara) { return false }
  }
  if p.HttpMethod != other.HttpMethod {
    if p.HttpMethod == nil || other.HttpMethod == nil {
      return false
    }
    if (*p.HttpMethod) != (*other.HttpMethod) { return false }
  }
  if p.HttpRequestHeader != other.HttpRequestHeader {
    if p.HttpRequestHeader == nil || other.HttpRequestHeader == nil {
      return false
    }
    if (*p.HttpRequestHeader) != (*other.HttpRequestHeader) { return false }
  }
  if p.HttpRequestUserAgent != other.HttpRequestUserAgent {
    if p.HttpRequestUserAgent == nil || other.HttpRequestUserAgent == nil {
      return false
    }
    if (*p.HttpRequestUserAgent) != (*other.HttpRequestUserAgent) { return false }
  }
  if p.HttpRequestBody != other.HttpRequestBody {
    if p.HttpRequestBody == nil || other.HttpRequestBody == nil {
      return false
    }
    if (*p.HttpRequestBody) != (*other.HttpRequestBody) { return false }
  }
  if p.HttpResponseBody != other.HttpResponseBody {
    if p.HttpResponseBody == nil || other.HttpResponseBody == nil {
      return false
    }
    if (*p.HttpResponseBody) != (*other.HttpResponseBody) { return false }
  }
  if p.Retcode != other.Retcode {
    if p.Retcode == nil || other.Retcode == nil {
      return false
    }
    if (*p.Retcode) != (*other.Retcode) { return false }
  }
  if p.HttpRequestUID != other.HttpRequestUID {
    if p.HttpRequestUID == nil || other.HttpRequestUID == nil {
      return false
    }
    if (*p.HttpRequestUID) != (*other.HttpRequestUID) { return false }
  }
  if p.HttpRequestTID != other.HttpRequestTID {
    if p.HttpRequestTID == nil || other.HttpRequestTID == nil {
      return false
    }
    if (*p.HttpRequestTID) != (*other.HttpRequestTID) { return false }
  }
  if p.PagentId != other.PagentId {
    if p.PagentId == nil || other.PagentId == nil {
      return false
    }
    if (*p.PagentId) != (*other.PagentId) { return false }
  }
  if p.Apidesc != other.Apidesc {
    if p.Apidesc == nil || other.Apidesc == nil {
      return false
    }
    if (*p.Apidesc) != (*other.Apidesc) { return false }
  }
  if p.HttpResponseHeader != other.HttpResponseHeader {
    if p.HttpResponseHeader == nil || other.HttpResponseHeader == nil {
      return false
    }
    if (*p.HttpResponseHeader) != (*other.HttpResponseHeader) { return false }
  }
  if p.UserId != other.UserId {
    if p.UserId == nil || other.UserId == nil {
      return false
    }
    if (*p.UserId) != (*other.UserId) { return false }
  }
  if p.SessionId != other.SessionId {
    if p.SessionId == nil || other.SessionId == nil {
      return false
    }
    if (*p.SessionId) != (*other.SessionId) { return false }
  }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.ThreadId != other.ThreadId {
    if p.ThreadId == nil || other.ThreadId == nil {
      return false
    }
    if (*p.ThreadId) != (*other.ThreadId) { return false }
  }
  if p.ThreadName != other.ThreadName {
    if p.ThreadName == nil || other.ThreadName == nil {
      return false
    }
    if (*p.ThreadName) != (*other.ThreadName) { return false }
  }
  if p.HasNextCall != other.HasNextCall {
    if p.HasNextCall == nil || other.HasNextCall == nil {
      return false
    }
    if (*p.HasNextCall) != (*other.HasNextCall) { return false }
  }
  return true
}

func (p *TSpan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpan(%+v)", *p)
}

func (p *TSpan) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - ApplicationName
//  - AgentStartTime
//  - ServiceType
//  - TransactionId
//  - Appkey
//  - SpanId
//  - EndPoint
//  - SpanEventList
//  - ApplicationServiceType
//  - AppId
//  - Tenant
//  - ThreadId
//  - ThreadName
//  - UserId
//  - SessionId
//  - StartTime
type TSpanChunk struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  ApplicationName string `thrift:"applicationName,2" db:"applicationName" json:"applicationName"`
  AgentStartTime int64 `thrift:"agentStartTime,3" db:"agentStartTime" json:"agentStartTime"`
  ServiceType int16 `thrift:"serviceType,4" db:"serviceType" json:"serviceType"`
  TransactionId []byte `thrift:"transactionId,5" db:"transactionId" json:"transactionId"`
  Appkey string `thrift:"appkey,6" db:"appkey" json:"appkey"`
  // unused field # 7
  SpanId int64 `thrift:"spanId,8" db:"spanId" json:"spanId"`
  EndPoint *string `thrift:"endPoint,9" db:"endPoint" json:"endPoint,omitempty"`
  SpanEventList []*TSpanEvent `thrift:"spanEventList,10" db:"spanEventList" json:"spanEventList"`
  ApplicationServiceType *int16 `thrift:"applicationServiceType,11" db:"applicationServiceType" json:"applicationServiceType,omitempty"`
  AppId string `thrift:"appId,12" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,13" db:"tenant" json:"tenant"`
  // unused field # 14
  ThreadId *int64 `thrift:"threadId,15" db:"threadId" json:"threadId,omitempty"`
  ThreadName *string `thrift:"threadName,16" db:"threadName" json:"threadName,omitempty"`
  UserId *string `thrift:"userId,17" db:"userId" json:"userId,omitempty"`
  SessionId *string `thrift:"sessionId,18" db:"sessionId" json:"sessionId,omitempty"`
  StartTime *int64 `thrift:"startTime,19" db:"startTime" json:"startTime,omitempty"`
}

func NewTSpanChunk() *TSpanChunk {
  return &TSpanChunk{}
}


func (p *TSpanChunk) GetAgentId() string {
  return p.AgentId
}

func (p *TSpanChunk) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TSpanChunk) GetAgentStartTime() int64 {
  return p.AgentStartTime
}

func (p *TSpanChunk) GetServiceType() int16 {
  return p.ServiceType
}

func (p *TSpanChunk) GetTransactionId() []byte {
  return p.TransactionId
}

func (p *TSpanChunk) GetAppkey() string {
  return p.Appkey
}

func (p *TSpanChunk) GetSpanId() int64 {
  return p.SpanId
}
var TSpanChunk_EndPoint_DEFAULT string
func (p *TSpanChunk) GetEndPoint() string {
  if !p.IsSetEndPoint() {
    return TSpanChunk_EndPoint_DEFAULT
  }
return *p.EndPoint
}

func (p *TSpanChunk) GetSpanEventList() []*TSpanEvent {
  return p.SpanEventList
}
var TSpanChunk_ApplicationServiceType_DEFAULT int16
func (p *TSpanChunk) GetApplicationServiceType() int16 {
  if !p.IsSetApplicationServiceType() {
    return TSpanChunk_ApplicationServiceType_DEFAULT
  }
return *p.ApplicationServiceType
}

func (p *TSpanChunk) GetAppId() string {
  return p.AppId
}

func (p *TSpanChunk) GetTenant() string {
  return p.Tenant
}
var TSpanChunk_ThreadId_DEFAULT int64
func (p *TSpanChunk) GetThreadId() int64 {
  if !p.IsSetThreadId() {
    return TSpanChunk_ThreadId_DEFAULT
  }
return *p.ThreadId
}
var TSpanChunk_ThreadName_DEFAULT string
func (p *TSpanChunk) GetThreadName() string {
  if !p.IsSetThreadName() {
    return TSpanChunk_ThreadName_DEFAULT
  }
return *p.ThreadName
}
var TSpanChunk_UserId_DEFAULT string
func (p *TSpanChunk) GetUserId() string {
  if !p.IsSetUserId() {
    return TSpanChunk_UserId_DEFAULT
  }
return *p.UserId
}
var TSpanChunk_SessionId_DEFAULT string
func (p *TSpanChunk) GetSessionId() string {
  if !p.IsSetSessionId() {
    return TSpanChunk_SessionId_DEFAULT
  }
return *p.SessionId
}
var TSpanChunk_StartTime_DEFAULT int64
func (p *TSpanChunk) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return TSpanChunk_StartTime_DEFAULT
  }
return *p.StartTime
}
func (p *TSpanChunk) IsSetEndPoint() bool {
  return p.EndPoint != nil
}

func (p *TSpanChunk) IsSetApplicationServiceType() bool {
  return p.ApplicationServiceType != nil
}

func (p *TSpanChunk) IsSetThreadId() bool {
  return p.ThreadId != nil
}

func (p *TSpanChunk) IsSetThreadName() bool {
  return p.ThreadName != nil
}

func (p *TSpanChunk) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *TSpanChunk) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *TSpanChunk) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *TSpanChunk) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpanChunk)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TSpanChunk)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TSpanChunk)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TSpanChunk)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TransactionId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TSpanChunk)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SpanId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EndPoint = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSpanEvent, 0, size)
  p.SpanEventList =  tSlice
  for i := 0; i < size; i ++ {
    _elem28 := &TSpanEvent{
    Depth: -1,

    NextSpanId: -1,
}
    if err := _elem28.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem28), err)
    }
    p.SpanEventList = append(p.SpanEventList, _elem28)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpanChunk)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ApplicationServiceType = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TSpanChunk)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ThreadId = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ThreadName = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.UserId = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.SessionId = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *TSpanChunk) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSpanChunk"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpanChunk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationName: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentStartTime: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceType: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transactionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TransactionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transactionId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:appkey: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:spanId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SpanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spanId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:spanId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndPoint() {
    if err := oprot.WriteFieldBegin(ctx, "endPoint", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endPoint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndPoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endPoint (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endPoint: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanEventList", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:spanEventList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SpanEventList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpanEventList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:spanEventList: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "applicationServiceType", thrift.I16, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:applicationServiceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ApplicationServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationServiceType (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:applicationServiceType: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:appId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:tenant: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadId() {
    if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:threadId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ThreadId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadId (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:threadId: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadName() {
    if err := oprot.WriteFieldBegin(ctx, "threadName", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:threadName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThreadName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadName (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:threadName: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin(ctx, "userId", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:userId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:userId: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionId() {
    if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:sessionId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SessionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sessionId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:sessionId: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:startTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTime (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:startTime: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) Equals(other *TSpanChunk) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if p.ServiceType != other.ServiceType { return false }
  if bytes.Compare(p.TransactionId, other.TransactionId) != 0 { return false }
  if p.Appkey != other.Appkey { return false }
  if p.SpanId != other.SpanId { return false }
  if p.EndPoint != other.EndPoint {
    if p.EndPoint == nil || other.EndPoint == nil {
      return false
    }
    if (*p.EndPoint) != (*other.EndPoint) { return false }
  }
  if len(p.SpanEventList) != len(other.SpanEventList) { return false }
  for i, _tgt := range p.SpanEventList {
    _src29 := other.SpanEventList[i]
    if !_tgt.Equals(_src29) { return false }
  }
  if p.ApplicationServiceType != other.ApplicationServiceType {
    if p.ApplicationServiceType == nil || other.ApplicationServiceType == nil {
      return false
    }
    if (*p.ApplicationServiceType) != (*other.ApplicationServiceType) { return false }
  }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.ThreadId != other.ThreadId {
    if p.ThreadId == nil || other.ThreadId == nil {
      return false
    }
    if (*p.ThreadId) != (*other.ThreadId) { return false }
  }
  if p.ThreadName != other.ThreadName {
    if p.ThreadName == nil || other.ThreadName == nil {
      return false
    }
    if (*p.ThreadName) != (*other.ThreadName) { return false }
  }
  if p.UserId != other.UserId {
    if p.UserId == nil || other.UserId == nil {
      return false
    }
    if (*p.UserId) != (*other.UserId) { return false }
  }
  if p.SessionId != other.SessionId {
    if p.SessionId == nil || other.SessionId == nil {
      return false
    }
    if (*p.SessionId) != (*other.SessionId) { return false }
  }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  return true
}

func (p *TSpanChunk) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpanChunk(%+v)", *p)
}

func (p *TSpanChunk) Validate() error {
  return nil
}
// Attributes:
//  - Name
//  - Code
//  - Desc
//  - IsInternalMethod
//  - IsRpcClient
//  - IsRecordStatistics
//  - IsUnknown
//  - IsUser
//  - IsTerminal
//  - IsQueue
//  - IsIncludeDestinationId
type TServiceType struct {
  Name string `thrift:"name,1" db:"name" json:"name"`
  Code int16 `thrift:"code,2" db:"code" json:"code"`
  Desc string `thrift:"desc,3" db:"desc" json:"desc"`
  IsInternalMethod bool `thrift:"isInternalMethod,4" db:"isInternalMethod" json:"isInternalMethod"`
  IsRpcClient bool `thrift:"isRpcClient,5" db:"isRpcClient" json:"isRpcClient"`
  IsRecordStatistics bool `thrift:"isRecordStatistics,6" db:"isRecordStatistics" json:"isRecordStatistics"`
  IsUnknown bool `thrift:"isUnknown,7" db:"isUnknown" json:"isUnknown"`
  IsUser bool `thrift:"isUser,8" db:"isUser" json:"isUser"`
  IsTerminal bool `thrift:"isTerminal,9" db:"isTerminal" json:"isTerminal"`
  IsQueue bool `thrift:"isQueue,10" db:"isQueue" json:"isQueue"`
  IsIncludeDestinationId bool `thrift:"isIncludeDestinationId,11" db:"isIncludeDestinationId" json:"isIncludeDestinationId"`
}

func NewTServiceType() *TServiceType {
  return &TServiceType{}
}


func (p *TServiceType) GetName() string {
  return p.Name
}

func (p *TServiceType) GetCode() int16 {
  return p.Code
}

func (p *TServiceType) GetDesc() string {
  return p.Desc
}

func (p *TServiceType) GetIsInternalMethod() bool {
  return p.IsInternalMethod
}

func (p *TServiceType) GetIsRpcClient() bool {
  return p.IsRpcClient
}

func (p *TServiceType) GetIsRecordStatistics() bool {
  return p.IsRecordStatistics
}

func (p *TServiceType) GetIsUnknown() bool {
  return p.IsUnknown
}

func (p *TServiceType) GetIsUser() bool {
  return p.IsUser
}

func (p *TServiceType) GetIsTerminal() bool {
  return p.IsTerminal
}

func (p *TServiceType) GetIsQueue() bool {
  return p.IsQueue
}

func (p *TServiceType) GetIsIncludeDestinationId() bool {
  return p.IsIncludeDestinationId
}
func (p *TServiceType) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServiceType)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Name = v
}
  return nil
}

func (p *TServiceType)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Code = v
}
  return nil
}

func (p *TServiceType)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Desc = v
}
  return nil
}

func (p *TServiceType)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.IsInternalMethod = v
}
  return nil
}

func (p *TServiceType)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.IsRpcClient = v
}
  return nil
}

func (p *TServiceType)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.IsRecordStatistics = v
}
  return nil
}

func (p *TServiceType)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.IsUnknown = v
}
  return nil
}

func (p *TServiceType)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.IsUser = v
}
  return nil
}

func (p *TServiceType)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.IsTerminal = v
}
  return nil
}

func (p *TServiceType)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.IsQueue = v
}
  return nil
}

func (p *TServiceType)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.IsIncludeDestinationId = v
}
  return nil
}

func (p *TServiceType) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TServiceType"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServiceType) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:name: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Name)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.name (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:name: ", p), err) }
  return err
}

func (p *TServiceType) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "code", thrift.I16, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:code: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.Code)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.code (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:code: ", p), err) }
  return err
}

func (p *TServiceType) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "desc", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:desc: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Desc)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.desc (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:desc: ", p), err) }
  return err
}

func (p *TServiceType) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isInternalMethod", thrift.BOOL, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:isInternalMethod: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsInternalMethod)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isInternalMethod (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:isInternalMethod: ", p), err) }
  return err
}

func (p *TServiceType) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isRpcClient", thrift.BOOL, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:isRpcClient: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsRpcClient)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRpcClient (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:isRpcClient: ", p), err) }
  return err
}

func (p *TServiceType) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isRecordStatistics", thrift.BOOL, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:isRecordStatistics: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsRecordStatistics)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isRecordStatistics (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:isRecordStatistics: ", p), err) }
  return err
}

func (p *TServiceType) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isUnknown", thrift.BOOL, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:isUnknown: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsUnknown)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isUnknown (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:isUnknown: ", p), err) }
  return err
}

func (p *TServiceType) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isUser", thrift.BOOL, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:isUser: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsUser)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isUser (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:isUser: ", p), err) }
  return err
}

func (p *TServiceType) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isTerminal", thrift.BOOL, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:isTerminal: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsTerminal)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isTerminal (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:isTerminal: ", p), err) }
  return err
}

func (p *TServiceType) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isQueue", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:isQueue: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsQueue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isQueue (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:isQueue: ", p), err) }
  return err
}

func (p *TServiceType) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "isIncludeDestinationId", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:isIncludeDestinationId: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.IsIncludeDestinationId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.isIncludeDestinationId (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:isIncludeDestinationId: ", p), err) }
  return err
}

func (p *TServiceType) Equals(other *TServiceType) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Name != other.Name { return false }
  if p.Code != other.Code { return false }
  if p.Desc != other.Desc { return false }
  if p.IsInternalMethod != other.IsInternalMethod { return false }
  if p.IsRpcClient != other.IsRpcClient { return false }
  if p.IsRecordStatistics != other.IsRecordStatistics { return false }
  if p.IsUnknown != other.IsUnknown { return false }
  if p.IsUser != other.IsUser { return false }
  if p.IsTerminal != other.IsTerminal { return false }
  if p.IsQueue != other.IsQueue { return false }
  if p.IsIncludeDestinationId != other.IsIncludeDestinationId { return false }
  return true
}

func (p *TServiceType) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServiceType(%+v)", *p)
}

func (p *TServiceType) Validate() error {
  return nil
}
// Attributes:
//  - AppKey
//  - AgentID
//  - AppId
//  - Tenant
//  - ServiceTypeList
type TServiceTypeChunk struct {
  AppKey string `thrift:"app_key,1" db:"app_key" json:"app_key"`
  AgentID string `thrift:"agent_id,2" db:"agent_id" json:"agent_id"`
  AppId string `thrift:"appId,3" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,4" db:"tenant" json:"tenant"`
  // unused fields # 5 to 9
  ServiceTypeList []*TServiceType `thrift:"serviceTypeList,10" db:"serviceTypeList" json:"serviceTypeList"`
}

func NewTServiceTypeChunk() *TServiceTypeChunk {
  return &TServiceTypeChunk{}
}


func (p *TServiceTypeChunk) GetAppKey() string {
  return p.AppKey
}

func (p *TServiceTypeChunk) GetAgentID() string {
  return p.AgentID
}

func (p *TServiceTypeChunk) GetAppId() string {
  return p.AppId
}

func (p *TServiceTypeChunk) GetTenant() string {
  return p.Tenant
}

func (p *TServiceTypeChunk) GetServiceTypeList() []*TServiceType {
  return p.ServiceTypeList
}
func (p *TServiceTypeChunk) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TServiceTypeChunk)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TServiceTypeChunk)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentID = v
}
  return nil
}

func (p *TServiceTypeChunk)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TServiceTypeChunk)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TServiceTypeChunk)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TServiceType, 0, size)
  p.ServiceTypeList =  tSlice
  for i := 0; i < size; i ++ {
    _elem30 := &TServiceType{}
    if err := _elem30.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem30), err)
    }
    p.ServiceTypeList = append(p.ServiceTypeList, _elem30)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TServiceTypeChunk) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TServiceTypeChunk"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TServiceTypeChunk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "app_key", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:app_key: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.app_key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:app_key: ", p), err) }
  return err
}

func (p *TServiceTypeChunk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_id", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agent_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_id (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agent_id: ", p), err) }
  return err
}

func (p *TServiceTypeChunk) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appId: ", p), err) }
  return err
}

func (p *TServiceTypeChunk) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:tenant: ", p), err) }
  return err
}

func (p *TServiceTypeChunk) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceTypeList", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:serviceTypeList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ServiceTypeList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ServiceTypeList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:serviceTypeList: ", p), err) }
  return err
}

func (p *TServiceTypeChunk) Equals(other *TServiceTypeChunk) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AppKey != other.AppKey { return false }
  if p.AgentID != other.AgentID { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if len(p.ServiceTypeList) != len(other.ServiceTypeList) { return false }
  for i, _tgt := range p.ServiceTypeList {
    _src31 := other.ServiceTypeList[i]
    if !_tgt.Equals(_src31) { return false }
  }
  return true
}

func (p *TServiceTypeChunk) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TServiceTypeChunk(%+v)", *p)
}

func (p *TServiceTypeChunk) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - AgentStartTime
//  - StringId
//  - StringValue
type TStringMetaData struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  AgentStartTime int64 `thrift:"agentStartTime,2" db:"agentStartTime" json:"agentStartTime"`
  // unused field # 3
  StringId int32 `thrift:"stringId,4" db:"stringId" json:"stringId"`
  StringValue string `thrift:"stringValue,5" db:"stringValue" json:"stringValue"`
}

func NewTStringMetaData() *TStringMetaData {
  return &TStringMetaData{}
}


func (p *TStringMetaData) GetAgentId() string {
  return p.AgentId
}

func (p *TStringMetaData) GetAgentStartTime() int64 {
  return p.AgentStartTime
}

func (p *TStringMetaData) GetStringId() int32 {
  return p.StringId
}

func (p *TStringMetaData) GetStringValue() string {
  return p.StringValue
}
func (p *TStringMetaData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TStringMetaData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TStringMetaData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TStringMetaData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.StringId = v
}
  return nil
}

func (p *TStringMetaData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.StringValue = v
}
  return nil
}

func (p *TStringMetaData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TStringMetaData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TStringMetaData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TStringMetaData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentStartTime: ", p), err) }
  return err
}

func (p *TStringMetaData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:stringId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StringId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:stringId: ", p), err) }
  return err
}

func (p *TStringMetaData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:stringValue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StringValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stringValue (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:stringValue: ", p), err) }
  return err
}

func (p *TStringMetaData) Equals(other *TStringMetaData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if p.StringId != other.StringId { return false }
  if p.StringValue != other.StringValue { return false }
  return true
}

func (p *TStringMetaData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TStringMetaData(%+v)", *p)
}

func (p *TStringMetaData) Validate() error {
  return nil
}
// Attributes:
//  - Appkey
//  - Template
//  - Hash
//  - AppId
//  - Tenant
type TSqlMetaData struct {
  Appkey string `thrift:"appkey,1" db:"appkey" json:"appkey"`
  Template string `thrift:"template,2" db:"template" json:"template"`
  Hash string `thrift:"hash,3" db:"hash" json:"hash"`
  AppId string `thrift:"appId,4" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,5" db:"tenant" json:"tenant"`
}

func NewTSqlMetaData() *TSqlMetaData {
  return &TSqlMetaData{}
}


func (p *TSqlMetaData) GetAppkey() string {
  return p.Appkey
}

func (p *TSqlMetaData) GetTemplate() string {
  return p.Template
}

func (p *TSqlMetaData) GetHash() string {
  return p.Hash
}

func (p *TSqlMetaData) GetAppId() string {
  return p.AppId
}

func (p *TSqlMetaData) GetTenant() string {
  return p.Tenant
}
func (p *TSqlMetaData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSqlMetaData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TSqlMetaData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Template = v
}
  return nil
}

func (p *TSqlMetaData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Hash = v
}
  return nil
}

func (p *TSqlMetaData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TSqlMetaData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TSqlMetaData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSqlMetaData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSqlMetaData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:appkey: ", p), err) }
  return err
}

func (p *TSqlMetaData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "template", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:template: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Template)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.template (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:template: ", p), err) }
  return err
}

func (p *TSqlMetaData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "hash", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:hash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Hash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.hash (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:hash: ", p), err) }
  return err
}

func (p *TSqlMetaData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:appId: ", p), err) }
  return err
}

func (p *TSqlMetaData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:tenant: ", p), err) }
  return err
}

func (p *TSqlMetaData) Equals(other *TSqlMetaData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Appkey != other.Appkey { return false }
  if p.Template != other.Template { return false }
  if p.Hash != other.Hash { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  return true
}

func (p *TSqlMetaData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSqlMetaData(%+v)", *p)
}

func (p *TSqlMetaData) Validate() error {
  return nil
}
// Attributes:
//  - Host
//  - Dbhost
//  - Db
//  - Table
//  - Status
//  - Method
//  - Dur
//  - AgentID
//  - StartTime
//  - Owner
//  - URL
//  - Clause
//  - BindValue
//  - TransactionId
//  - SpanId
//  - AppKey
//  - Err
//  - PspanId
//  - PagentId
//  - Dbtype
//  - AgentStartTime
//  - SqlId
//  - Outputs
//  - AppId
//  - Tenant
type TSqlMetaData2Api struct {
  Host string `thrift:"host,1" db:"host" json:"host"`
  Dbhost string `thrift:"dbhost,2" db:"dbhost" json:"dbhost"`
  Db string `thrift:"db,3" db:"db" json:"db"`
  Table string `thrift:"table,4" db:"table" json:"table"`
  Status string `thrift:"status,5" db:"status" json:"status"`
  Method string `thrift:"method,6" db:"method" json:"method"`
  Dur int64 `thrift:"dur,7" db:"dur" json:"dur"`
  AgentID string `thrift:"agent_id,8" db:"agent_id" json:"agent_id"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  Owner string `thrift:"owner,10" db:"owner" json:"owner"`
  URL string `thrift:"url,11" db:"url" json:"url"`
  Clause string `thrift:"clause,12" db:"clause" json:"clause"`
  BindValue string `thrift:"bindValue,13" db:"bindValue" json:"bindValue"`
  TransactionId string `thrift:"transactionId,14" db:"transactionId" json:"transactionId"`
  SpanId string `thrift:"spanId,15" db:"spanId" json:"spanId"`
  AppKey string `thrift:"appKey,16" db:"appKey" json:"appKey"`
  Err string `thrift:"err,17" db:"err" json:"err"`
  PspanId string `thrift:"pspanId,18" db:"pspanId" json:"pspanId"`
  PagentId *string `thrift:"pagentId,19" db:"pagentId" json:"pagentId,omitempty"`
  Dbtype string `thrift:"dbtype,20" db:"dbtype" json:"dbtype"`
  AgentStartTime int64 `thrift:"agentStartTime,21" db:"agentStartTime" json:"agentStartTime"`
  SqlId int32 `thrift:"sqlId,22" db:"sqlId" json:"sqlId"`
  Outputs string `thrift:"outputs,23" db:"outputs" json:"outputs"`
  AppId string `thrift:"appId,24" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,25" db:"tenant" json:"tenant"`
}

func NewTSqlMetaData2Api() *TSqlMetaData2Api {
  return &TSqlMetaData2Api{}
}


func (p *TSqlMetaData2Api) GetHost() string {
  return p.Host
}

func (p *TSqlMetaData2Api) GetDbhost() string {
  return p.Dbhost
}

func (p *TSqlMetaData2Api) GetDb() string {
  return p.Db
}

func (p *TSqlMetaData2Api) GetTable() string {
  return p.Table
}

func (p *TSqlMetaData2Api) GetStatus() string {
  return p.Status
}

func (p *TSqlMetaData2Api) GetMethod() string {
  return p.Method
}

func (p *TSqlMetaData2Api) GetDur() int64 {
  return p.Dur
}

func (p *TSqlMetaData2Api) GetAgentID() string {
  return p.AgentID
}

func (p *TSqlMetaData2Api) GetStartTime() int64 {
  return p.StartTime
}

func (p *TSqlMetaData2Api) GetOwner() string {
  return p.Owner
}

func (p *TSqlMetaData2Api) GetURL() string {
  return p.URL
}

func (p *TSqlMetaData2Api) GetClause() string {
  return p.Clause
}

func (p *TSqlMetaData2Api) GetBindValue() string {
  return p.BindValue
}

func (p *TSqlMetaData2Api) GetTransactionId() string {
  return p.TransactionId
}

func (p *TSqlMetaData2Api) GetSpanId() string {
  return p.SpanId
}

func (p *TSqlMetaData2Api) GetAppKey() string {
  return p.AppKey
}

func (p *TSqlMetaData2Api) GetErr() string {
  return p.Err
}

func (p *TSqlMetaData2Api) GetPspanId() string {
  return p.PspanId
}
var TSqlMetaData2Api_PagentId_DEFAULT string
func (p *TSqlMetaData2Api) GetPagentId() string {
  if !p.IsSetPagentId() {
    return TSqlMetaData2Api_PagentId_DEFAULT
  }
return *p.PagentId
}

func (p *TSqlMetaData2Api) GetDbtype() string {
  return p.Dbtype
}

func (p *TSqlMetaData2Api) GetAgentStartTime() int64 {
  return p.AgentStartTime
}

func (p *TSqlMetaData2Api) GetSqlId() int32 {
  return p.SqlId
}

func (p *TSqlMetaData2Api) GetOutputs() string {
  return p.Outputs
}

func (p *TSqlMetaData2Api) GetAppId() string {
  return p.AppId
}

func (p *TSqlMetaData2Api) GetTenant() string {
  return p.Tenant
}
func (p *TSqlMetaData2Api) IsSetPagentId() bool {
  return p.PagentId != nil
}

func (p *TSqlMetaData2Api) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 22:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField22(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 23:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField23(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 24:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField24(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSqlMetaData2Api)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Host = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbhost = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Table = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Method = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Dur = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.AgentID = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Owner = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.URL = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.Clause = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.BindValue = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.TransactionId = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.SpanId = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.AppKey = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Err = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.PspanId = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.PagentId = &v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Dbtype = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField22(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 22: ", err)
} else {
  p.SqlId = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField23(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 23: ", err)
} else {
  p.Outputs = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField24(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 24: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TSqlMetaData2Api)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TSqlMetaData2Api) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSqlMetaData2Api"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField22(ctx, oprot); err != nil { return err }
    if err := p.writeField23(ctx, oprot); err != nil { return err }
    if err := p.writeField24(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSqlMetaData2Api) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "host", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:host: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Host)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.host (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:host: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbhost", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbhost: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbhost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbhost (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbhost: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:db: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "table", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:table: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Table)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.table (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:table: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:status: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:status: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:method: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Method)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.method (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:method: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dur", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:dur: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Dur)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dur (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:dur: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agent_id", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:agent_id: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentID)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agent_id (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:agent_id: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "owner", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:owner: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Owner)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.owner (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:owner: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:url: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.URL)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.url (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:url: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "clause", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:clause: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Clause)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.clause (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:clause: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "bindValue", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:bindValue: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.BindValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.bindValue (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:bindValue: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRING, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:transactionId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.TransactionId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionId (14) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:transactionId: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.STRING, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:spanId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SpanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spanId (15) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:spanId: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appKey", thrift.STRING, 16); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:appKey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppKey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appKey (16) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 16:appKey: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRING, 17); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:err: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Err)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.err (17) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 17:err: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "pspanId", thrift.STRING, 18); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:pspanId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.PspanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.pspanId (18) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 18:pspanId: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPagentId() {
    if err := oprot.WriteFieldBegin(ctx, "pagentId", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:pagentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PagentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pagentId (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:pagentId: ", p), err) }
  }
  return err
}

func (p *TSqlMetaData2Api) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbtype", thrift.STRING, 20); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:dbtype: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbtype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbtype (20) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 20:dbtype: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 21); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (21) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 21:agentStartTime: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField22(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sqlId", thrift.I32, 22); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 22:sqlId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.SqlId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sqlId (22) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 22:sqlId: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField23(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "outputs", thrift.STRING, 23); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 23:outputs: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Outputs)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.outputs (23) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 23:outputs: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField24(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 24); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 24:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (24) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 24:appId: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 25); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (25) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 25:tenant: ", p), err) }
  return err
}

func (p *TSqlMetaData2Api) Equals(other *TSqlMetaData2Api) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Host != other.Host { return false }
  if p.Dbhost != other.Dbhost { return false }
  if p.Db != other.Db { return false }
  if p.Table != other.Table { return false }
  if p.Status != other.Status { return false }
  if p.Method != other.Method { return false }
  if p.Dur != other.Dur { return false }
  if p.AgentID != other.AgentID { return false }
  if p.StartTime != other.StartTime { return false }
  if p.Owner != other.Owner { return false }
  if p.URL != other.URL { return false }
  if p.Clause != other.Clause { return false }
  if p.BindValue != other.BindValue { return false }
  if p.TransactionId != other.TransactionId { return false }
  if p.SpanId != other.SpanId { return false }
  if p.AppKey != other.AppKey { return false }
  if p.Err != other.Err { return false }
  if p.PspanId != other.PspanId { return false }
  if p.PagentId != other.PagentId {
    if p.PagentId == nil || other.PagentId == nil {
      return false
    }
    if (*p.PagentId) != (*other.PagentId) { return false }
  }
  if p.Dbtype != other.Dbtype { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if p.SqlId != other.SqlId { return false }
  if p.Outputs != other.Outputs { return false }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  return true
}

func (p *TSqlMetaData2Api) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSqlMetaData2Api(%+v)", *p)
}

func (p *TSqlMetaData2Api) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - AgentStartTime
//  - Appkey
//  - ApiId
//  - ApiInfo
//  - Line
//  - AppId
//  - Tenant
//  - Type
type TApiMetaData struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  AgentStartTime int64 `thrift:"agentStartTime,2" db:"agentStartTime" json:"agentStartTime"`
  Appkey *string `thrift:"appkey,3" db:"appkey" json:"appkey,omitempty"`
  ApiId int32 `thrift:"apiId,4" db:"apiId" json:"apiId"`
  ApiInfo string `thrift:"apiInfo,5" db:"apiInfo" json:"apiInfo"`
  Line *int32 `thrift:"line,6" db:"line" json:"line,omitempty"`
  AppId string `thrift:"appId,7" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,8" db:"tenant" json:"tenant"`
  // unused field # 9
  Type *int32 `thrift:"type,10" db:"type" json:"type,omitempty"`
}

func NewTApiMetaData() *TApiMetaData {
  return &TApiMetaData{}
}


func (p *TApiMetaData) GetAgentId() string {
  return p.AgentId
}

func (p *TApiMetaData) GetAgentStartTime() int64 {
  return p.AgentStartTime
}
var TApiMetaData_Appkey_DEFAULT string
func (p *TApiMetaData) GetAppkey() string {
  if !p.IsSetAppkey() {
    return TApiMetaData_Appkey_DEFAULT
  }
return *p.Appkey
}

func (p *TApiMetaData) GetApiId() int32 {
  return p.ApiId
}

func (p *TApiMetaData) GetApiInfo() string {
  return p.ApiInfo
}
var TApiMetaData_Line_DEFAULT int32
func (p *TApiMetaData) GetLine() int32 {
  if !p.IsSetLine() {
    return TApiMetaData_Line_DEFAULT
  }
return *p.Line
}

func (p *TApiMetaData) GetAppId() string {
  return p.AppId
}

func (p *TApiMetaData) GetTenant() string {
  return p.Tenant
}
var TApiMetaData_Type_DEFAULT int32
func (p *TApiMetaData) GetType() int32 {
  if !p.IsSetType() {
    return TApiMetaData_Type_DEFAULT
  }
return *p.Type
}
func (p *TApiMetaData) IsSetAppkey() bool {
  return p.Appkey != nil
}

func (p *TApiMetaData) IsSetLine() bool {
  return p.Line != nil
}

func (p *TApiMetaData) IsSetType() bool {
  return p.Type != nil
}

func (p *TApiMetaData) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TApiMetaData)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TApiMetaData)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TApiMetaData)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Appkey = &v
}
  return nil
}

func (p *TApiMetaData)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ApiId = v
}
  return nil
}

func (p *TApiMetaData)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ApiInfo = v
}
  return nil
}

func (p *TApiMetaData)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Line = &v
}
  return nil
}

func (p *TApiMetaData)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TApiMetaData)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TApiMetaData)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Type = &v
}
  return nil
}

func (p *TApiMetaData) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TApiMetaData"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TApiMetaData) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TApiMetaData) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentStartTime: ", p), err) }
  return err
}

func (p *TApiMetaData) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAppkey() {
    if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:appkey: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Appkey)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.appkey (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:appkey: ", p), err) }
  }
  return err
}

func (p *TApiMetaData) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apiId", thrift.I32, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:apiId: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ApiId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:apiId: ", p), err) }
  return err
}

func (p *TApiMetaData) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apiInfo", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:apiInfo: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApiInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiInfo (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:apiInfo: ", p), err) }
  return err
}

func (p *TApiMetaData) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLine() {
    if err := oprot.WriteFieldBegin(ctx, "line", thrift.I32, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:line: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Line)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.line (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:line: ", p), err) }
  }
  return err
}

func (p *TApiMetaData) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:appId: ", p), err) }
  return err
}

func (p *TApiMetaData) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:tenant: ", p), err) }
  return err
}

func (p *TApiMetaData) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetType() {
    if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:type: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Type)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.type (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:type: ", p), err) }
  }
  return err
}

func (p *TApiMetaData) Equals(other *TApiMetaData) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if p.Appkey != other.Appkey {
    if p.Appkey == nil || other.Appkey == nil {
      return false
    }
    if (*p.Appkey) != (*other.Appkey) { return false }
  }
  if p.ApiId != other.ApiId { return false }
  if p.ApiInfo != other.ApiInfo { return false }
  if p.Line != other.Line {
    if p.Line == nil || other.Line == nil {
      return false
    }
    if (*p.Line) != (*other.Line) { return false }
  }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.Type != other.Type {
    if p.Type == nil || other.Type == nil {
      return false
    }
    if (*p.Type) != (*other.Type) { return false }
  }
  return true
}

func (p *TApiMetaData) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TApiMetaData(%+v)", *p)
}

func (p *TApiMetaData) Validate() error {
  return nil
}
// Attributes:
//  - Success
//  - Message
type TResult_ struct {
  Success bool `thrift:"success,1" db:"success" json:"success"`
  Message *string `thrift:"message,2" db:"message" json:"message,omitempty"`
}

func NewTResult_() *TResult_ {
  return &TResult_{}
}


func (p *TResult_) GetSuccess() bool {
  return p.Success
}
var TResult__Message_DEFAULT string
func (p *TResult_) GetMessage() string {
  if !p.IsSetMessage() {
    return TResult__Message_DEFAULT
  }
return *p.Message
}
func (p *TResult_) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TResult_) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TResult_)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Success = v
}
  return nil
}

func (p *TResult_)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *TResult_) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TResult"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TResult_) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "success", thrift.BOOL, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:success: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Success)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.success (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:success: ", p), err) }
  return err
}

func (p *TResult_) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:message: ", p), err) }
  }
  return err
}

func (p *TResult_) Equals(other *TResult_) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Success != other.Success { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  return true
}

func (p *TResult_) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TResult_(%+v)", *p)
}

func (p *TResult_) Validate() error {
  return nil
}
