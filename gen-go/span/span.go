// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package span

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

// Attributes:
//  - AgentId
//  - ApplicationName
//  - AgentStartTime
//  - TransactionId
//  - Appkey
//  - SpanId
//  - ParentSpanId
//  - StartTime
//  - Elapsed
//  - RPC
//  - ServiceType
//  - EndPoint
//  - RemoteAddr
//  - Annotations
//  - Flag
//  - Err
//  - SpanEventList
//  - ParentApplicationName
//  - ParentApplicationType
//  - AcceptorHost
//  - ApiId
//  - ExceptionInfo
//  - ApplicationServiceType
//  - LoggingTransactionInfo
//  - HttpPara
//  - HttpMethod
//  - HttpRequestHeader
//  - HttpRequestUserAgent
//  - HttpRequestBody
//  - HttpResponseBody
//  - Retcode
//  - HttpRequestUID
//  - HttpRequestTID
//  - PagentId
//  - Apidesc
//  - HttpResponseHeader
//  - UserId
//  - SessionId
//  - AppId
//  - Tenant
//  - ThreadId
//  - ThreadName
//  - HasNextCall
//  - Traceparent
//  - Tracestate
//  - ParentId
type TSpan struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  ApplicationName string `thrift:"applicationName,2" db:"applicationName" json:"applicationName"`
  AgentStartTime int64 `thrift:"agentStartTime,3" db:"agentStartTime" json:"agentStartTime"`
  TransactionId []byte `thrift:"transactionId,4" db:"transactionId" json:"transactionId"`
  Appkey string `thrift:"appkey,5" db:"appkey" json:"appkey"`
  // unused field # 6
  SpanId int64 `thrift:"spanId,7" db:"spanId" json:"spanId"`
  ParentSpanId int64 `thrift:"parentSpanId,8" db:"parentSpanId" json:"parentSpanId"`
  StartTime int64 `thrift:"startTime,9" db:"startTime" json:"startTime"`
  Elapsed int32 `thrift:"elapsed,10" db:"elapsed" json:"elapsed"`
  RPC *string `thrift:"rpc,11" db:"rpc" json:"rpc,omitempty"`
  ServiceType int16 `thrift:"serviceType,12" db:"serviceType" json:"serviceType"`
  EndPoint *string `thrift:"endPoint,13" db:"endPoint" json:"endPoint,omitempty"`
  RemoteAddr *string `thrift:"remoteAddr,14" db:"remoteAddr" json:"remoteAddr,omitempty"`
  Annotations []*TAnnotation `thrift:"annotations,15" db:"annotations" json:"annotations,omitempty"`
  Flag int16 `thrift:"flag,16" db:"flag" json:"flag"`
  Err *int32 `thrift:"err,17" db:"err" json:"err,omitempty"`
  SpanEventList []*TSpanEvent `thrift:"spanEventList,18" db:"spanEventList" json:"spanEventList,omitempty"`
  ParentApplicationName *string `thrift:"parentApplicationName,19" db:"parentApplicationName" json:"parentApplicationName,omitempty"`
  ParentApplicationType *int16 `thrift:"parentApplicationType,20" db:"parentApplicationType" json:"parentApplicationType,omitempty"`
  AcceptorHost *string `thrift:"acceptorHost,21" db:"acceptorHost" json:"acceptorHost,omitempty"`
  // unused fields # 22 to 24
  ApiId *int32 `thrift:"apiId,25" db:"apiId" json:"apiId,omitempty"`
  ExceptionInfo *TIntStringValue `thrift:"exceptionInfo,26" db:"exceptionInfo" json:"exceptionInfo,omitempty"`
  // unused fields # 27 to 29
  ApplicationServiceType *int16 `thrift:"applicationServiceType,30" db:"applicationServiceType" json:"applicationServiceType,omitempty"`
  LoggingTransactionInfo *int8 `thrift:"loggingTransactionInfo,31" db:"loggingTransactionInfo" json:"loggingTransactionInfo,omitempty"`
  HttpPara *string `thrift:"httpPara,32" db:"httpPara" json:"httpPara,omitempty"`
  HttpMethod *string `thrift:"httpMethod,33" db:"httpMethod" json:"httpMethod,omitempty"`
  HttpRequestHeader *string `thrift:"httpRequestHeader,34" db:"httpRequestHeader" json:"httpRequestHeader,omitempty"`
  HttpRequestUserAgent *string `thrift:"httpRequestUserAgent,35" db:"httpRequestUserAgent" json:"httpRequestUserAgent,omitempty"`
  HttpRequestBody *string `thrift:"httpRequestBody,36" db:"httpRequestBody" json:"httpRequestBody,omitempty"`
  HttpResponseBody *string `thrift:"httpResponseBody,37" db:"httpResponseBody" json:"httpResponseBody,omitempty"`
  Retcode *int16 `thrift:"retcode,38" db:"retcode" json:"retcode,omitempty"`
  HttpRequestUID *string `thrift:"httpRequestUID,39" db:"httpRequestUID" json:"httpRequestUID,omitempty"`
  HttpRequestTID *string `thrift:"httpRequestTID,40" db:"httpRequestTID" json:"httpRequestTID,omitempty"`
  PagentId *string `thrift:"pagentId,41" db:"pagentId" json:"pagentId,omitempty"`
  Apidesc *string `thrift:"apidesc,42" db:"apidesc" json:"apidesc,omitempty"`
  HttpResponseHeader *string `thrift:"httpResponseHeader,43" db:"httpResponseHeader" json:"httpResponseHeader,omitempty"`
  UserId *string `thrift:"userId,44" db:"userId" json:"userId,omitempty"`
  SessionId *string `thrift:"sessionId,45" db:"sessionId" json:"sessionId,omitempty"`
  AppId string `thrift:"appId,46" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,47" db:"tenant" json:"tenant"`
  // unused fields # 48 to 49
  ThreadId *int64 `thrift:"threadId,50" db:"threadId" json:"threadId,omitempty"`
  ThreadName *string `thrift:"threadName,51" db:"threadName" json:"threadName,omitempty"`
  HasNextCall *bool `thrift:"hasNextCall,52" db:"hasNextCall" json:"hasNextCall,omitempty"`
  Traceparent *string `thrift:"traceparent,53" db:"traceparent" json:"traceparent,omitempty"`
  Tracestate *string `thrift:"tracestate,54" db:"tracestate" json:"tracestate,omitempty"`
  ParentId string `thrift:"parentId,55" db:"parentId" json:"parentId"`
}

func NewTSpan() *TSpan {
  return &TSpan{
ParentSpanId: -1,

ParentId: "0000000000000000",
}
}


func (p *TSpan) GetAgentId() string {
  return p.AgentId
}

func (p *TSpan) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TSpan) GetAgentStartTime() int64 {
  return p.AgentStartTime
}

func (p *TSpan) GetTransactionId() []byte {
  return p.TransactionId
}

func (p *TSpan) GetAppkey() string {
  return p.Appkey
}

func (p *TSpan) GetSpanId() int64 {
  return p.SpanId
}
var TSpan_ParentSpanId_DEFAULT int64 = -1

func (p *TSpan) GetParentSpanId() int64 {
  return p.ParentSpanId
}

func (p *TSpan) GetStartTime() int64 {
  return p.StartTime
}
var TSpan_Elapsed_DEFAULT int32 = 0

func (p *TSpan) GetElapsed() int32 {
  return p.Elapsed
}
var TSpan_RPC_DEFAULT string
func (p *TSpan) GetRPC() string {
  if !p.IsSetRPC() {
    return TSpan_RPC_DEFAULT
  }
return *p.RPC
}

func (p *TSpan) GetServiceType() int16 {
  return p.ServiceType
}
var TSpan_EndPoint_DEFAULT string
func (p *TSpan) GetEndPoint() string {
  if !p.IsSetEndPoint() {
    return TSpan_EndPoint_DEFAULT
  }
return *p.EndPoint
}
var TSpan_RemoteAddr_DEFAULT string
func (p *TSpan) GetRemoteAddr() string {
  if !p.IsSetRemoteAddr() {
    return TSpan_RemoteAddr_DEFAULT
  }
return *p.RemoteAddr
}
var TSpan_Annotations_DEFAULT []*TAnnotation

func (p *TSpan) GetAnnotations() []*TAnnotation {
  return p.Annotations
}
var TSpan_Flag_DEFAULT int16 = 0

func (p *TSpan) GetFlag() int16 {
  return p.Flag
}
var TSpan_Err_DEFAULT int32
func (p *TSpan) GetErr() int32 {
  if !p.IsSetErr() {
    return TSpan_Err_DEFAULT
  }
return *p.Err
}
var TSpan_SpanEventList_DEFAULT []*TSpanEvent

func (p *TSpan) GetSpanEventList() []*TSpanEvent {
  return p.SpanEventList
}
var TSpan_ParentApplicationName_DEFAULT string
func (p *TSpan) GetParentApplicationName() string {
  if !p.IsSetParentApplicationName() {
    return TSpan_ParentApplicationName_DEFAULT
  }
return *p.ParentApplicationName
}
var TSpan_ParentApplicationType_DEFAULT int16
func (p *TSpan) GetParentApplicationType() int16 {
  if !p.IsSetParentApplicationType() {
    return TSpan_ParentApplicationType_DEFAULT
  }
return *p.ParentApplicationType
}
var TSpan_AcceptorHost_DEFAULT string
func (p *TSpan) GetAcceptorHost() string {
  if !p.IsSetAcceptorHost() {
    return TSpan_AcceptorHost_DEFAULT
  }
return *p.AcceptorHost
}
var TSpan_ApiId_DEFAULT int32
func (p *TSpan) GetApiId() int32 {
  if !p.IsSetApiId() {
    return TSpan_ApiId_DEFAULT
  }
return *p.ApiId
}
var TSpan_ExceptionInfo_DEFAULT *TIntStringValue
func (p *TSpan) GetExceptionInfo() *TIntStringValue {
  if !p.IsSetExceptionInfo() {
    return TSpan_ExceptionInfo_DEFAULT
  }
return p.ExceptionInfo
}
var TSpan_ApplicationServiceType_DEFAULT int16
func (p *TSpan) GetApplicationServiceType() int16 {
  if !p.IsSetApplicationServiceType() {
    return TSpan_ApplicationServiceType_DEFAULT
  }
return *p.ApplicationServiceType
}
var TSpan_LoggingTransactionInfo_DEFAULT int8
func (p *TSpan) GetLoggingTransactionInfo() int8 {
  if !p.IsSetLoggingTransactionInfo() {
    return TSpan_LoggingTransactionInfo_DEFAULT
  }
return *p.LoggingTransactionInfo
}
var TSpan_HttpPara_DEFAULT string
func (p *TSpan) GetHttpPara() string {
  if !p.IsSetHttpPara() {
    return TSpan_HttpPara_DEFAULT
  }
return *p.HttpPara
}
var TSpan_HttpMethod_DEFAULT string
func (p *TSpan) GetHttpMethod() string {
  if !p.IsSetHttpMethod() {
    return TSpan_HttpMethod_DEFAULT
  }
return *p.HttpMethod
}
var TSpan_HttpRequestHeader_DEFAULT string
func (p *TSpan) GetHttpRequestHeader() string {
  if !p.IsSetHttpRequestHeader() {
    return TSpan_HttpRequestHeader_DEFAULT
  }
return *p.HttpRequestHeader
}
var TSpan_HttpRequestUserAgent_DEFAULT string
func (p *TSpan) GetHttpRequestUserAgent() string {
  if !p.IsSetHttpRequestUserAgent() {
    return TSpan_HttpRequestUserAgent_DEFAULT
  }
return *p.HttpRequestUserAgent
}
var TSpan_HttpRequestBody_DEFAULT string
func (p *TSpan) GetHttpRequestBody() string {
  if !p.IsSetHttpRequestBody() {
    return TSpan_HttpRequestBody_DEFAULT
  }
return *p.HttpRequestBody
}
var TSpan_HttpResponseBody_DEFAULT string
func (p *TSpan) GetHttpResponseBody() string {
  if !p.IsSetHttpResponseBody() {
    return TSpan_HttpResponseBody_DEFAULT
  }
return *p.HttpResponseBody
}
var TSpan_Retcode_DEFAULT int16
func (p *TSpan) GetRetcode() int16 {
  if !p.IsSetRetcode() {
    return TSpan_Retcode_DEFAULT
  }
return *p.Retcode
}
var TSpan_HttpRequestUID_DEFAULT string
func (p *TSpan) GetHttpRequestUID() string {
  if !p.IsSetHttpRequestUID() {
    return TSpan_HttpRequestUID_DEFAULT
  }
return *p.HttpRequestUID
}
var TSpan_HttpRequestTID_DEFAULT string
func (p *TSpan) GetHttpRequestTID() string {
  if !p.IsSetHttpRequestTID() {
    return TSpan_HttpRequestTID_DEFAULT
  }
return *p.HttpRequestTID
}
var TSpan_PagentId_DEFAULT string
func (p *TSpan) GetPagentId() string {
  if !p.IsSetPagentId() {
    return TSpan_PagentId_DEFAULT
  }
return *p.PagentId
}
var TSpan_Apidesc_DEFAULT string
func (p *TSpan) GetApidesc() string {
  if !p.IsSetApidesc() {
    return TSpan_Apidesc_DEFAULT
  }
return *p.Apidesc
}
var TSpan_HttpResponseHeader_DEFAULT string
func (p *TSpan) GetHttpResponseHeader() string {
  if !p.IsSetHttpResponseHeader() {
    return TSpan_HttpResponseHeader_DEFAULT
  }
return *p.HttpResponseHeader
}
var TSpan_UserId_DEFAULT string
func (p *TSpan) GetUserId() string {
  if !p.IsSetUserId() {
    return TSpan_UserId_DEFAULT
  }
return *p.UserId
}
var TSpan_SessionId_DEFAULT string
func (p *TSpan) GetSessionId() string {
  if !p.IsSetSessionId() {
    return TSpan_SessionId_DEFAULT
  }
return *p.SessionId
}

func (p *TSpan) GetAppId() string {
  return p.AppId
}

func (p *TSpan) GetTenant() string {
  return p.Tenant
}
var TSpan_ThreadId_DEFAULT int64
func (p *TSpan) GetThreadId() int64 {
  if !p.IsSetThreadId() {
    return TSpan_ThreadId_DEFAULT
  }
return *p.ThreadId
}
var TSpan_ThreadName_DEFAULT string
func (p *TSpan) GetThreadName() string {
  if !p.IsSetThreadName() {
    return TSpan_ThreadName_DEFAULT
  }
return *p.ThreadName
}
var TSpan_HasNextCall_DEFAULT bool
func (p *TSpan) GetHasNextCall() bool {
  if !p.IsSetHasNextCall() {
    return TSpan_HasNextCall_DEFAULT
  }
return *p.HasNextCall
}
var TSpan_Traceparent_DEFAULT string
func (p *TSpan) GetTraceparent() string {
  if !p.IsSetTraceparent() {
    return TSpan_Traceparent_DEFAULT
  }
return *p.Traceparent
}
var TSpan_Tracestate_DEFAULT string
func (p *TSpan) GetTracestate() string {
  if !p.IsSetTracestate() {
    return TSpan_Tracestate_DEFAULT
  }
return *p.Tracestate
}
var TSpan_ParentId_DEFAULT string = "0000000000000000"

func (p *TSpan) GetParentId() string {
  return p.ParentId
}
func (p *TSpan) IsSetParentSpanId() bool {
  return p.ParentSpanId != TSpan_ParentSpanId_DEFAULT
}

func (p *TSpan) IsSetElapsed() bool {
  return p.Elapsed != TSpan_Elapsed_DEFAULT
}

func (p *TSpan) IsSetRPC() bool {
  return p.RPC != nil
}

func (p *TSpan) IsSetEndPoint() bool {
  return p.EndPoint != nil
}

func (p *TSpan) IsSetRemoteAddr() bool {
  return p.RemoteAddr != nil
}

func (p *TSpan) IsSetAnnotations() bool {
  return p.Annotations != nil
}

func (p *TSpan) IsSetFlag() bool {
  return p.Flag != TSpan_Flag_DEFAULT
}

func (p *TSpan) IsSetErr() bool {
  return p.Err != nil
}

func (p *TSpan) IsSetSpanEventList() bool {
  return p.SpanEventList != nil
}

func (p *TSpan) IsSetParentApplicationName() bool {
  return p.ParentApplicationName != nil
}

func (p *TSpan) IsSetParentApplicationType() bool {
  return p.ParentApplicationType != nil
}

func (p *TSpan) IsSetAcceptorHost() bool {
  return p.AcceptorHost != nil
}

func (p *TSpan) IsSetApiId() bool {
  return p.ApiId != nil
}

func (p *TSpan) IsSetExceptionInfo() bool {
  return p.ExceptionInfo != nil
}

func (p *TSpan) IsSetApplicationServiceType() bool {
  return p.ApplicationServiceType != nil
}

func (p *TSpan) IsSetLoggingTransactionInfo() bool {
  return p.LoggingTransactionInfo != nil
}

func (p *TSpan) IsSetHttpPara() bool {
  return p.HttpPara != nil
}

func (p *TSpan) IsSetHttpMethod() bool {
  return p.HttpMethod != nil
}

func (p *TSpan) IsSetHttpRequestHeader() bool {
  return p.HttpRequestHeader != nil
}

func (p *TSpan) IsSetHttpRequestUserAgent() bool {
  return p.HttpRequestUserAgent != nil
}

func (p *TSpan) IsSetHttpRequestBody() bool {
  return p.HttpRequestBody != nil
}

func (p *TSpan) IsSetHttpResponseBody() bool {
  return p.HttpResponseBody != nil
}

func (p *TSpan) IsSetRetcode() bool {
  return p.Retcode != nil
}

func (p *TSpan) IsSetHttpRequestUID() bool {
  return p.HttpRequestUID != nil
}

func (p *TSpan) IsSetHttpRequestTID() bool {
  return p.HttpRequestTID != nil
}

func (p *TSpan) IsSetPagentId() bool {
  return p.PagentId != nil
}

func (p *TSpan) IsSetApidesc() bool {
  return p.Apidesc != nil
}

func (p *TSpan) IsSetHttpResponseHeader() bool {
  return p.HttpResponseHeader != nil
}

func (p *TSpan) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *TSpan) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *TSpan) IsSetThreadId() bool {
  return p.ThreadId != nil
}

func (p *TSpan) IsSetThreadName() bool {
  return p.ThreadName != nil
}

func (p *TSpan) IsSetHasNextCall() bool {
  return p.HasNextCall != nil
}

func (p *TSpan) IsSetTraceparent() bool {
  return p.Traceparent != nil
}

func (p *TSpan) IsSetTracestate() bool {
  return p.Tracestate != nil
}

func (p *TSpan) IsSetParentId() bool {
  return p.ParentId != TSpan_ParentId_DEFAULT
}

func (p *TSpan) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 21:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField21(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 35:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField35(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 36:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField36(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 37:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField37(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 38:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField38(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 39:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField39(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 42:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField42(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 43:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField43(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 44:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField44(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 45:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField45(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 46:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField46(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 47:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField47(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 50:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField50(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 52:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField52(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 53:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField53(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 54:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField54(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 55:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField55(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpan)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TSpan)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TSpan)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TSpan)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.TransactionId = v
}
  return nil
}

func (p *TSpan)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TSpan)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SpanId = v
}
  return nil
}

func (p *TSpan)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.ParentSpanId = v
}
  return nil
}

func (p *TSpan)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TSpan)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Elapsed = v
}
  return nil
}

func (p *TSpan)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RPC = &v
}
  return nil
}

func (p *TSpan)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TSpan)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.EndPoint = &v
}
  return nil
}

func (p *TSpan)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 14: ", err)
} else {
  p.RemoteAddr = &v
}
  return nil
}

func (p *TSpan)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAnnotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem0 := &TAnnotation{}
    if err := _elem0.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
    }
    p.Annotations = append(p.Annotations, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpan)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.Flag = v
}
  return nil
}

func (p *TSpan)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.Err = &v
}
  return nil
}

func (p *TSpan)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSpanEvent, 0, size)
  p.SpanEventList =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TSpanEvent{
    Depth: -1,

    NextSpanId: -1,
}
    if err := _elem1.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.SpanEventList = append(p.SpanEventList, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpan)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.ParentApplicationName = &v
}
  return nil
}

func (p *TSpan)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.ParentApplicationType = &v
}
  return nil
}

func (p *TSpan)  ReadField21(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 21: ", err)
} else {
  p.AcceptorHost = &v
}
  return nil
}

func (p *TSpan)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ApiId = &v
}
  return nil
}

func (p *TSpan)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExceptionInfo = &TIntStringValue{}
  if err := p.ExceptionInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionInfo), err)
  }
  return nil
}

func (p *TSpan)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.ApplicationServiceType = &v
}
  return nil
}

func (p *TSpan)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  temp := int8(v)
  p.LoggingTransactionInfo = &temp
}
  return nil
}

func (p *TSpan)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.HttpPara = &v
}
  return nil
}

func (p *TSpan)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.HttpMethod = &v
}
  return nil
}

func (p *TSpan)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.HttpRequestHeader = &v
}
  return nil
}

func (p *TSpan)  ReadField35(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 35: ", err)
} else {
  p.HttpRequestUserAgent = &v
}
  return nil
}

func (p *TSpan)  ReadField36(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 36: ", err)
} else {
  p.HttpRequestBody = &v
}
  return nil
}

func (p *TSpan)  ReadField37(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 37: ", err)
} else {
  p.HttpResponseBody = &v
}
  return nil
}

func (p *TSpan)  ReadField38(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 38: ", err)
} else {
  p.Retcode = &v
}
  return nil
}

func (p *TSpan)  ReadField39(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 39: ", err)
} else {
  p.HttpRequestUID = &v
}
  return nil
}

func (p *TSpan)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 40: ", err)
} else {
  p.HttpRequestTID = &v
}
  return nil
}

func (p *TSpan)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.PagentId = &v
}
  return nil
}

func (p *TSpan)  ReadField42(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 42: ", err)
} else {
  p.Apidesc = &v
}
  return nil
}

func (p *TSpan)  ReadField43(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 43: ", err)
} else {
  p.HttpResponseHeader = &v
}
  return nil
}

func (p *TSpan)  ReadField44(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 44: ", err)
} else {
  p.UserId = &v
}
  return nil
}

func (p *TSpan)  ReadField45(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 45: ", err)
} else {
  p.SessionId = &v
}
  return nil
}

func (p *TSpan)  ReadField46(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 46: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TSpan)  ReadField47(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 47: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TSpan)  ReadField50(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 50: ", err)
} else {
  p.ThreadId = &v
}
  return nil
}

func (p *TSpan)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.ThreadName = &v
}
  return nil
}

func (p *TSpan)  ReadField52(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 52: ", err)
} else {
  p.HasNextCall = &v
}
  return nil
}

func (p *TSpan)  ReadField53(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 53: ", err)
} else {
  p.Traceparent = &v
}
  return nil
}

func (p *TSpan)  ReadField54(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 54: ", err)
} else {
  p.Tracestate = &v
}
  return nil
}

func (p *TSpan)  ReadField55(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 55: ", err)
} else {
  p.ParentId = v
}
  return nil
}

func (p *TSpan) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSpan"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField21(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField35(ctx, oprot); err != nil { return err }
    if err := p.writeField36(ctx, oprot); err != nil { return err }
    if err := p.writeField37(ctx, oprot); err != nil { return err }
    if err := p.writeField38(ctx, oprot); err != nil { return err }
    if err := p.writeField39(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField42(ctx, oprot); err != nil { return err }
    if err := p.writeField43(ctx, oprot); err != nil { return err }
    if err := p.writeField44(ctx, oprot); err != nil { return err }
    if err := p.writeField45(ctx, oprot); err != nil { return err }
    if err := p.writeField46(ctx, oprot); err != nil { return err }
    if err := p.writeField47(ctx, oprot); err != nil { return err }
    if err := p.writeField50(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField52(ctx, oprot); err != nil { return err }
    if err := p.writeField53(ctx, oprot); err != nil { return err }
    if err := p.writeField54(ctx, oprot); err != nil { return err }
    if err := p.writeField55(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpan) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TSpan) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationName: ", p), err) }
  return err
}

func (p *TSpan) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentStartTime: ", p), err) }
  return err
}

func (p *TSpan) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:transactionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TransactionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionId (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:transactionId: ", p), err) }
  return err
}

func (p *TSpan) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:appkey: ", p), err) }
  return err
}

func (p *TSpan) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.I64, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spanId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SpanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spanId (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spanId: ", p), err) }
  return err
}

func (p *TSpan) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentSpanId() {
    if err := oprot.WriteFieldBegin(ctx, "parentSpanId", thrift.I64, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:parentSpanId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.ParentSpanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentSpanId (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:parentSpanId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startTime: ", p), err) }
  return err
}

func (p *TSpan) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetElapsed() {
    if err := oprot.WriteFieldBegin(ctx, "elapsed", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:elapsed: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.Elapsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.elapsed (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:elapsed: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRPC() {
    if err := oprot.WriteFieldBegin(ctx, "rpc", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rpc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RPC)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rpc (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rpc: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceType: ", p), err) }
  return err
}

func (p *TSpan) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndPoint() {
    if err := oprot.WriteFieldBegin(ctx, "endPoint", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:endPoint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndPoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endPoint (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:endPoint: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRemoteAddr() {
    if err := oprot.WriteFieldBegin(ctx, "remoteAddr", thrift.STRING, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:remoteAddr: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RemoteAddr)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.remoteAddr (14) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:remoteAddr: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnnotations() {
    if err := oprot.WriteFieldBegin(ctx, "annotations", thrift.LIST, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:annotations: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Annotations)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Annotations {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:annotations: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetFlag() {
    if err := oprot.WriteFieldBegin(ctx, "flag", thrift.I16, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:flag: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(p.Flag)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.flag (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:flag: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.I32, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:err: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Err)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.err (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:err: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpanEventList() {
    if err := oprot.WriteFieldBegin(ctx, "spanEventList", thrift.LIST, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:spanEventList: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SpanEventList)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.SpanEventList {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:spanEventList: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentApplicationName() {
    if err := oprot.WriteFieldBegin(ctx, "parentApplicationName", thrift.STRING, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:parentApplicationName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ParentApplicationName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentApplicationName (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:parentApplicationName: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentApplicationType() {
    if err := oprot.WriteFieldBegin(ctx, "parentApplicationType", thrift.I16, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:parentApplicationType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ParentApplicationType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentApplicationType (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:parentApplicationType: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField21(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAcceptorHost() {
    if err := oprot.WriteFieldBegin(ctx, "acceptorHost", thrift.STRING, 21); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 21:acceptorHost: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.AcceptorHost)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.acceptorHost (21) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 21:acceptorHost: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApiId() {
    if err := oprot.WriteFieldBegin(ctx, "apiId", thrift.I32, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:apiId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ApiId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.apiId (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:apiId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionInfo() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionInfo", thrift.STRUCT, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:exceptionInfo: ", p), err) }
    if err := p.ExceptionInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:exceptionInfo: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "applicationServiceType", thrift.I16, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:applicationServiceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ApplicationServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationServiceType (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:applicationServiceType: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLoggingTransactionInfo() {
    if err := oprot.WriteFieldBegin(ctx, "loggingTransactionInfo", thrift.BYTE, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:loggingTransactionInfo: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.LoggingTransactionInfo)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.loggingTransactionInfo (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:loggingTransactionInfo: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpPara() {
    if err := oprot.WriteFieldBegin(ctx, "httpPara", thrift.STRING, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:httpPara: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpPara)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpPara (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:httpPara: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpMethod() {
    if err := oprot.WriteFieldBegin(ctx, "httpMethod", thrift.STRING, 33); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:httpMethod: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpMethod)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpMethod (33) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 33:httpMethod: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestHeader() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestHeader", thrift.STRING, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:httpRequestHeader: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestHeader)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestHeader (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:httpRequestHeader: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField35(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestUserAgent() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestUserAgent", thrift.STRING, 35); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 35:httpRequestUserAgent: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestUserAgent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestUserAgent (35) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 35:httpRequestUserAgent: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField36(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestBody() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestBody", thrift.STRING, 36); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 36:httpRequestBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestBody (36) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 36:httpRequestBody: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField37(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpResponseBody() {
    if err := oprot.WriteFieldBegin(ctx, "httpResponseBody", thrift.STRING, 37); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 37:httpResponseBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpResponseBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpResponseBody (37) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 37:httpResponseBody: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField38(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRetcode() {
    if err := oprot.WriteFieldBegin(ctx, "retcode", thrift.I16, 38); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 38:retcode: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.Retcode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retcode (38) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 38:retcode: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField39(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestUID() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestUID", thrift.STRING, 39); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 39:httpRequestUID: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestUID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestUID (39) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 39:httpRequestUID: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpRequestTID() {
    if err := oprot.WriteFieldBegin(ctx, "httpRequestTID", thrift.STRING, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:httpRequestTID: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpRequestTID)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpRequestTID (40) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:httpRequestTID: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPagentId() {
    if err := oprot.WriteFieldBegin(ctx, "pagentId", thrift.STRING, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:pagentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.PagentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pagentId (41) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:pagentId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField42(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApidesc() {
    if err := oprot.WriteFieldBegin(ctx, "apidesc", thrift.STRING, 42); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 42:apidesc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Apidesc)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.apidesc (42) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 42:apidesc: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField43(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHttpResponseHeader() {
    if err := oprot.WriteFieldBegin(ctx, "httpResponseHeader", thrift.STRING, 43); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 43:httpResponseHeader: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.HttpResponseHeader)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.httpResponseHeader (43) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 43:httpResponseHeader: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField44(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin(ctx, "userId", thrift.STRING, 44); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 44:userId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (44) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 44:userId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField45(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionId() {
    if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 45); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 45:sessionId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SessionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sessionId (45) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 45:sessionId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField46(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 46); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 46:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (46) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 46:appId: ", p), err) }
  return err
}

func (p *TSpan) writeField47(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 47); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 47:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (47) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 47:tenant: ", p), err) }
  return err
}

func (p *TSpan) writeField50(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadId() {
    if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.I64, 50); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 50:threadId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ThreadId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadId (50) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 50:threadId: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadName() {
    if err := oprot.WriteFieldBegin(ctx, "threadName", thrift.STRING, 51); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:threadName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThreadName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadName (51) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 51:threadName: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField52(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetHasNextCall() {
    if err := oprot.WriteFieldBegin(ctx, "hasNextCall", thrift.BOOL, 52); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 52:hasNextCall: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.HasNextCall)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.hasNextCall (52) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 52:hasNextCall: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField53(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTraceparent() {
    if err := oprot.WriteFieldBegin(ctx, "traceparent", thrift.STRING, 53); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 53:traceparent: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Traceparent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.traceparent (53) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 53:traceparent: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField54(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTracestate() {
    if err := oprot.WriteFieldBegin(ctx, "tracestate", thrift.STRING, 54); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 54:tracestate: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Tracestate)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.tracestate (54) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 54:tracestate: ", p), err) }
  }
  return err
}

func (p *TSpan) writeField55(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetParentId() {
    if err := oprot.WriteFieldBegin(ctx, "parentId", thrift.STRING, 55); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 55:parentId: ", p), err) }
    if err := oprot.WriteString(ctx, string(p.ParentId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.parentId (55) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 55:parentId: ", p), err) }
  }
  return err
}

func (p *TSpan) Equals(other *TSpan) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if bytes.Compare(p.TransactionId, other.TransactionId) != 0 { return false }
  if p.Appkey != other.Appkey { return false }
  if p.SpanId != other.SpanId { return false }
  if p.ParentSpanId != other.ParentSpanId { return false }
  if p.StartTime != other.StartTime { return false }
  if p.Elapsed != other.Elapsed { return false }
  if p.RPC != other.RPC {
    if p.RPC == nil || other.RPC == nil {
      return false
    }
    if (*p.RPC) != (*other.RPC) { return false }
  }
  if p.ServiceType != other.ServiceType { return false }
  if p.EndPoint != other.EndPoint {
    if p.EndPoint == nil || other.EndPoint == nil {
      return false
    }
    if (*p.EndPoint) != (*other.EndPoint) { return false }
  }
  if p.RemoteAddr != other.RemoteAddr {
    if p.RemoteAddr == nil || other.RemoteAddr == nil {
      return false
    }
    if (*p.RemoteAddr) != (*other.RemoteAddr) { return false }
  }
  if len(p.Annotations) != len(other.Annotations) { return false }
  for i, _tgt := range p.Annotations {
    _src2 := other.Annotations[i]
    if !_tgt.Equals(_src2) { return false }
  }
  if p.Flag != other.Flag { return false }
  if p.Err != other.Err {
    if p.Err == nil || other.Err == nil {
      return false
    }
    if (*p.Err) != (*other.Err) { return false }
  }
  if len(p.SpanEventList) != len(other.SpanEventList) { return false }
  for i, _tgt := range p.SpanEventList {
    _src3 := other.SpanEventList[i]
    if !_tgt.Equals(_src3) { return false }
  }
  if p.ParentApplicationName != other.ParentApplicationName {
    if p.ParentApplicationName == nil || other.ParentApplicationName == nil {
      return false
    }
    if (*p.ParentApplicationName) != (*other.ParentApplicationName) { return false }
  }
  if p.ParentApplicationType != other.ParentApplicationType {
    if p.ParentApplicationType == nil || other.ParentApplicationType == nil {
      return false
    }
    if (*p.ParentApplicationType) != (*other.ParentApplicationType) { return false }
  }
  if p.AcceptorHost != other.AcceptorHost {
    if p.AcceptorHost == nil || other.AcceptorHost == nil {
      return false
    }
    if (*p.AcceptorHost) != (*other.AcceptorHost) { return false }
  }
  if p.ApiId != other.ApiId {
    if p.ApiId == nil || other.ApiId == nil {
      return false
    }
    if (*p.ApiId) != (*other.ApiId) { return false }
  }
  if !p.ExceptionInfo.Equals(other.ExceptionInfo) { return false }
  if p.ApplicationServiceType != other.ApplicationServiceType {
    if p.ApplicationServiceType == nil || other.ApplicationServiceType == nil {
      return false
    }
    if (*p.ApplicationServiceType) != (*other.ApplicationServiceType) { return false }
  }
  if p.LoggingTransactionInfo != other.LoggingTransactionInfo {
    if p.LoggingTransactionInfo == nil || other.LoggingTransactionInfo == nil {
      return false
    }
    if (*p.LoggingTransactionInfo) != (*other.LoggingTransactionInfo) { return false }
  }
  if p.HttpPara != other.HttpPara {
    if p.HttpPara == nil || other.HttpPara == nil {
      return false
    }
    if (*p.HttpPara) != (*other.HttpPara) { return false }
  }
  if p.HttpMethod != other.HttpMethod {
    if p.HttpMethod == nil || other.HttpMethod == nil {
      return false
    }
    if (*p.HttpMethod) != (*other.HttpMethod) { return false }
  }
  if p.HttpRequestHeader != other.HttpRequestHeader {
    if p.HttpRequestHeader == nil || other.HttpRequestHeader == nil {
      return false
    }
    if (*p.HttpRequestHeader) != (*other.HttpRequestHeader) { return false }
  }
  if p.HttpRequestUserAgent != other.HttpRequestUserAgent {
    if p.HttpRequestUserAgent == nil || other.HttpRequestUserAgent == nil {
      return false
    }
    if (*p.HttpRequestUserAgent) != (*other.HttpRequestUserAgent) { return false }
  }
  if p.HttpRequestBody != other.HttpRequestBody {
    if p.HttpRequestBody == nil || other.HttpRequestBody == nil {
      return false
    }
    if (*p.HttpRequestBody) != (*other.HttpRequestBody) { return false }
  }
  if p.HttpResponseBody != other.HttpResponseBody {
    if p.HttpResponseBody == nil || other.HttpResponseBody == nil {
      return false
    }
    if (*p.HttpResponseBody) != (*other.HttpResponseBody) { return false }
  }
  if p.Retcode != other.Retcode {
    if p.Retcode == nil || other.Retcode == nil {
      return false
    }
    if (*p.Retcode) != (*other.Retcode) { return false }
  }
  if p.HttpRequestUID != other.HttpRequestUID {
    if p.HttpRequestUID == nil || other.HttpRequestUID == nil {
      return false
    }
    if (*p.HttpRequestUID) != (*other.HttpRequestUID) { return false }
  }
  if p.HttpRequestTID != other.HttpRequestTID {
    if p.HttpRequestTID == nil || other.HttpRequestTID == nil {
      return false
    }
    if (*p.HttpRequestTID) != (*other.HttpRequestTID) { return false }
  }
  if p.PagentId != other.PagentId {
    if p.PagentId == nil || other.PagentId == nil {
      return false
    }
    if (*p.PagentId) != (*other.PagentId) { return false }
  }
  if p.Apidesc != other.Apidesc {
    if p.Apidesc == nil || other.Apidesc == nil {
      return false
    }
    if (*p.Apidesc) != (*other.Apidesc) { return false }
  }
  if p.HttpResponseHeader != other.HttpResponseHeader {
    if p.HttpResponseHeader == nil || other.HttpResponseHeader == nil {
      return false
    }
    if (*p.HttpResponseHeader) != (*other.HttpResponseHeader) { return false }
  }
  if p.UserId != other.UserId {
    if p.UserId == nil || other.UserId == nil {
      return false
    }
    if (*p.UserId) != (*other.UserId) { return false }
  }
  if p.SessionId != other.SessionId {
    if p.SessionId == nil || other.SessionId == nil {
      return false
    }
    if (*p.SessionId) != (*other.SessionId) { return false }
  }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.ThreadId != other.ThreadId {
    if p.ThreadId == nil || other.ThreadId == nil {
      return false
    }
    if (*p.ThreadId) != (*other.ThreadId) { return false }
  }
  if p.ThreadName != other.ThreadName {
    if p.ThreadName == nil || other.ThreadName == nil {
      return false
    }
    if (*p.ThreadName) != (*other.ThreadName) { return false }
  }
  if p.HasNextCall != other.HasNextCall {
    if p.HasNextCall == nil || other.HasNextCall == nil {
      return false
    }
    if (*p.HasNextCall) != (*other.HasNextCall) { return false }
  }
  if p.Traceparent != other.Traceparent {
    if p.Traceparent == nil || other.Traceparent == nil {
      return false
    }
    if (*p.Traceparent) != (*other.Traceparent) { return false }
  }
  if p.Tracestate != other.Tracestate {
    if p.Tracestate == nil || other.Tracestate == nil {
      return false
    }
    if (*p.Tracestate) != (*other.Tracestate) { return false }
  }
  if p.ParentId != other.ParentId { return false }
  return true
}

func (p *TSpan) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpan(%+v)", *p)
}

func (p *TSpan) Validate() error {
  return nil
}
// Attributes:
//  - AgentId
//  - ApplicationName
//  - AgentStartTime
//  - ServiceType
//  - TransactionId
//  - Appkey
//  - SpanId
//  - EndPoint
//  - SpanEventList
//  - ApplicationServiceType
//  - AppId
//  - Tenant
//  - ThreadId
//  - ThreadName
//  - UserId
//  - SessionId
//  - StartTime
//  - Traceparent
type TSpanChunk struct {
  AgentId string `thrift:"agentId,1" db:"agentId" json:"agentId"`
  ApplicationName string `thrift:"applicationName,2" db:"applicationName" json:"applicationName"`
  AgentStartTime int64 `thrift:"agentStartTime,3" db:"agentStartTime" json:"agentStartTime"`
  ServiceType int16 `thrift:"serviceType,4" db:"serviceType" json:"serviceType"`
  TransactionId []byte `thrift:"transactionId,5" db:"transactionId" json:"transactionId"`
  Appkey string `thrift:"appkey,6" db:"appkey" json:"appkey"`
  // unused field # 7
  SpanId int64 `thrift:"spanId,8" db:"spanId" json:"spanId"`
  EndPoint *string `thrift:"endPoint,9" db:"endPoint" json:"endPoint,omitempty"`
  SpanEventList []*TSpanEvent `thrift:"spanEventList,10" db:"spanEventList" json:"spanEventList"`
  ApplicationServiceType *int16 `thrift:"applicationServiceType,11" db:"applicationServiceType" json:"applicationServiceType,omitempty"`
  AppId string `thrift:"appId,12" db:"appId" json:"appId"`
  Tenant string `thrift:"tenant,13" db:"tenant" json:"tenant"`
  // unused field # 14
  ThreadId *int64 `thrift:"threadId,15" db:"threadId" json:"threadId,omitempty"`
  ThreadName *string `thrift:"threadName,16" db:"threadName" json:"threadName,omitempty"`
  UserId *string `thrift:"userId,17" db:"userId" json:"userId,omitempty"`
  SessionId *string `thrift:"sessionId,18" db:"sessionId" json:"sessionId,omitempty"`
  StartTime *int64 `thrift:"startTime,19" db:"startTime" json:"startTime,omitempty"`
  Traceparent *string `thrift:"traceparent,20" db:"traceparent" json:"traceparent,omitempty"`
}

func NewTSpanChunk() *TSpanChunk {
  return &TSpanChunk{}
}


func (p *TSpanChunk) GetAgentId() string {
  return p.AgentId
}

func (p *TSpanChunk) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TSpanChunk) GetAgentStartTime() int64 {
  return p.AgentStartTime
}

func (p *TSpanChunk) GetServiceType() int16 {
  return p.ServiceType
}

func (p *TSpanChunk) GetTransactionId() []byte {
  return p.TransactionId
}

func (p *TSpanChunk) GetAppkey() string {
  return p.Appkey
}

func (p *TSpanChunk) GetSpanId() int64 {
  return p.SpanId
}
var TSpanChunk_EndPoint_DEFAULT string
func (p *TSpanChunk) GetEndPoint() string {
  if !p.IsSetEndPoint() {
    return TSpanChunk_EndPoint_DEFAULT
  }
return *p.EndPoint
}

func (p *TSpanChunk) GetSpanEventList() []*TSpanEvent {
  return p.SpanEventList
}
var TSpanChunk_ApplicationServiceType_DEFAULT int16
func (p *TSpanChunk) GetApplicationServiceType() int16 {
  if !p.IsSetApplicationServiceType() {
    return TSpanChunk_ApplicationServiceType_DEFAULT
  }
return *p.ApplicationServiceType
}

func (p *TSpanChunk) GetAppId() string {
  return p.AppId
}

func (p *TSpanChunk) GetTenant() string {
  return p.Tenant
}
var TSpanChunk_ThreadId_DEFAULT int64
func (p *TSpanChunk) GetThreadId() int64 {
  if !p.IsSetThreadId() {
    return TSpanChunk_ThreadId_DEFAULT
  }
return *p.ThreadId
}
var TSpanChunk_ThreadName_DEFAULT string
func (p *TSpanChunk) GetThreadName() string {
  if !p.IsSetThreadName() {
    return TSpanChunk_ThreadName_DEFAULT
  }
return *p.ThreadName
}
var TSpanChunk_UserId_DEFAULT string
func (p *TSpanChunk) GetUserId() string {
  if !p.IsSetUserId() {
    return TSpanChunk_UserId_DEFAULT
  }
return *p.UserId
}
var TSpanChunk_SessionId_DEFAULT string
func (p *TSpanChunk) GetSessionId() string {
  if !p.IsSetSessionId() {
    return TSpanChunk_SessionId_DEFAULT
  }
return *p.SessionId
}
var TSpanChunk_StartTime_DEFAULT int64
func (p *TSpanChunk) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return TSpanChunk_StartTime_DEFAULT
  }
return *p.StartTime
}
var TSpanChunk_Traceparent_DEFAULT string
func (p *TSpanChunk) GetTraceparent() string {
  if !p.IsSetTraceparent() {
    return TSpanChunk_Traceparent_DEFAULT
  }
return *p.Traceparent
}
func (p *TSpanChunk) IsSetEndPoint() bool {
  return p.EndPoint != nil
}

func (p *TSpanChunk) IsSetApplicationServiceType() bool {
  return p.ApplicationServiceType != nil
}

func (p *TSpanChunk) IsSetThreadId() bool {
  return p.ThreadId != nil
}

func (p *TSpanChunk) IsSetThreadName() bool {
  return p.ThreadName != nil
}

func (p *TSpanChunk) IsSetUserId() bool {
  return p.UserId != nil
}

func (p *TSpanChunk) IsSetSessionId() bool {
  return p.SessionId != nil
}

func (p *TSpanChunk) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *TSpanChunk) IsSetTraceparent() bool {
  return p.Traceparent != nil
}

func (p *TSpanChunk) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 17:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField17(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 18:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField18(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 19:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField19(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpanChunk)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TSpanChunk)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.AgentStartTime = v
}
  return nil
}

func (p *TSpanChunk)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TSpanChunk)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.TransactionId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.Appkey = v
}
  return nil
}

func (p *TSpanChunk)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.SpanId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.EndPoint = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TSpanEvent, 0, size)
  p.SpanEventList =  tSlice
  for i := 0; i < size; i ++ {
    _elem4 := &TSpanEvent{
    Depth: -1,

    NextSpanId: -1,
}
    if err := _elem4.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem4), err)
    }
    p.SpanEventList = append(p.SpanEventList, _elem4)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpanChunk)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.ApplicationServiceType = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.AppId = v
}
  return nil
}

func (p *TSpanChunk)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Tenant = v
}
  return nil
}

func (p *TSpanChunk)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.ThreadId = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.ThreadName = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField17(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 17: ", err)
} else {
  p.UserId = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField18(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 18: ", err)
} else {
  p.SessionId = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField19(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 19: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *TSpanChunk)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.Traceparent = &v
}
  return nil
}

func (p *TSpanChunk) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSpanChunk"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField17(ctx, oprot); err != nil { return err }
    if err := p.writeField18(ctx, oprot); err != nil { return err }
    if err := p.writeField19(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpanChunk) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:agentId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:applicationName: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentStartTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:agentStartTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.AgentStartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentStartTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:agentStartTime: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:serviceType: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "transactionId", thrift.STRING, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:transactionId: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.TransactionId); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.transactionId (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:transactionId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appkey", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:appkey: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Appkey)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appkey (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:appkey: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:spanId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.SpanId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.spanId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:spanId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndPoint() {
    if err := oprot.WriteFieldBegin(ctx, "endPoint", thrift.STRING, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:endPoint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndPoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endPoint (9) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:endPoint: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "spanEventList", thrift.LIST, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:spanEventList: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.SpanEventList)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.SpanEventList {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:spanEventList: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApplicationServiceType() {
    if err := oprot.WriteFieldBegin(ctx, "applicationServiceType", thrift.I16, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:applicationServiceType: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ApplicationServiceType)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.applicationServiceType (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:applicationServiceType: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "appId", thrift.STRING, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:appId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AppId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.appId (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:appId: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "tenant", thrift.STRING, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:tenant: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Tenant)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.tenant (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:tenant: ", p), err) }
  return err
}

func (p *TSpanChunk) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadId() {
    if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.I64, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:threadId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ThreadId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadId (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:threadId: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetThreadName() {
    if err := oprot.WriteFieldBegin(ctx, "threadName", thrift.STRING, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:threadName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ThreadName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.threadName (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:threadName: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField17(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetUserId() {
    if err := oprot.WriteFieldBegin(ctx, "userId", thrift.STRING, 17); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 17:userId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.UserId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.userId (17) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 17:userId: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField18(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSessionId() {
    if err := oprot.WriteFieldBegin(ctx, "sessionId", thrift.STRING, 18); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 18:sessionId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.SessionId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.sessionId (18) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 18:sessionId: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField19(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 19); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 19:startTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTime (19) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 19:startTime: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTraceparent() {
    if err := oprot.WriteFieldBegin(ctx, "traceparent", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:traceparent: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Traceparent)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.traceparent (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:traceparent: ", p), err) }
  }
  return err
}

func (p *TSpanChunk) Equals(other *TSpanChunk) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.AgentId != other.AgentId { return false }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentStartTime != other.AgentStartTime { return false }
  if p.ServiceType != other.ServiceType { return false }
  if bytes.Compare(p.TransactionId, other.TransactionId) != 0 { return false }
  if p.Appkey != other.Appkey { return false }
  if p.SpanId != other.SpanId { return false }
  if p.EndPoint != other.EndPoint {
    if p.EndPoint == nil || other.EndPoint == nil {
      return false
    }
    if (*p.EndPoint) != (*other.EndPoint) { return false }
  }
  if len(p.SpanEventList) != len(other.SpanEventList) { return false }
  for i, _tgt := range p.SpanEventList {
    _src5 := other.SpanEventList[i]
    if !_tgt.Equals(_src5) { return false }
  }
  if p.ApplicationServiceType != other.ApplicationServiceType {
    if p.ApplicationServiceType == nil || other.ApplicationServiceType == nil {
      return false
    }
    if (*p.ApplicationServiceType) != (*other.ApplicationServiceType) { return false }
  }
  if p.AppId != other.AppId { return false }
  if p.Tenant != other.Tenant { return false }
  if p.ThreadId != other.ThreadId {
    if p.ThreadId == nil || other.ThreadId == nil {
      return false
    }
    if (*p.ThreadId) != (*other.ThreadId) { return false }
  }
  if p.ThreadName != other.ThreadName {
    if p.ThreadName == nil || other.ThreadName == nil {
      return false
    }
    if (*p.ThreadName) != (*other.ThreadName) { return false }
  }
  if p.UserId != other.UserId {
    if p.UserId == nil || other.UserId == nil {
      return false
    }
    if (*p.UserId) != (*other.UserId) { return false }
  }
  if p.SessionId != other.SessionId {
    if p.SessionId == nil || other.SessionId == nil {
      return false
    }
    if (*p.SessionId) != (*other.SessionId) { return false }
  }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  if p.Traceparent != other.Traceparent {
    if p.Traceparent == nil || other.Traceparent == nil {
      return false
    }
    if (*p.Traceparent) != (*other.Traceparent) { return false }
  }
  return true
}

func (p *TSpanChunk) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpanChunk(%+v)", *p)
}

func (p *TSpanChunk) Validate() error {
  return nil
}
// Attributes:
//  - SpanId
//  - Sequence
//  - StartElapsed
//  - EndElapsed
//  - RPC
//  - ServiceType
//  - EndPoint
//  - Annotations
//  - Depth
//  - NextSpanId
//  - DestinationId
//  - ApiId
//  - ExceptionInfo
//  - ExceptionClassName
//  - AsyncId
//  - NextAsyncId
//  - AsyncSequence
//  - ApiInfo
//  - LineNumber
//  - Sql
//  - Retcode
//  - RequestHeaders
//  - RequestBody
//  - ResponseBody
//  - URL
//  - Method
//  - Arguments
type TSpanEvent struct {
  // unused fields # 1 to 6
  SpanId *int64 `thrift:"spanId,7" db:"spanId" json:"spanId,omitempty"`
  Sequence int32 `thrift:"sequence,8" db:"sequence" json:"sequence"`
  StartElapsed int32 `thrift:"startElapsed,9" db:"startElapsed" json:"startElapsed"`
  EndElapsed int32 `thrift:"endElapsed,10" db:"endElapsed" json:"endElapsed"`
  RPC *string `thrift:"rpc,11" db:"rpc" json:"rpc,omitempty"`
  ServiceType int16 `thrift:"serviceType,12" db:"serviceType" json:"serviceType"`
  EndPoint *string `thrift:"endPoint,13" db:"endPoint" json:"endPoint,omitempty"`
  Annotations []*TAnnotation `thrift:"annotations,14" db:"annotations" json:"annotations,omitempty"`
  Depth int32 `thrift:"depth,15" db:"depth" json:"depth"`
  NextSpanId int64 `thrift:"nextSpanId,16" db:"nextSpanId" json:"nextSpanId"`
  // unused fields # 17 to 19
  DestinationId *string `thrift:"destinationId,20" db:"destinationId" json:"destinationId,omitempty"`
  // unused fields # 21 to 24
  ApiId *int32 `thrift:"apiId,25" db:"apiId" json:"apiId,omitempty"`
  ExceptionInfo *TIntStringValue `thrift:"exceptionInfo,26" db:"exceptionInfo" json:"exceptionInfo,omitempty"`
  ExceptionClassName *string `thrift:"exceptionClassName,27" db:"exceptionClassName" json:"exceptionClassName,omitempty"`
  // unused fields # 28 to 29
  AsyncId *int32 `thrift:"asyncId,30" db:"asyncId" json:"asyncId,omitempty"`
  NextAsyncId *int32 `thrift:"nextAsyncId,31" db:"nextAsyncId" json:"nextAsyncId,omitempty"`
  AsyncSequence *int32 `thrift:"asyncSequence,32" db:"asyncSequence" json:"asyncSequence,omitempty"`
  ApiInfo string `thrift:"apiInfo,33" db:"apiInfo" json:"apiInfo"`
  LineNumber *int32 `thrift:"lineNumber,34" db:"lineNumber" json:"lineNumber,omitempty"`
  // unused fields # 35 to 39
  Sql *TSql `thrift:"sql,40" db:"sql" json:"sql,omitempty"`
  Retcode *int32 `thrift:"retcode,41" db:"retcode" json:"retcode,omitempty"`
  // unused fields # 42 to 50
  RequestHeaders *string `thrift:"requestHeaders,51" db:"requestHeaders" json:"requestHeaders,omitempty"`
  // unused fields # 52 to 60
  RequestBody *string `thrift:"requestBody,61" db:"requestBody" json:"requestBody,omitempty"`
  // unused fields # 62 to 70
  ResponseBody *string `thrift:"responseBody,71" db:"responseBody" json:"responseBody,omitempty"`
  // unused fields # 72 to 80
  URL *string `thrift:"url,81" db:"url" json:"url,omitempty"`
  // unused fields # 82 to 90
  Method *string `thrift:"method,91" db:"method" json:"method,omitempty"`
  Arguments *string `thrift:"arguments,92" db:"arguments" json:"arguments,omitempty"`
}

func NewTSpanEvent() *TSpanEvent {
  return &TSpanEvent{
Depth: -1,

NextSpanId: -1,
}
}

var TSpanEvent_SpanId_DEFAULT int64
func (p *TSpanEvent) GetSpanId() int64 {
  if !p.IsSetSpanId() {
    return TSpanEvent_SpanId_DEFAULT
  }
return *p.SpanId
}

func (p *TSpanEvent) GetSequence() int32 {
  return p.Sequence
}

func (p *TSpanEvent) GetStartElapsed() int32 {
  return p.StartElapsed
}
var TSpanEvent_EndElapsed_DEFAULT int32 = 0

func (p *TSpanEvent) GetEndElapsed() int32 {
  return p.EndElapsed
}
var TSpanEvent_RPC_DEFAULT string
func (p *TSpanEvent) GetRPC() string {
  if !p.IsSetRPC() {
    return TSpanEvent_RPC_DEFAULT
  }
return *p.RPC
}

func (p *TSpanEvent) GetServiceType() int16 {
  return p.ServiceType
}
var TSpanEvent_EndPoint_DEFAULT string
func (p *TSpanEvent) GetEndPoint() string {
  if !p.IsSetEndPoint() {
    return TSpanEvent_EndPoint_DEFAULT
  }
return *p.EndPoint
}
var TSpanEvent_Annotations_DEFAULT []*TAnnotation

func (p *TSpanEvent) GetAnnotations() []*TAnnotation {
  return p.Annotations
}
var TSpanEvent_Depth_DEFAULT int32 = -1

func (p *TSpanEvent) GetDepth() int32 {
  return p.Depth
}
var TSpanEvent_NextSpanId_DEFAULT int64 = -1

func (p *TSpanEvent) GetNextSpanId() int64 {
  return p.NextSpanId
}
var TSpanEvent_DestinationId_DEFAULT string
func (p *TSpanEvent) GetDestinationId() string {
  if !p.IsSetDestinationId() {
    return TSpanEvent_DestinationId_DEFAULT
  }
return *p.DestinationId
}
var TSpanEvent_ApiId_DEFAULT int32
func (p *TSpanEvent) GetApiId() int32 {
  if !p.IsSetApiId() {
    return TSpanEvent_ApiId_DEFAULT
  }
return *p.ApiId
}
var TSpanEvent_ExceptionInfo_DEFAULT *TIntStringValue
func (p *TSpanEvent) GetExceptionInfo() *TIntStringValue {
  if !p.IsSetExceptionInfo() {
    return TSpanEvent_ExceptionInfo_DEFAULT
  }
return p.ExceptionInfo
}
var TSpanEvent_ExceptionClassName_DEFAULT string
func (p *TSpanEvent) GetExceptionClassName() string {
  if !p.IsSetExceptionClassName() {
    return TSpanEvent_ExceptionClassName_DEFAULT
  }
return *p.ExceptionClassName
}
var TSpanEvent_AsyncId_DEFAULT int32
func (p *TSpanEvent) GetAsyncId() int32 {
  if !p.IsSetAsyncId() {
    return TSpanEvent_AsyncId_DEFAULT
  }
return *p.AsyncId
}
var TSpanEvent_NextAsyncId_DEFAULT int32
func (p *TSpanEvent) GetNextAsyncId() int32 {
  if !p.IsSetNextAsyncId() {
    return TSpanEvent_NextAsyncId_DEFAULT
  }
return *p.NextAsyncId
}
var TSpanEvent_AsyncSequence_DEFAULT int32
func (p *TSpanEvent) GetAsyncSequence() int32 {
  if !p.IsSetAsyncSequence() {
    return TSpanEvent_AsyncSequence_DEFAULT
  }
return *p.AsyncSequence
}

func (p *TSpanEvent) GetApiInfo() string {
  return p.ApiInfo
}
var TSpanEvent_LineNumber_DEFAULT int32
func (p *TSpanEvent) GetLineNumber() int32 {
  if !p.IsSetLineNumber() {
    return TSpanEvent_LineNumber_DEFAULT
  }
return *p.LineNumber
}
var TSpanEvent_Sql_DEFAULT *TSql
func (p *TSpanEvent) GetSql() *TSql {
  if !p.IsSetSql() {
    return TSpanEvent_Sql_DEFAULT
  }
return p.Sql
}
var TSpanEvent_Retcode_DEFAULT int32
func (p *TSpanEvent) GetRetcode() int32 {
  if !p.IsSetRetcode() {
    return TSpanEvent_Retcode_DEFAULT
  }
return *p.Retcode
}
var TSpanEvent_RequestHeaders_DEFAULT string
func (p *TSpanEvent) GetRequestHeaders() string {
  if !p.IsSetRequestHeaders() {
    return TSpanEvent_RequestHeaders_DEFAULT
  }
return *p.RequestHeaders
}
var TSpanEvent_RequestBody_DEFAULT string
func (p *TSpanEvent) GetRequestBody() string {
  if !p.IsSetRequestBody() {
    return TSpanEvent_RequestBody_DEFAULT
  }
return *p.RequestBody
}
var TSpanEvent_ResponseBody_DEFAULT string
func (p *TSpanEvent) GetResponseBody() string {
  if !p.IsSetResponseBody() {
    return TSpanEvent_ResponseBody_DEFAULT
  }
return *p.ResponseBody
}
var TSpanEvent_URL_DEFAULT string
func (p *TSpanEvent) GetURL() string {
  if !p.IsSetURL() {
    return TSpanEvent_URL_DEFAULT
  }
return *p.URL
}
var TSpanEvent_Method_DEFAULT string
func (p *TSpanEvent) GetMethod() string {
  if !p.IsSetMethod() {
    return TSpanEvent_Method_DEFAULT
  }
return *p.Method
}
var TSpanEvent_Arguments_DEFAULT string
func (p *TSpanEvent) GetArguments() string {
  if !p.IsSetArguments() {
    return TSpanEvent_Arguments_DEFAULT
  }
return *p.Arguments
}
func (p *TSpanEvent) IsSetSpanId() bool {
  return p.SpanId != nil
}

func (p *TSpanEvent) IsSetEndElapsed() bool {
  return p.EndElapsed != TSpanEvent_EndElapsed_DEFAULT
}

func (p *TSpanEvent) IsSetRPC() bool {
  return p.RPC != nil
}

func (p *TSpanEvent) IsSetEndPoint() bool {
  return p.EndPoint != nil
}

func (p *TSpanEvent) IsSetAnnotations() bool {
  return p.Annotations != nil
}

func (p *TSpanEvent) IsSetDepth() bool {
  return p.Depth != TSpanEvent_Depth_DEFAULT
}

func (p *TSpanEvent) IsSetNextSpanId() bool {
  return p.NextSpanId != TSpanEvent_NextSpanId_DEFAULT
}

func (p *TSpanEvent) IsSetDestinationId() bool {
  return p.DestinationId != nil
}

func (p *TSpanEvent) IsSetApiId() bool {
  return p.ApiId != nil
}

func (p *TSpanEvent) IsSetExceptionInfo() bool {
  return p.ExceptionInfo != nil
}

func (p *TSpanEvent) IsSetExceptionClassName() bool {
  return p.ExceptionClassName != nil
}

func (p *TSpanEvent) IsSetAsyncId() bool {
  return p.AsyncId != nil
}

func (p *TSpanEvent) IsSetNextAsyncId() bool {
  return p.NextAsyncId != nil
}

func (p *TSpanEvent) IsSetAsyncSequence() bool {
  return p.AsyncSequence != nil
}

func (p *TSpanEvent) IsSetLineNumber() bool {
  return p.LineNumber != nil
}

func (p *TSpanEvent) IsSetSql() bool {
  return p.Sql != nil
}

func (p *TSpanEvent) IsSetRetcode() bool {
  return p.Retcode != nil
}

func (p *TSpanEvent) IsSetRequestHeaders() bool {
  return p.RequestHeaders != nil
}

func (p *TSpanEvent) IsSetRequestBody() bool {
  return p.RequestBody != nil
}

func (p *TSpanEvent) IsSetResponseBody() bool {
  return p.ResponseBody != nil
}

func (p *TSpanEvent) IsSetURL() bool {
  return p.URL != nil
}

func (p *TSpanEvent) IsSetMethod() bool {
  return p.Method != nil
}

func (p *TSpanEvent) IsSetArguments() bool {
  return p.Arguments != nil
}

func (p *TSpanEvent) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 7:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 16:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField16(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 20:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField20(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 25:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField25(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 26:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField26(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 27:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField27(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 30:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField30(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 31:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField31(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 32:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField32(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 33:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField33(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 34:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField34(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 40:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField40(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 41:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField41(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 51:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField51(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 61:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField61(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 71:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField71(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 81:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField81(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 91:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField91(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 92:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField92(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.SpanId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.Sequence = v
}
  return nil
}

func (p *TSpanEvent)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.StartElapsed = v
}
  return nil
}

func (p *TSpanEvent)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.EndElapsed = v
}
  return nil
}

func (p *TSpanEvent)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.RPC = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.ServiceType = v
}
  return nil
}

func (p *TSpanEvent)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.EndPoint = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TAnnotation, 0, size)
  p.Annotations =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TAnnotation{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.Annotations = append(p.Annotations, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 15: ", err)
} else {
  p.Depth = v
}
  return nil
}

func (p *TSpanEvent)  ReadField16(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 16: ", err)
} else {
  p.NextSpanId = v
}
  return nil
}

func (p *TSpanEvent)  ReadField20(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 20: ", err)
} else {
  p.DestinationId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField25(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 25: ", err)
} else {
  p.ApiId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField26(ctx context.Context, iprot thrift.TProtocol) error {
  p.ExceptionInfo = &TIntStringValue{}
  if err := p.ExceptionInfo.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ExceptionInfo), err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField27(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 27: ", err)
} else {
  p.ExceptionClassName = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField30(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 30: ", err)
} else {
  p.AsyncId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField31(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 31: ", err)
} else {
  p.NextAsyncId = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField32(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 32: ", err)
} else {
  p.AsyncSequence = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField33(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 33: ", err)
} else {
  p.ApiInfo = v
}
  return nil
}

func (p *TSpanEvent)  ReadField34(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 34: ", err)
} else {
  p.LineNumber = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField40(ctx context.Context, iprot thrift.TProtocol) error {
  p.Sql = &TSql{}
  if err := p.Sql.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Sql), err)
  }
  return nil
}

func (p *TSpanEvent)  ReadField41(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 41: ", err)
} else {
  p.Retcode = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField51(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 51: ", err)
} else {
  p.RequestHeaders = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField61(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 61: ", err)
} else {
  p.RequestBody = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField71(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 71: ", err)
} else {
  p.ResponseBody = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField81(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 81: ", err)
} else {
  p.URL = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField91(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 91: ", err)
} else {
  p.Method = &v
}
  return nil
}

func (p *TSpanEvent)  ReadField92(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 92: ", err)
} else {
  p.Arguments = &v
}
  return nil
}

func (p *TSpanEvent) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSpanEvent"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
    if err := p.writeField16(ctx, oprot); err != nil { return err }
    if err := p.writeField20(ctx, oprot); err != nil { return err }
    if err := p.writeField25(ctx, oprot); err != nil { return err }
    if err := p.writeField26(ctx, oprot); err != nil { return err }
    if err := p.writeField27(ctx, oprot); err != nil { return err }
    if err := p.writeField30(ctx, oprot); err != nil { return err }
    if err := p.writeField31(ctx, oprot); err != nil { return err }
    if err := p.writeField32(ctx, oprot); err != nil { return err }
    if err := p.writeField33(ctx, oprot); err != nil { return err }
    if err := p.writeField34(ctx, oprot); err != nil { return err }
    if err := p.writeField40(ctx, oprot); err != nil { return err }
    if err := p.writeField41(ctx, oprot); err != nil { return err }
    if err := p.writeField51(ctx, oprot); err != nil { return err }
    if err := p.writeField61(ctx, oprot); err != nil { return err }
    if err := p.writeField71(ctx, oprot); err != nil { return err }
    if err := p.writeField81(ctx, oprot); err != nil { return err }
    if err := p.writeField91(ctx, oprot); err != nil { return err }
    if err := p.writeField92(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSpanEvent) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSpanId() {
    if err := oprot.WriteFieldBegin(ctx, "spanId", thrift.I64, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:spanId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.SpanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.spanId (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:spanId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sequence", thrift.I32, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:sequence: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Sequence)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sequence (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:sequence: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startElapsed", thrift.I32, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:startElapsed: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StartElapsed)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startElapsed (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:startElapsed: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndElapsed() {
    if err := oprot.WriteFieldBegin(ctx, "endElapsed", thrift.I32, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:endElapsed: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.EndElapsed)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endElapsed (10) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:endElapsed: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRPC() {
    if err := oprot.WriteFieldBegin(ctx, "rpc", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:rpc: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RPC)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.rpc (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:rpc: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "serviceType", thrift.I16, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:serviceType: ", p), err) }
  if err := oprot.WriteI16(ctx, int16(p.ServiceType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.serviceType (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:serviceType: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetEndPoint() {
    if err := oprot.WriteFieldBegin(ctx, "endPoint", thrift.STRING, 13); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:endPoint: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.EndPoint)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.endPoint (13) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 13:endPoint: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAnnotations() {
    if err := oprot.WriteFieldBegin(ctx, "annotations", thrift.LIST, 14); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:annotations: ", p), err) }
    if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.Annotations)); err != nil {
      return thrift.PrependError("error writing list begin: ", err)
    }
    for _, v := range p.Annotations {
      if err := v.Write(ctx, oprot); err != nil {
        return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
      }
    }
    if err := oprot.WriteListEnd(ctx); err != nil {
      return thrift.PrependError("error writing list end: ", err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 14:annotations: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDepth() {
    if err := oprot.WriteFieldBegin(ctx, "depth", thrift.I32, 15); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:depth: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(p.Depth)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.depth (15) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 15:depth: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField16(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNextSpanId() {
    if err := oprot.WriteFieldBegin(ctx, "nextSpanId", thrift.I64, 16); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 16:nextSpanId: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(p.NextSpanId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextSpanId (16) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 16:nextSpanId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField20(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDestinationId() {
    if err := oprot.WriteFieldBegin(ctx, "destinationId", thrift.STRING, 20); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 20:destinationId: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.DestinationId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.destinationId (20) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 20:destinationId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField25(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetApiId() {
    if err := oprot.WriteFieldBegin(ctx, "apiId", thrift.I32, 25); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 25:apiId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.ApiId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.apiId (25) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 25:apiId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField26(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionInfo() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionInfo", thrift.STRUCT, 26); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 26:exceptionInfo: ", p), err) }
    if err := p.ExceptionInfo.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ExceptionInfo), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 26:exceptionInfo: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField27(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExceptionClassName() {
    if err := oprot.WriteFieldBegin(ctx, "exceptionClassName", thrift.STRING, 27); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 27:exceptionClassName: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ExceptionClassName)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.exceptionClassName (27) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 27:exceptionClassName: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField30(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAsyncId() {
    if err := oprot.WriteFieldBegin(ctx, "asyncId", thrift.I32, 30); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 30:asyncId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.AsyncId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.asyncId (30) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 30:asyncId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField31(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetNextAsyncId() {
    if err := oprot.WriteFieldBegin(ctx, "nextAsyncId", thrift.I32, 31); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 31:nextAsyncId: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.NextAsyncId)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.nextAsyncId (31) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 31:nextAsyncId: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField32(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetAsyncSequence() {
    if err := oprot.WriteFieldBegin(ctx, "asyncSequence", thrift.I32, 32); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 32:asyncSequence: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.AsyncSequence)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.asyncSequence (32) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 32:asyncSequence: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField33(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "apiInfo", thrift.STRING, 33); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 33:apiInfo: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApiInfo)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.apiInfo (33) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 33:apiInfo: ", p), err) }
  return err
}

func (p *TSpanEvent) writeField34(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLineNumber() {
    if err := oprot.WriteFieldBegin(ctx, "lineNumber", thrift.I32, 34); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 34:lineNumber: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.LineNumber)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.lineNumber (34) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 34:lineNumber: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField40(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetSql() {
    if err := oprot.WriteFieldBegin(ctx, "sql", thrift.STRUCT, 40); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 40:sql: ", p), err) }
    if err := p.Sql.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Sql), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 40:sql: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField41(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRetcode() {
    if err := oprot.WriteFieldBegin(ctx, "retcode", thrift.I32, 41); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 41:retcode: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.Retcode)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.retcode (41) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 41:retcode: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField51(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestHeaders() {
    if err := oprot.WriteFieldBegin(ctx, "requestHeaders", thrift.STRING, 51); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 51:requestHeaders: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RequestHeaders)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestHeaders (51) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 51:requestHeaders: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField61(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetRequestBody() {
    if err := oprot.WriteFieldBegin(ctx, "requestBody", thrift.STRING, 61); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 61:requestBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.RequestBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.requestBody (61) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 61:requestBody: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField71(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetResponseBody() {
    if err := oprot.WriteFieldBegin(ctx, "responseBody", thrift.STRING, 71); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 71:responseBody: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.ResponseBody)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.responseBody (71) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 71:responseBody: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField81(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetURL() {
    if err := oprot.WriteFieldBegin(ctx, "url", thrift.STRING, 81); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 81:url: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.URL)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.url (81) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 81:url: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField91(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMethod() {
    if err := oprot.WriteFieldBegin(ctx, "method", thrift.STRING, 91); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 91:method: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Method)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.method (91) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 91:method: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) writeField92(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetArguments() {
    if err := oprot.WriteFieldBegin(ctx, "arguments", thrift.STRING, 92); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 92:arguments: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Arguments)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.arguments (92) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 92:arguments: ", p), err) }
  }
  return err
}

func (p *TSpanEvent) Equals(other *TSpanEvent) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.SpanId != other.SpanId {
    if p.SpanId == nil || other.SpanId == nil {
      return false
    }
    if (*p.SpanId) != (*other.SpanId) { return false }
  }
  if p.Sequence != other.Sequence { return false }
  if p.StartElapsed != other.StartElapsed { return false }
  if p.EndElapsed != other.EndElapsed { return false }
  if p.RPC != other.RPC {
    if p.RPC == nil || other.RPC == nil {
      return false
    }
    if (*p.RPC) != (*other.RPC) { return false }
  }
  if p.ServiceType != other.ServiceType { return false }
  if p.EndPoint != other.EndPoint {
    if p.EndPoint == nil || other.EndPoint == nil {
      return false
    }
    if (*p.EndPoint) != (*other.EndPoint) { return false }
  }
  if len(p.Annotations) != len(other.Annotations) { return false }
  for i, _tgt := range p.Annotations {
    _src7 := other.Annotations[i]
    if !_tgt.Equals(_src7) { return false }
  }
  if p.Depth != other.Depth { return false }
  if p.NextSpanId != other.NextSpanId { return false }
  if p.DestinationId != other.DestinationId {
    if p.DestinationId == nil || other.DestinationId == nil {
      return false
    }
    if (*p.DestinationId) != (*other.DestinationId) { return false }
  }
  if p.ApiId != other.ApiId {
    if p.ApiId == nil || other.ApiId == nil {
      return false
    }
    if (*p.ApiId) != (*other.ApiId) { return false }
  }
  if !p.ExceptionInfo.Equals(other.ExceptionInfo) { return false }
  if p.ExceptionClassName != other.ExceptionClassName {
    if p.ExceptionClassName == nil || other.ExceptionClassName == nil {
      return false
    }
    if (*p.ExceptionClassName) != (*other.ExceptionClassName) { return false }
  }
  if p.AsyncId != other.AsyncId {
    if p.AsyncId == nil || other.AsyncId == nil {
      return false
    }
    if (*p.AsyncId) != (*other.AsyncId) { return false }
  }
  if p.NextAsyncId != other.NextAsyncId {
    if p.NextAsyncId == nil || other.NextAsyncId == nil {
      return false
    }
    if (*p.NextAsyncId) != (*other.NextAsyncId) { return false }
  }
  if p.AsyncSequence != other.AsyncSequence {
    if p.AsyncSequence == nil || other.AsyncSequence == nil {
      return false
    }
    if (*p.AsyncSequence) != (*other.AsyncSequence) { return false }
  }
  if p.ApiInfo != other.ApiInfo { return false }
  if p.LineNumber != other.LineNumber {
    if p.LineNumber == nil || other.LineNumber == nil {
      return false
    }
    if (*p.LineNumber) != (*other.LineNumber) { return false }
  }
  if !p.Sql.Equals(other.Sql) { return false }
  if p.Retcode != other.Retcode {
    if p.Retcode == nil || other.Retcode == nil {
      return false
    }
    if (*p.Retcode) != (*other.Retcode) { return false }
  }
  if p.RequestHeaders != other.RequestHeaders {
    if p.RequestHeaders == nil || other.RequestHeaders == nil {
      return false
    }
    if (*p.RequestHeaders) != (*other.RequestHeaders) { return false }
  }
  if p.RequestBody != other.RequestBody {
    if p.RequestBody == nil || other.RequestBody == nil {
      return false
    }
    if (*p.RequestBody) != (*other.RequestBody) { return false }
  }
  if p.ResponseBody != other.ResponseBody {
    if p.ResponseBody == nil || other.ResponseBody == nil {
      return false
    }
    if (*p.ResponseBody) != (*other.ResponseBody) { return false }
  }
  if p.URL != other.URL {
    if p.URL == nil || other.URL == nil {
      return false
    }
    if (*p.URL) != (*other.URL) { return false }
  }
  if p.Method != other.Method {
    if p.Method == nil || other.Method == nil {
      return false
    }
    if (*p.Method) != (*other.Method) { return false }
  }
  if p.Arguments != other.Arguments {
    if p.Arguments == nil || other.Arguments == nil {
      return false
    }
    if (*p.Arguments) != (*other.Arguments) { return false }
  }
  return true
}

func (p *TSpanEvent) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSpanEvent(%+v)", *p)
}

func (p *TSpanEvent) Validate() error {
  return nil
}
// Attributes:
//  - Key
//  - Value
type TAnnotation struct {
  Key int32 `thrift:"key,1" db:"key" json:"key"`
  Value *TAnnotationValue `thrift:"value,2" db:"value" json:"value,omitempty"`
}

func NewTAnnotation() *TAnnotation {
  return &TAnnotation{}
}


func (p *TAnnotation) GetKey() int32 {
  return p.Key
}
var TAnnotation_Value_DEFAULT *TAnnotationValue
func (p *TAnnotation) GetValue() *TAnnotationValue {
  if !p.IsSetValue() {
    return TAnnotation_Value_DEFAULT
  }
return p.Value
}
func (p *TAnnotation) IsSetValue() bool {
  return p.Value != nil
}

func (p *TAnnotation) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAnnotation)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Key = v
}
  return nil
}

func (p *TAnnotation)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.Value = &TAnnotationValue{}
  if err := p.Value.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.Value), err)
  }
  return nil
}

func (p *TAnnotation) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TAnnotation"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAnnotation) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "key", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:key: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Key)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.key (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:key: ", p), err) }
  return err
}

func (p *TAnnotation) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetValue() {
    if err := oprot.WriteFieldBegin(ctx, "value", thrift.STRUCT, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:value: ", p), err) }
    if err := p.Value.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.Value), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:value: ", p), err) }
  }
  return err
}

func (p *TAnnotation) Equals(other *TAnnotation) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Key != other.Key { return false }
  if !p.Value.Equals(other.Value) { return false }
  return true
}

func (p *TAnnotation) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAnnotation(%+v)", *p)
}

func (p *TAnnotation) Validate() error {
  return nil
}
// Attributes:
//  - StringValue
//  - BoolValue
//  - IntValue
//  - LongValue
//  - ShortValue
//  - DoubleValue
//  - BinaryValue
//  - ByteValue
//  - IntStringValue
//  - IntStringStringValue
type TAnnotationValue struct {
  StringValue *string `thrift:"stringValue,1" db:"stringValue" json:"stringValue,omitempty"`
  BoolValue *bool `thrift:"boolValue,2" db:"boolValue" json:"boolValue,omitempty"`
  IntValue *int32 `thrift:"intValue,3" db:"intValue" json:"intValue,omitempty"`
  LongValue *int64 `thrift:"longValue,4" db:"longValue" json:"longValue,omitempty"`
  ShortValue *int16 `thrift:"shortValue,5" db:"shortValue" json:"shortValue,omitempty"`
  DoubleValue *float64 `thrift:"doubleValue,6" db:"doubleValue" json:"doubleValue,omitempty"`
  BinaryValue []byte `thrift:"binaryValue,7" db:"binaryValue" json:"binaryValue,omitempty"`
  ByteValue *int8 `thrift:"byteValue,8" db:"byteValue" json:"byteValue,omitempty"`
  IntStringValue *TIntStringValue `thrift:"intStringValue,9" db:"intStringValue" json:"intStringValue,omitempty"`
  IntStringStringValue *TIntStringStringValue `thrift:"intStringStringValue,10" db:"intStringStringValue" json:"intStringStringValue,omitempty"`
}

func NewTAnnotationValue() *TAnnotationValue {
  return &TAnnotationValue{}
}

var TAnnotationValue_StringValue_DEFAULT string
func (p *TAnnotationValue) GetStringValue() string {
  if !p.IsSetStringValue() {
    return TAnnotationValue_StringValue_DEFAULT
  }
return *p.StringValue
}
var TAnnotationValue_BoolValue_DEFAULT bool
func (p *TAnnotationValue) GetBoolValue() bool {
  if !p.IsSetBoolValue() {
    return TAnnotationValue_BoolValue_DEFAULT
  }
return *p.BoolValue
}
var TAnnotationValue_IntValue_DEFAULT int32
func (p *TAnnotationValue) GetIntValue() int32 {
  if !p.IsSetIntValue() {
    return TAnnotationValue_IntValue_DEFAULT
  }
return *p.IntValue
}
var TAnnotationValue_LongValue_DEFAULT int64
func (p *TAnnotationValue) GetLongValue() int64 {
  if !p.IsSetLongValue() {
    return TAnnotationValue_LongValue_DEFAULT
  }
return *p.LongValue
}
var TAnnotationValue_ShortValue_DEFAULT int16
func (p *TAnnotationValue) GetShortValue() int16 {
  if !p.IsSetShortValue() {
    return TAnnotationValue_ShortValue_DEFAULT
  }
return *p.ShortValue
}
var TAnnotationValue_DoubleValue_DEFAULT float64
func (p *TAnnotationValue) GetDoubleValue() float64 {
  if !p.IsSetDoubleValue() {
    return TAnnotationValue_DoubleValue_DEFAULT
  }
return *p.DoubleValue
}
var TAnnotationValue_BinaryValue_DEFAULT []byte

func (p *TAnnotationValue) GetBinaryValue() []byte {
  return p.BinaryValue
}
var TAnnotationValue_ByteValue_DEFAULT int8
func (p *TAnnotationValue) GetByteValue() int8 {
  if !p.IsSetByteValue() {
    return TAnnotationValue_ByteValue_DEFAULT
  }
return *p.ByteValue
}
var TAnnotationValue_IntStringValue_DEFAULT *TIntStringValue
func (p *TAnnotationValue) GetIntStringValue() *TIntStringValue {
  if !p.IsSetIntStringValue() {
    return TAnnotationValue_IntStringValue_DEFAULT
  }
return p.IntStringValue
}
var TAnnotationValue_IntStringStringValue_DEFAULT *TIntStringStringValue
func (p *TAnnotationValue) GetIntStringStringValue() *TIntStringStringValue {
  if !p.IsSetIntStringStringValue() {
    return TAnnotationValue_IntStringStringValue_DEFAULT
  }
return p.IntStringStringValue
}
func (p *TAnnotationValue) CountSetFieldsTAnnotationValue() int {
  count := 0
  if (p.IsSetStringValue()) {
    count++
  }
  if (p.IsSetBoolValue()) {
    count++
  }
  if (p.IsSetIntValue()) {
    count++
  }
  if (p.IsSetLongValue()) {
    count++
  }
  if (p.IsSetShortValue()) {
    count++
  }
  if (p.IsSetDoubleValue()) {
    count++
  }
  if (p.IsSetBinaryValue()) {
    count++
  }
  if (p.IsSetByteValue()) {
    count++
  }
  if (p.IsSetIntStringValue()) {
    count++
  }
  if (p.IsSetIntStringStringValue()) {
    count++
  }
  return count

}

func (p *TAnnotationValue) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *TAnnotationValue) IsSetBoolValue() bool {
  return p.BoolValue != nil
}

func (p *TAnnotationValue) IsSetIntValue() bool {
  return p.IntValue != nil
}

func (p *TAnnotationValue) IsSetLongValue() bool {
  return p.LongValue != nil
}

func (p *TAnnotationValue) IsSetShortValue() bool {
  return p.ShortValue != nil
}

func (p *TAnnotationValue) IsSetDoubleValue() bool {
  return p.DoubleValue != nil
}

func (p *TAnnotationValue) IsSetBinaryValue() bool {
  return p.BinaryValue != nil
}

func (p *TAnnotationValue) IsSetByteValue() bool {
  return p.ByteValue != nil
}

func (p *TAnnotationValue) IsSetIntStringValue() bool {
  return p.IntStringValue != nil
}

func (p *TAnnotationValue) IsSetIntStringStringValue() bool {
  return p.IntStringStringValue != nil
}

func (p *TAnnotationValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I16 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.DOUBLE {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.BYTE {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TAnnotationValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.BoolValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.IntValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.LongValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI16(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.ShortValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadDouble(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.DoubleValue = &v
}
  return nil
}

func (p *TAnnotationValue)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.BinaryValue = v
}
  return nil
}

func (p *TAnnotationValue)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadByte(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  temp := int8(v)
  p.ByteValue = &temp
}
  return nil
}

func (p *TAnnotationValue)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  p.IntStringValue = &TIntStringValue{}
  if err := p.IntStringValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntStringValue), err)
  }
  return nil
}

func (p *TAnnotationValue)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  p.IntStringStringValue = &TIntStringStringValue{}
  if err := p.IntStringStringValue.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.IntStringStringValue), err)
  }
  return nil
}

func (p *TAnnotationValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if c := p.CountSetFieldsTAnnotationValue(); c != 1 {
    return fmt.Errorf("%T write union: exactly one field must be set (%d set)", p, c)
  }
  if err := oprot.WriteStructBegin(ctx, "TAnnotationValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TAnnotationValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stringValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stringValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBoolValue() {
    if err := oprot.WriteFieldBegin(ctx, "boolValue", thrift.BOOL, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:boolValue: ", p), err) }
    if err := oprot.WriteBool(ctx, bool(*p.BoolValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.boolValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:boolValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntValue() {
    if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I32, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:intValue: ", p), err) }
    if err := oprot.WriteI32(ctx, int32(*p.IntValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.intValue (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:intValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetLongValue() {
    if err := oprot.WriteFieldBegin(ctx, "longValue", thrift.I64, 4); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:longValue: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.LongValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.longValue (4) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 4:longValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetShortValue() {
    if err := oprot.WriteFieldBegin(ctx, "shortValue", thrift.I16, 5); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:shortValue: ", p), err) }
    if err := oprot.WriteI16(ctx, int16(*p.ShortValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.shortValue (5) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 5:shortValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetDoubleValue() {
    if err := oprot.WriteFieldBegin(ctx, "doubleValue", thrift.DOUBLE, 6); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:doubleValue: ", p), err) }
    if err := oprot.WriteDouble(ctx, float64(*p.DoubleValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.doubleValue (6) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 6:doubleValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBinaryValue() {
    if err := oprot.WriteFieldBegin(ctx, "binaryValue", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:binaryValue: ", p), err) }
    if err := oprot.WriteBinary(ctx, p.BinaryValue); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.binaryValue (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:binaryValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetByteValue() {
    if err := oprot.WriteFieldBegin(ctx, "byteValue", thrift.BYTE, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:byteValue: ", p), err) }
    if err := oprot.WriteByte(ctx, int8(*p.ByteValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.byteValue (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:byteValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "intStringValue", thrift.STRUCT, 9); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:intStringValue: ", p), err) }
    if err := p.IntStringValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntStringValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 9:intStringValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetIntStringStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "intStringStringValue", thrift.STRUCT, 10); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:intStringStringValue: ", p), err) }
    if err := p.IntStringStringValue.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.IntStringStringValue), err)
    }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 10:intStringStringValue: ", p), err) }
  }
  return err
}

func (p *TAnnotationValue) Equals(other *TAnnotationValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StringValue != other.StringValue {
    if p.StringValue == nil || other.StringValue == nil {
      return false
    }
    if (*p.StringValue) != (*other.StringValue) { return false }
  }
  if p.BoolValue != other.BoolValue {
    if p.BoolValue == nil || other.BoolValue == nil {
      return false
    }
    if (*p.BoolValue) != (*other.BoolValue) { return false }
  }
  if p.IntValue != other.IntValue {
    if p.IntValue == nil || other.IntValue == nil {
      return false
    }
    if (*p.IntValue) != (*other.IntValue) { return false }
  }
  if p.LongValue != other.LongValue {
    if p.LongValue == nil || other.LongValue == nil {
      return false
    }
    if (*p.LongValue) != (*other.LongValue) { return false }
  }
  if p.ShortValue != other.ShortValue {
    if p.ShortValue == nil || other.ShortValue == nil {
      return false
    }
    if (*p.ShortValue) != (*other.ShortValue) { return false }
  }
  if p.DoubleValue != other.DoubleValue {
    if p.DoubleValue == nil || other.DoubleValue == nil {
      return false
    }
    if (*p.DoubleValue) != (*other.DoubleValue) { return false }
  }
  if bytes.Compare(p.BinaryValue, other.BinaryValue) != 0 { return false }
  if p.ByteValue != other.ByteValue {
    if p.ByteValue == nil || other.ByteValue == nil {
      return false
    }
    if (*p.ByteValue) != (*other.ByteValue) { return false }
  }
  if !p.IntStringValue.Equals(other.IntStringValue) { return false }
  if !p.IntStringStringValue.Equals(other.IntStringStringValue) { return false }
  return true
}

func (p *TAnnotationValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TAnnotationValue(%+v)", *p)
}

func (p *TAnnotationValue) Validate() error {
  return nil
}
// Attributes:
//  - IntValue
//  - StringValue
type TIntStringValue struct {
  IntValue int32 `thrift:"intValue,1" db:"intValue" json:"intValue"`
  StringValue *string `thrift:"stringValue,2" db:"stringValue" json:"stringValue,omitempty"`
}

func NewTIntStringValue() *TIntStringValue {
  return &TIntStringValue{}
}


func (p *TIntStringValue) GetIntValue() int32 {
  return p.IntValue
}
var TIntStringValue_StringValue_DEFAULT string
func (p *TIntStringValue) GetStringValue() string {
  if !p.IsSetStringValue() {
    return TIntStringValue_StringValue_DEFAULT
  }
return *p.StringValue
}
func (p *TIntStringValue) IsSetStringValue() bool {
  return p.StringValue != nil
}

func (p *TIntStringValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIntStringValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *TIntStringValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringValue = &v
}
  return nil
}

func (p *TIntStringValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TIntStringValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIntStringValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue: ", p), err) }
  return err
}

func (p *TIntStringValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue: ", p), err) }
  }
  return err
}

func (p *TIntStringValue) Equals(other *TIntStringValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IntValue != other.IntValue { return false }
  if p.StringValue != other.StringValue {
    if p.StringValue == nil || other.StringValue == nil {
      return false
    }
    if (*p.StringValue) != (*other.StringValue) { return false }
  }
  return true
}

func (p *TIntStringValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIntStringValue(%+v)", *p)
}

func (p *TIntStringValue) Validate() error {
  return nil
}
// Attributes:
//  - IntValue
//  - StringValue1
//  - StringValue2
type TIntStringStringValue struct {
  IntValue int32 `thrift:"intValue,1" db:"intValue" json:"intValue"`
  StringValue1 *string `thrift:"stringValue1,2" db:"stringValue1" json:"stringValue1,omitempty"`
  StringValue2 *string `thrift:"stringValue2,3" db:"stringValue2" json:"stringValue2,omitempty"`
}

func NewTIntStringStringValue() *TIntStringStringValue {
  return &TIntStringStringValue{}
}


func (p *TIntStringStringValue) GetIntValue() int32 {
  return p.IntValue
}
var TIntStringStringValue_StringValue1_DEFAULT string
func (p *TIntStringStringValue) GetStringValue1() string {
  if !p.IsSetStringValue1() {
    return TIntStringStringValue_StringValue1_DEFAULT
  }
return *p.StringValue1
}
var TIntStringStringValue_StringValue2_DEFAULT string
func (p *TIntStringStringValue) GetStringValue2() string {
  if !p.IsSetStringValue2() {
    return TIntStringStringValue_StringValue2_DEFAULT
  }
return *p.StringValue2
}
func (p *TIntStringStringValue) IsSetStringValue1() bool {
  return p.StringValue1 != nil
}

func (p *TIntStringStringValue) IsSetStringValue2() bool {
  return p.StringValue2 != nil
}

func (p *TIntStringStringValue) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TIntStringStringValue)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.IntValue = v
}
  return nil
}

func (p *TIntStringStringValue)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StringValue1 = &v
}
  return nil
}

func (p *TIntStringStringValue)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StringValue2 = &v
}
  return nil
}

func (p *TIntStringStringValue) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TIntStringStringValue"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TIntStringStringValue) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "intValue", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:intValue: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.IntValue)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.intValue (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:intValue: ", p), err) }
  return err
}

func (p *TIntStringStringValue) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue1() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue1", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stringValue1: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue1)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue1 (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stringValue1: ", p), err) }
  }
  return err
}

func (p *TIntStringStringValue) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStringValue2() {
    if err := oprot.WriteFieldBegin(ctx, "stringValue2", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:stringValue2: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.StringValue2)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.stringValue2 (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:stringValue2: ", p), err) }
  }
  return err
}

func (p *TIntStringStringValue) Equals(other *TIntStringStringValue) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.IntValue != other.IntValue { return false }
  if p.StringValue1 != other.StringValue1 {
    if p.StringValue1 == nil || other.StringValue1 == nil {
      return false
    }
    if (*p.StringValue1) != (*other.StringValue1) { return false }
  }
  if p.StringValue2 != other.StringValue2 {
    if p.StringValue2 == nil || other.StringValue2 == nil {
      return false
    }
    if (*p.StringValue2) != (*other.StringValue2) { return false }
  }
  return true
}

func (p *TIntStringStringValue) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TIntStringStringValue(%+v)", *p)
}

func (p *TIntStringStringValue) Validate() error {
  return nil
}
// Attributes:
//  - Dbhost
//  - Dbtype
//  - Db
//  - SqlHash
//  - Outputs
//  - BindValue
//  - Status
//  - Err
//  - StartTime
//  - Dur
type TSql struct {
  Dbhost string `thrift:"dbhost,1" db:"dbhost" json:"dbhost"`
  Dbtype string `thrift:"dbtype,2" db:"dbtype" json:"dbtype"`
  Db string `thrift:"db,3" db:"db" json:"db"`
  // unused fields # 4 to 5
  SqlHash string `thrift:"sqlHash,6" db:"sqlHash" json:"sqlHash"`
  Outputs *string `thrift:"outputs,7" db:"outputs" json:"outputs,omitempty"`
  BindValue *string `thrift:"bindValue,8" db:"bindValue" json:"bindValue,omitempty"`
  // unused field # 9
  Status string `thrift:"status,10" db:"status" json:"status"`
  Err *string `thrift:"err,11" db:"err" json:"err,omitempty"`
  StartTime int64 `thrift:"startTime,12" db:"startTime" json:"startTime"`
  Dur int64 `thrift:"dur,13" db:"dur" json:"dur"`
}

func NewTSql() *TSql {
  return &TSql{}
}


func (p *TSql) GetDbhost() string {
  return p.Dbhost
}

func (p *TSql) GetDbtype() string {
  return p.Dbtype
}

func (p *TSql) GetDb() string {
  return p.Db
}

func (p *TSql) GetSqlHash() string {
  return p.SqlHash
}
var TSql_Outputs_DEFAULT string
func (p *TSql) GetOutputs() string {
  if !p.IsSetOutputs() {
    return TSql_Outputs_DEFAULT
  }
return *p.Outputs
}
var TSql_BindValue_DEFAULT string
func (p *TSql) GetBindValue() string {
  if !p.IsSetBindValue() {
    return TSql_BindValue_DEFAULT
  }
return *p.BindValue
}

func (p *TSql) GetStatus() string {
  return p.Status
}
var TSql_Err_DEFAULT string
func (p *TSql) GetErr() string {
  if !p.IsSetErr() {
    return TSql_Err_DEFAULT
  }
return *p.Err
}

func (p *TSql) GetStartTime() int64 {
  return p.StartTime
}

func (p *TSql) GetDur() int64 {
  return p.Dur
}
func (p *TSql) IsSetOutputs() bool {
  return p.Outputs != nil
}

func (p *TSql) IsSetBindValue() bool {
  return p.BindValue != nil
}

func (p *TSql) IsSetErr() bool {
  return p.Err != nil
}

func (p *TSql) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TSql)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Dbhost = v
}
  return nil
}

func (p *TSql)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Dbtype = v
}
  return nil
}

func (p *TSql)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Db = v
}
  return nil
}

func (p *TSql)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.SqlHash = v
}
  return nil
}

func (p *TSql)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.Outputs = &v
}
  return nil
}

func (p *TSql)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.BindValue = &v
}
  return nil
}

func (p *TSql)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.Status = v
}
  return nil
}

func (p *TSql)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Err = &v
}
  return nil
}

func (p *TSql)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  p.StartTime = v
}
  return nil
}

func (p *TSql)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 13: ", err)
} else {
  p.Dur = v
}
  return nil
}

func (p *TSql) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TSql"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TSql) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbhost", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:dbhost: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbhost)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbhost (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:dbhost: ", p), err) }
  return err
}

func (p *TSql) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dbtype", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:dbtype: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Dbtype)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dbtype (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:dbtype: ", p), err) }
  return err
}

func (p *TSql) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "db", thrift.STRING, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:db: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Db)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.db (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:db: ", p), err) }
  return err
}

func (p *TSql) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "sqlHash", thrift.STRING, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:sqlHash: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.SqlHash)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.sqlHash (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:sqlHash: ", p), err) }
  return err
}

func (p *TSql) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetOutputs() {
    if err := oprot.WriteFieldBegin(ctx, "outputs", thrift.STRING, 7); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:outputs: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Outputs)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.outputs (7) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 7:outputs: ", p), err) }
  }
  return err
}

func (p *TSql) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetBindValue() {
    if err := oprot.WriteFieldBegin(ctx, "bindValue", thrift.STRING, 8); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:bindValue: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.BindValue)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.bindValue (8) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 8:bindValue: ", p), err) }
  }
  return err
}

func (p *TSql) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "status", thrift.STRING, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:status: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Status)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.status (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:status: ", p), err) }
  return err
}

func (p *TSql) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetErr() {
    if err := oprot.WriteFieldBegin(ctx, "err", thrift.STRING, 11); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:err: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Err)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.err (11) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 11:err: ", p), err) }
  }
  return err
}

func (p *TSql) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:startTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.StartTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.startTime (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:startTime: ", p), err) }
  return err
}

func (p *TSql) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "dur", thrift.I64, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:dur: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.Dur)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.dur (13) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:dur: ", p), err) }
  return err
}

func (p *TSql) Equals(other *TSql) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Dbhost != other.Dbhost { return false }
  if p.Dbtype != other.Dbtype { return false }
  if p.Db != other.Db { return false }
  if p.SqlHash != other.SqlHash { return false }
  if p.Outputs != other.Outputs {
    if p.Outputs == nil || other.Outputs == nil {
      return false
    }
    if (*p.Outputs) != (*other.Outputs) { return false }
  }
  if p.BindValue != other.BindValue {
    if p.BindValue == nil || other.BindValue == nil {
      return false
    }
    if (*p.BindValue) != (*other.BindValue) { return false }
  }
  if p.Status != other.Status { return false }
  if p.Err != other.Err {
    if p.Err == nil || other.Err == nil {
      return false
    }
    if (*p.Err) != (*other.Err) { return false }
  }
  if p.StartTime != other.StartTime { return false }
  if p.Dur != other.Dur { return false }
  return true
}

func (p *TSql) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TSql(%+v)", *p)
}

func (p *TSql) Validate() error {
  return nil
}
