// Code generated by Thrift Compiler (0.18.1). DO NOT EDIT.

package command

import (
	"bytes"
	"context"
	"database/sql/driver"
	"errors"
	"fmt"
	"time"
	thrift "github.com/apache/thrift/lib/go/thrift"
	"strings"
	"regexp"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = errors.New
var _ = context.Background
var _ = time.Now
var _ = bytes.Equal
// (needed by validator.)
var _ = strings.Contains
var _ = regexp.MatchString

type TThreadDumpType int64
const (
  TThreadDumpType_TARGET TThreadDumpType = 0
  TThreadDumpType_PENDING TThreadDumpType = 1
)

func (p TThreadDumpType) String() string {
  switch p {
  case TThreadDumpType_TARGET: return "TARGET"
  case TThreadDumpType_PENDING: return "PENDING"
  }
  return "<UNSET>"
}

func TThreadDumpTypeFromString(s string) (TThreadDumpType, error) {
  switch s {
  case "TARGET": return TThreadDumpType_TARGET, nil 
  case "PENDING": return TThreadDumpType_PENDING, nil 
  }
  return TThreadDumpType(0), fmt.Errorf("not a valid TThreadDumpType string")
}


func TThreadDumpTypePtr(v TThreadDumpType) *TThreadDumpType { return &v }

func (p TThreadDumpType) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TThreadDumpType) UnmarshalText(text []byte) error {
q, err := TThreadDumpTypeFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TThreadDumpType) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TThreadDumpType(v)
return nil
}

func (p * TThreadDumpType) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TThreadState int64
const (
  TThreadState_NEW TThreadState = 0
  TThreadState_RUNNABLE TThreadState = 1
  TThreadState_BLOCKED TThreadState = 2
  TThreadState_WAITING TThreadState = 3
  TThreadState_TIMED_WAITING TThreadState = 4
  TThreadState_TERMINATED TThreadState = 5
)

func (p TThreadState) String() string {
  switch p {
  case TThreadState_NEW: return "NEW"
  case TThreadState_RUNNABLE: return "RUNNABLE"
  case TThreadState_BLOCKED: return "BLOCKED"
  case TThreadState_WAITING: return "WAITING"
  case TThreadState_TIMED_WAITING: return "TIMED_WAITING"
  case TThreadState_TERMINATED: return "TERMINATED"
  }
  return "<UNSET>"
}

func TThreadStateFromString(s string) (TThreadState, error) {
  switch s {
  case "NEW": return TThreadState_NEW, nil 
  case "RUNNABLE": return TThreadState_RUNNABLE, nil 
  case "BLOCKED": return TThreadState_BLOCKED, nil 
  case "WAITING": return TThreadState_WAITING, nil 
  case "TIMED_WAITING": return TThreadState_TIMED_WAITING, nil 
  case "TERMINATED": return TThreadState_TERMINATED, nil 
  }
  return TThreadState(0), fmt.Errorf("not a valid TThreadState string")
}


func TThreadStatePtr(v TThreadState) *TThreadState { return &v }

func (p TThreadState) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TThreadState) UnmarshalText(text []byte) error {
q, err := TThreadStateFromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TThreadState) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TThreadState(v)
return nil
}

func (p * TThreadState) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
type TRouteResult_ int64
const (
  TRouteResult__OK TRouteResult_ = 0
  TRouteResult__BAD_REQUEST TRouteResult_ = 200
  TRouteResult__EMPTY_REQUEST TRouteResult_ = 201
  TRouteResult__NOT_SUPPORTED_REQUEST TRouteResult_ = 202
  TRouteResult__BAD_RESPONSE TRouteResult_ = 210
  TRouteResult__EMPTY_RESPONSE TRouteResult_ = 211
  TRouteResult__NOT_SUPPORTED_RESPONSE TRouteResult_ = 212
  TRouteResult__TIMEOUT TRouteResult_ = 220
  TRouteResult__NOT_FOUND TRouteResult_ = 230
  TRouteResult__NOT_ACCEPTABLE TRouteResult_ = 240
  TRouteResult__NOT_SUPPORTED_SERVICE TRouteResult_ = 241
  TRouteResult__UNKNOWN TRouteResult_ = -1
)

func (p TRouteResult_) String() string {
  switch p {
  case TRouteResult__OK: return "OK"
  case TRouteResult__BAD_REQUEST: return "BAD_REQUEST"
  case TRouteResult__EMPTY_REQUEST: return "EMPTY_REQUEST"
  case TRouteResult__NOT_SUPPORTED_REQUEST: return "NOT_SUPPORTED_REQUEST"
  case TRouteResult__BAD_RESPONSE: return "BAD_RESPONSE"
  case TRouteResult__EMPTY_RESPONSE: return "EMPTY_RESPONSE"
  case TRouteResult__NOT_SUPPORTED_RESPONSE: return "NOT_SUPPORTED_RESPONSE"
  case TRouteResult__TIMEOUT: return "TIMEOUT"
  case TRouteResult__NOT_FOUND: return "NOT_FOUND"
  case TRouteResult__NOT_ACCEPTABLE: return "NOT_ACCEPTABLE"
  case TRouteResult__NOT_SUPPORTED_SERVICE: return "NOT_SUPPORTED_SERVICE"
  case TRouteResult__UNKNOWN: return "UNKNOWN"
  }
  return "<UNSET>"
}

func TRouteResult_FromString(s string) (TRouteResult_, error) {
  switch s {
  case "OK": return TRouteResult__OK, nil 
  case "BAD_REQUEST": return TRouteResult__BAD_REQUEST, nil 
  case "EMPTY_REQUEST": return TRouteResult__EMPTY_REQUEST, nil 
  case "NOT_SUPPORTED_REQUEST": return TRouteResult__NOT_SUPPORTED_REQUEST, nil 
  case "BAD_RESPONSE": return TRouteResult__BAD_RESPONSE, nil 
  case "EMPTY_RESPONSE": return TRouteResult__EMPTY_RESPONSE, nil 
  case "NOT_SUPPORTED_RESPONSE": return TRouteResult__NOT_SUPPORTED_RESPONSE, nil 
  case "TIMEOUT": return TRouteResult__TIMEOUT, nil 
  case "NOT_FOUND": return TRouteResult__NOT_FOUND, nil 
  case "NOT_ACCEPTABLE": return TRouteResult__NOT_ACCEPTABLE, nil 
  case "NOT_SUPPORTED_SERVICE": return TRouteResult__NOT_SUPPORTED_SERVICE, nil 
  case "UNKNOWN": return TRouteResult__UNKNOWN, nil 
  }
  return TRouteResult_(0), fmt.Errorf("not a valid TRouteResult_ string")
}


func TRouteResult_Ptr(v TRouteResult_) *TRouteResult_ { return &v }

func (p TRouteResult_) MarshalText() ([]byte, error) {
return []byte(p.String()), nil
}

func (p *TRouteResult_) UnmarshalText(text []byte) error {
q, err := TRouteResult_FromString(string(text))
if (err != nil) {
return err
}
*p = q
return nil
}

func (p *TRouteResult_) Scan(value interface{}) error {
v, ok := value.(int64)
if !ok {
return errors.New("Scan value is not int64")
}
*p = TRouteResult_(v)
return nil
}

func (p * TRouteResult_) Value() (driver.Value, error) {
  if p == nil {
    return nil, nil
  }
return int64(*p), nil
}
// Attributes:
//  - Type
//  - Name
//  - PendingTimeMillis
type TCommandThreadDump struct {
  Type TThreadDumpType `thrift:"type,1" db:"type" json:"type"`
  Name *string `thrift:"name,2" db:"name" json:"name,omitempty"`
  PendingTimeMillis *int64 `thrift:"pendingTimeMillis,3" db:"pendingTimeMillis" json:"pendingTimeMillis,omitempty"`
}

func NewTCommandThreadDump() *TCommandThreadDump {
  return &TCommandThreadDump{
Type: 0,
}
}


func (p *TCommandThreadDump) GetType() TThreadDumpType {
  return p.Type
}
var TCommandThreadDump_Name_DEFAULT string
func (p *TCommandThreadDump) GetName() string {
  if !p.IsSetName() {
    return TCommandThreadDump_Name_DEFAULT
  }
return *p.Name
}
var TCommandThreadDump_PendingTimeMillis_DEFAULT int64
func (p *TCommandThreadDump) GetPendingTimeMillis() int64 {
  if !p.IsSetPendingTimeMillis() {
    return TCommandThreadDump_PendingTimeMillis_DEFAULT
  }
return *p.PendingTimeMillis
}
func (p *TCommandThreadDump) IsSetName() bool {
  return p.Name != nil
}

func (p *TCommandThreadDump) IsSetPendingTimeMillis() bool {
  return p.PendingTimeMillis != nil
}

func (p *TCommandThreadDump) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCommandThreadDump)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TThreadDumpType(v)
  p.Type = temp
}
  return nil
}

func (p *TCommandThreadDump)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Name = &v
}
  return nil
}

func (p *TCommandThreadDump)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.PendingTimeMillis = &v
}
  return nil
}

func (p *TCommandThreadDump) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCommandThreadDump"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCommandThreadDump) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "type", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:type: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.Type)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.type (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:type: ", p), err) }
  return err
}

func (p *TCommandThreadDump) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetName() {
    if err := oprot.WriteFieldBegin(ctx, "name", thrift.STRING, 2); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Name)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err) }
  }
  return err
}

func (p *TCommandThreadDump) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetPendingTimeMillis() {
    if err := oprot.WriteFieldBegin(ctx, "pendingTimeMillis", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:pendingTimeMillis: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.PendingTimeMillis)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.pendingTimeMillis (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:pendingTimeMillis: ", p), err) }
  }
  return err
}

func (p *TCommandThreadDump) Equals(other *TCommandThreadDump) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Type != other.Type { return false }
  if p.Name != other.Name {
    if p.Name == nil || other.Name == nil {
      return false
    }
    if (*p.Name) != (*other.Name) { return false }
  }
  if p.PendingTimeMillis != other.PendingTimeMillis {
    if p.PendingTimeMillis == nil || other.PendingTimeMillis == nil {
      return false
    }
    if (*p.PendingTimeMillis) != (*other.PendingTimeMillis) { return false }
  }
  return true
}

func (p *TCommandThreadDump) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCommandThreadDump(%+v)", *p)
}

func (p *TCommandThreadDump) Validate() error {
  return nil
}
// Attributes:
//  - StackDepth
//  - StackFrame
type TMonitorInfo struct {
  StackDepth int32 `thrift:"stackDepth,1" db:"stackDepth" json:"stackDepth"`
  StackFrame string `thrift:"stackFrame,2" db:"stackFrame" json:"stackFrame"`
}

func NewTMonitorInfo() *TMonitorInfo {
  return &TMonitorInfo{}
}


func (p *TMonitorInfo) GetStackDepth() int32 {
  return p.StackDepth
}

func (p *TMonitorInfo) GetStackFrame() string {
  return p.StackFrame
}
func (p *TMonitorInfo) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TMonitorInfo)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.StackDepth = v
}
  return nil
}

func (p *TMonitorInfo)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.StackFrame = v
}
  return nil
}

func (p *TMonitorInfo) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TMonitorInfo"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TMonitorInfo) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stackDepth", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:stackDepth: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.StackDepth)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stackDepth (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:stackDepth: ", p), err) }
  return err
}

func (p *TMonitorInfo) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stackFrame", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:stackFrame: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.StackFrame)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.stackFrame (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:stackFrame: ", p), err) }
  return err
}

func (p *TMonitorInfo) Equals(other *TMonitorInfo) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.StackDepth != other.StackDepth { return false }
  if p.StackFrame != other.StackFrame { return false }
  return true
}

func (p *TMonitorInfo) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TMonitorInfo(%+v)", *p)
}

func (p *TMonitorInfo) Validate() error {
  return nil
}
// Attributes:
//  - ThreadName
//  - ThreadId
//  - BlockedTime
//  - BlockedCount
//  - WaitedTime
//  - WaitedCount
//  - LockName
//  - LockOwnerId
//  - LockOwnerName
//  - InNative
//  - Suspended
//  - ThreadState
//  - StackTrace
//  - LockedMonitors
//  - LockedSynchronizers
type TThreadDump struct {
  ThreadName string `thrift:"threadName,1" db:"threadName" json:"threadName"`
  ThreadId int64 `thrift:"threadId,2" db:"threadId" json:"threadId"`
  BlockedTime int64 `thrift:"blockedTime,3" db:"blockedTime" json:"blockedTime"`
  BlockedCount int64 `thrift:"blockedCount,4" db:"blockedCount" json:"blockedCount"`
  WaitedTime int64 `thrift:"waitedTime,5" db:"waitedTime" json:"waitedTime"`
  WaitedCount int64 `thrift:"waitedCount,6" db:"waitedCount" json:"waitedCount"`
  LockName string `thrift:"lockName,7" db:"lockName" json:"lockName"`
  LockOwnerId int64 `thrift:"lockOwnerId,8" db:"lockOwnerId" json:"lockOwnerId"`
  LockOwnerName string `thrift:"lockOwnerName,9" db:"lockOwnerName" json:"lockOwnerName"`
  InNative bool `thrift:"inNative,10" db:"inNative" json:"inNative"`
  Suspended bool `thrift:"suspended,11" db:"suspended" json:"suspended"`
  ThreadState TThreadState `thrift:"threadState,12" db:"threadState" json:"threadState"`
  StackTrace []string `thrift:"stackTrace,13" db:"stackTrace" json:"stackTrace"`
  LockedMonitors []*TMonitorInfo `thrift:"lockedMonitors,14" db:"lockedMonitors" json:"lockedMonitors"`
  LockedSynchronizers []string `thrift:"lockedSynchronizers,15" db:"lockedSynchronizers" json:"lockedSynchronizers"`
}

func NewTThreadDump() *TThreadDump {
  return &TThreadDump{}
}


func (p *TThreadDump) GetThreadName() string {
  return p.ThreadName
}

func (p *TThreadDump) GetThreadId() int64 {
  return p.ThreadId
}

func (p *TThreadDump) GetBlockedTime() int64 {
  return p.BlockedTime
}

func (p *TThreadDump) GetBlockedCount() int64 {
  return p.BlockedCount
}

func (p *TThreadDump) GetWaitedTime() int64 {
  return p.WaitedTime
}

func (p *TThreadDump) GetWaitedCount() int64 {
  return p.WaitedCount
}

func (p *TThreadDump) GetLockName() string {
  return p.LockName
}

func (p *TThreadDump) GetLockOwnerId() int64 {
  return p.LockOwnerId
}

func (p *TThreadDump) GetLockOwnerName() string {
  return p.LockOwnerName
}

func (p *TThreadDump) GetInNative() bool {
  return p.InNative
}

func (p *TThreadDump) GetSuspended() bool {
  return p.Suspended
}

func (p *TThreadDump) GetThreadState() TThreadState {
  return p.ThreadState
}

func (p *TThreadDump) GetStackTrace() []string {
  return p.StackTrace
}

func (p *TThreadDump) GetLockedMonitors() []*TMonitorInfo {
  return p.LockedMonitors
}

func (p *TThreadDump) GetLockedSynchronizers() []string {
  return p.LockedSynchronizers
}
func (p *TThreadDump) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 5:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField5(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 6:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField6(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 7:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField7(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 8:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField8(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 9:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField9(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 10:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField10(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 11:
      if fieldTypeId == thrift.BOOL {
        if err := p.ReadField11(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 12:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField12(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 13:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField13(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 14:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField14(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 15:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField15(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TThreadDump)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ThreadName = v
}
  return nil
}

func (p *TThreadDump)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.ThreadId = v
}
  return nil
}

func (p *TThreadDump)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.BlockedTime = v
}
  return nil
}

func (p *TThreadDump)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.BlockedCount = v
}
  return nil
}

func (p *TThreadDump)  ReadField5(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 5: ", err)
} else {
  p.WaitedTime = v
}
  return nil
}

func (p *TThreadDump)  ReadField6(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 6: ", err)
} else {
  p.WaitedCount = v
}
  return nil
}

func (p *TThreadDump)  ReadField7(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 7: ", err)
} else {
  p.LockName = v
}
  return nil
}

func (p *TThreadDump)  ReadField8(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 8: ", err)
} else {
  p.LockOwnerId = v
}
  return nil
}

func (p *TThreadDump)  ReadField9(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 9: ", err)
} else {
  p.LockOwnerName = v
}
  return nil
}

func (p *TThreadDump)  ReadField10(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 10: ", err)
} else {
  p.InNative = v
}
  return nil
}

func (p *TThreadDump)  ReadField11(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBool(ctx); err != nil {
  return thrift.PrependError("error reading field 11: ", err)
} else {
  p.Suspended = v
}
  return nil
}

func (p *TThreadDump)  ReadField12(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 12: ", err)
} else {
  temp := TThreadState(v)
  p.ThreadState = temp
}
  return nil
}

func (p *TThreadDump)  ReadField13(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.StackTrace =  tSlice
  for i := 0; i < size; i ++ {
var _elem0 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem0 = v
}
    p.StackTrace = append(p.StackTrace, _elem0)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TThreadDump)  ReadField14(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TMonitorInfo, 0, size)
  p.LockedMonitors =  tSlice
  for i := 0; i < size; i ++ {
    _elem1 := &TMonitorInfo{}
    if err := _elem1.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem1), err)
    }
    p.LockedMonitors = append(p.LockedMonitors, _elem1)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TThreadDump)  ReadField15(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]string, 0, size)
  p.LockedSynchronizers =  tSlice
  for i := 0; i < size; i ++ {
var _elem2 string
    if v, err := iprot.ReadString(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem2 = v
}
    p.LockedSynchronizers = append(p.LockedSynchronizers, _elem2)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TThreadDump) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TThreadDump"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
    if err := p.writeField5(ctx, oprot); err != nil { return err }
    if err := p.writeField6(ctx, oprot); err != nil { return err }
    if err := p.writeField7(ctx, oprot); err != nil { return err }
    if err := p.writeField8(ctx, oprot); err != nil { return err }
    if err := p.writeField9(ctx, oprot); err != nil { return err }
    if err := p.writeField10(ctx, oprot); err != nil { return err }
    if err := p.writeField11(ctx, oprot); err != nil { return err }
    if err := p.writeField12(ctx, oprot); err != nil { return err }
    if err := p.writeField13(ctx, oprot); err != nil { return err }
    if err := p.writeField14(ctx, oprot); err != nil { return err }
    if err := p.writeField15(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TThreadDump) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ThreadName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadName: ", p), err) }
  return err
}

func (p *TThreadDump) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadId", thrift.I64, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threadId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ThreadId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threadId: ", p), err) }
  return err
}

func (p *TThreadDump) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "blockedTime", thrift.I64, 3); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:blockedTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BlockedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockedTime (3) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 3:blockedTime: ", p), err) }
  return err
}

func (p *TThreadDump) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "blockedCount", thrift.I64, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:blockedCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.BlockedCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.blockedCount (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:blockedCount: ", p), err) }
  return err
}

func (p *TThreadDump) writeField5(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "waitedTime", thrift.I64, 5); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 5:waitedTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.WaitedTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.waitedTime (5) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 5:waitedTime: ", p), err) }
  return err
}

func (p *TThreadDump) writeField6(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "waitedCount", thrift.I64, 6); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 6:waitedCount: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.WaitedCount)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.waitedCount (6) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 6:waitedCount: ", p), err) }
  return err
}

func (p *TThreadDump) writeField7(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockName", thrift.STRING, 7); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 7:lockName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LockName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockName (7) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 7:lockName: ", p), err) }
  return err
}

func (p *TThreadDump) writeField8(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockOwnerId", thrift.I64, 8); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 8:lockOwnerId: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.LockOwnerId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockOwnerId (8) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 8:lockOwnerId: ", p), err) }
  return err
}

func (p *TThreadDump) writeField9(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockOwnerName", thrift.STRING, 9); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 9:lockOwnerName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.LockOwnerName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.lockOwnerName (9) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 9:lockOwnerName: ", p), err) }
  return err
}

func (p *TThreadDump) writeField10(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "inNative", thrift.BOOL, 10); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 10:inNative: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.InNative)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.inNative (10) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 10:inNative: ", p), err) }
  return err
}

func (p *TThreadDump) writeField11(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "suspended", thrift.BOOL, 11); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 11:suspended: ", p), err) }
  if err := oprot.WriteBool(ctx, bool(p.Suspended)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.suspended (11) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 11:suspended: ", p), err) }
  return err
}

func (p *TThreadDump) writeField12(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadState", thrift.I32, 12); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 12:threadState: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.ThreadState)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.threadState (12) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 12:threadState: ", p), err) }
  return err
}

func (p *TThreadDump) writeField13(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "stackTrace", thrift.LIST, 13); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 13:stackTrace: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.StackTrace)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.StackTrace {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 13:stackTrace: ", p), err) }
  return err
}

func (p *TThreadDump) writeField14(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockedMonitors", thrift.LIST, 14); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 14:lockedMonitors: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.LockedMonitors)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LockedMonitors {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 14:lockedMonitors: ", p), err) }
  return err
}

func (p *TThreadDump) writeField15(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "lockedSynchronizers", thrift.LIST, 15); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 15:lockedSynchronizers: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRING, len(p.LockedSynchronizers)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.LockedSynchronizers {
    if err := oprot.WriteString(ctx, string(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 15:lockedSynchronizers: ", p), err) }
  return err
}

func (p *TThreadDump) Equals(other *TThreadDump) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ThreadName != other.ThreadName { return false }
  if p.ThreadId != other.ThreadId { return false }
  if p.BlockedTime != other.BlockedTime { return false }
  if p.BlockedCount != other.BlockedCount { return false }
  if p.WaitedTime != other.WaitedTime { return false }
  if p.WaitedCount != other.WaitedCount { return false }
  if p.LockName != other.LockName { return false }
  if p.LockOwnerId != other.LockOwnerId { return false }
  if p.LockOwnerName != other.LockOwnerName { return false }
  if p.InNative != other.InNative { return false }
  if p.Suspended != other.Suspended { return false }
  if p.ThreadState != other.ThreadState { return false }
  if len(p.StackTrace) != len(other.StackTrace) { return false }
  for i, _tgt := range p.StackTrace {
    _src3 := other.StackTrace[i]
    if _tgt != _src3 { return false }
  }
  if len(p.LockedMonitors) != len(other.LockedMonitors) { return false }
  for i, _tgt := range p.LockedMonitors {
    _src4 := other.LockedMonitors[i]
    if !_tgt.Equals(_src4) { return false }
  }
  if len(p.LockedSynchronizers) != len(other.LockedSynchronizers) { return false }
  for i, _tgt := range p.LockedSynchronizers {
    _src5 := other.LockedSynchronizers[i]
    if _tgt != _src5 { return false }
  }
  return true
}

func (p *TThreadDump) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TThreadDump(%+v)", *p)
}

func (p *TThreadDump) Validate() error {
  return nil
}
// Attributes:
//  - ThreadDumps
type TCommandThreadDumpResponse struct {
  ThreadDumps []*TThreadDump `thrift:"threadDumps,1" db:"threadDumps" json:"threadDumps"`
}

func NewTCommandThreadDumpResponse() *TCommandThreadDumpResponse {
  return &TCommandThreadDumpResponse{}
}


func (p *TCommandThreadDumpResponse) GetThreadDumps() []*TThreadDump {
  return p.ThreadDumps
}
func (p *TCommandThreadDumpResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCommandThreadDumpResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TThreadDump, 0, size)
  p.ThreadDumps =  tSlice
  for i := 0; i < size; i ++ {
    _elem6 := &TThreadDump{}
    if err := _elem6.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem6), err)
    }
    p.ThreadDumps = append(p.ThreadDumps, _elem6)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TCommandThreadDumpResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCommandThreadDumpResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCommandThreadDumpResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadDumps", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadDumps: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ThreadDumps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ThreadDumps {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadDumps: ", p), err) }
  return err
}

func (p *TCommandThreadDumpResponse) Equals(other *TCommandThreadDumpResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ThreadDumps) != len(other.ThreadDumps) { return false }
  for i, _tgt := range p.ThreadDumps {
    _src7 := other.ThreadDumps[i]
    if !_tgt.Equals(_src7) { return false }
  }
  return true
}

func (p *TCommandThreadDumpResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCommandThreadDumpResponse(%+v)", *p)
}

func (p *TCommandThreadDumpResponse) Validate() error {
  return nil
}
type TCmdActiveThreadCount struct {
}

func NewTCmdActiveThreadCount() *TCmdActiveThreadCount {
  return &TCmdActiveThreadCount{}
}

func (p *TCmdActiveThreadCount) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    if err := iprot.Skip(ctx, fieldTypeId); err != nil {
      return err
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCmdActiveThreadCount) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCmdActiveThreadCount"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCmdActiveThreadCount) Equals(other *TCmdActiveThreadCount) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  return true
}

func (p *TCmdActiveThreadCount) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCmdActiveThreadCount(%+v)", *p)
}

func (p *TCmdActiveThreadCount) Validate() error {
  return nil
}
// Attributes:
//  - HistogramSchemaType
//  - ActiveThreadCount
//  - TimeStamp
type TCmdActiveThreadCountRes struct {
  HistogramSchemaType int32 `thrift:"histogramSchemaType,1" db:"histogramSchemaType" json:"histogramSchemaType"`
  ActiveThreadCount []int32 `thrift:"activeThreadCount,2" db:"activeThreadCount" json:"activeThreadCount"`
  TimeStamp *int64 `thrift:"timeStamp,3" db:"timeStamp" json:"timeStamp,omitempty"`
}

func NewTCmdActiveThreadCountRes() *TCmdActiveThreadCountRes {
  return &TCmdActiveThreadCountRes{}
}


func (p *TCmdActiveThreadCountRes) GetHistogramSchemaType() int32 {
  return p.HistogramSchemaType
}

func (p *TCmdActiveThreadCountRes) GetActiveThreadCount() []int32 {
  return p.ActiveThreadCount
}
var TCmdActiveThreadCountRes_TimeStamp_DEFAULT int64
func (p *TCmdActiveThreadCountRes) GetTimeStamp() int64 {
  if !p.IsSetTimeStamp() {
    return TCmdActiveThreadCountRes_TimeStamp_DEFAULT
  }
return *p.TimeStamp
}
func (p *TCmdActiveThreadCountRes) IsSetTimeStamp() bool {
  return p.TimeStamp != nil
}

func (p *TCmdActiveThreadCountRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCmdActiveThreadCountRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.HistogramSchemaType = v
}
  return nil
}

func (p *TCmdActiveThreadCountRes)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]int32, 0, size)
  p.ActiveThreadCount =  tSlice
  for i := 0; i < size; i ++ {
var _elem8 int32
    if v, err := iprot.ReadI32(ctx); err != nil {
    return thrift.PrependError("error reading field 0: ", err)
} else {
    _elem8 = v
}
    p.ActiveThreadCount = append(p.ActiveThreadCount, _elem8)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TCmdActiveThreadCountRes)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.TimeStamp = &v
}
  return nil
}

func (p *TCmdActiveThreadCountRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCmdActiveThreadCountRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCmdActiveThreadCountRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "histogramSchemaType", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:histogramSchemaType: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.HistogramSchemaType)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.histogramSchemaType (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:histogramSchemaType: ", p), err) }
  return err
}

func (p *TCmdActiveThreadCountRes) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "activeThreadCount", thrift.LIST, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:activeThreadCount: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.I32, len(p.ActiveThreadCount)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ActiveThreadCount {
    if err := oprot.WriteI32(ctx, int32(v)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T. (0) field write error: ", p), err) }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:activeThreadCount: ", p), err) }
  return err
}

func (p *TCmdActiveThreadCountRes) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetTimeStamp() {
    if err := oprot.WriteFieldBegin(ctx, "timeStamp", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:timeStamp: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.TimeStamp)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.timeStamp (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:timeStamp: ", p), err) }
  }
  return err
}

func (p *TCmdActiveThreadCountRes) Equals(other *TCmdActiveThreadCountRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.HistogramSchemaType != other.HistogramSchemaType { return false }
  if len(p.ActiveThreadCount) != len(other.ActiveThreadCount) { return false }
  for i, _tgt := range p.ActiveThreadCount {
    _src9 := other.ActiveThreadCount[i]
    if _tgt != _src9 { return false }
  }
  if p.TimeStamp != other.TimeStamp {
    if p.TimeStamp == nil || other.TimeStamp == nil {
      return false
    }
    if (*p.TimeStamp) != (*other.TimeStamp) { return false }
  }
  return true
}

func (p *TCmdActiveThreadCountRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCmdActiveThreadCountRes(%+v)", *p)
}

func (p *TCmdActiveThreadCountRes) Validate() error {
  return nil
}
// Attributes:
//  - ExecTime
//  - ThreadDump
type TActiveThreadDump struct {
  ExecTime int64 `thrift:"execTime,1" db:"execTime" json:"execTime"`
  ThreadDump *TThreadDump `thrift:"threadDump,2" db:"threadDump" json:"threadDump"`
}

func NewTActiveThreadDump() *TActiveThreadDump {
  return &TActiveThreadDump{}
}


func (p *TActiveThreadDump) GetExecTime() int64 {
  return p.ExecTime
}
var TActiveThreadDump_ThreadDump_DEFAULT *TThreadDump
func (p *TActiveThreadDump) GetThreadDump() *TThreadDump {
  if !p.IsSetThreadDump() {
    return TActiveThreadDump_ThreadDump_DEFAULT
  }
return p.ThreadDump
}
func (p *TActiveThreadDump) IsSetThreadDump() bool {
  return p.ThreadDump != nil
}

func (p *TActiveThreadDump) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRUCT {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TActiveThreadDump)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExecTime = v
}
  return nil
}

func (p *TActiveThreadDump)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  p.ThreadDump = &TThreadDump{}
  if err := p.ThreadDump.Read(ctx, iprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", p.ThreadDump), err)
  }
  return nil
}

func (p *TActiveThreadDump) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TActiveThreadDump"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TActiveThreadDump) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "execTime", thrift.I64, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:execTime: ", p), err) }
  if err := oprot.WriteI64(ctx, int64(p.ExecTime)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.execTime (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:execTime: ", p), err) }
  return err
}

func (p *TActiveThreadDump) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadDump", thrift.STRUCT, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:threadDump: ", p), err) }
  if err := p.ThreadDump.Write(ctx, oprot); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", p.ThreadDump), err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:threadDump: ", p), err) }
  return err
}

func (p *TActiveThreadDump) Equals(other *TActiveThreadDump) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ExecTime != other.ExecTime { return false }
  if !p.ThreadDump.Equals(other.ThreadDump) { return false }
  return true
}

func (p *TActiveThreadDump) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TActiveThreadDump(%+v)", *p)
}

func (p *TActiveThreadDump) Validate() error {
  return nil
}
// Attributes:
//  - ExecTime
type TCmdActiveThreadDump struct {
  ExecTime *int64 `thrift:"execTime,1" db:"execTime" json:"execTime,omitempty"`
}

func NewTCmdActiveThreadDump() *TCmdActiveThreadDump {
  return &TCmdActiveThreadDump{}
}

var TCmdActiveThreadDump_ExecTime_DEFAULT int64
func (p *TCmdActiveThreadDump) GetExecTime() int64 {
  if !p.IsSetExecTime() {
    return TCmdActiveThreadDump_ExecTime_DEFAULT
  }
return *p.ExecTime
}
func (p *TCmdActiveThreadDump) IsSetExecTime() bool {
  return p.ExecTime != nil
}

func (p *TCmdActiveThreadDump) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCmdActiveThreadDump)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ExecTime = &v
}
  return nil
}

func (p *TCmdActiveThreadDump) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCmdActiveThreadDump"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCmdActiveThreadDump) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetExecTime() {
    if err := oprot.WriteFieldBegin(ctx, "execTime", thrift.I64, 1); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:execTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.ExecTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.execTime (1) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 1:execTime: ", p), err) }
  }
  return err
}

func (p *TCmdActiveThreadDump) Equals(other *TCmdActiveThreadDump) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ExecTime != other.ExecTime {
    if p.ExecTime == nil || other.ExecTime == nil {
      return false
    }
    if (*p.ExecTime) != (*other.ExecTime) { return false }
  }
  return true
}

func (p *TCmdActiveThreadDump) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCmdActiveThreadDump(%+v)", *p)
}

func (p *TCmdActiveThreadDump) Validate() error {
  return nil
}
// Attributes:
//  - ThreadDumps
type TCmdActiveThreadDumpRes struct {
  ThreadDumps []*TActiveThreadDump `thrift:"threadDumps,1" db:"threadDumps" json:"threadDumps"`
}

func NewTCmdActiveThreadDumpRes() *TCmdActiveThreadDumpRes {
  return &TCmdActiveThreadDumpRes{}
}


func (p *TCmdActiveThreadDumpRes) GetThreadDumps() []*TActiveThreadDump {
  return p.ThreadDumps
}
func (p *TCmdActiveThreadDumpRes) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.LIST {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCmdActiveThreadDumpRes)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  _, size, err := iprot.ReadListBegin(ctx)
  if err != nil {
    return thrift.PrependError("error reading list begin: ", err)
  }
  tSlice := make([]*TActiveThreadDump, 0, size)
  p.ThreadDumps =  tSlice
  for i := 0; i < size; i ++ {
    _elem10 := &TActiveThreadDump{}
    if err := _elem10.Read(ctx, iprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem10), err)
    }
    p.ThreadDumps = append(p.ThreadDumps, _elem10)
  }
  if err := iprot.ReadListEnd(ctx); err != nil {
    return thrift.PrependError("error reading list end: ", err)
  }
  return nil
}

func (p *TCmdActiveThreadDumpRes) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCmdActiveThreadDumpRes"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCmdActiveThreadDumpRes) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "threadDumps", thrift.LIST, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:threadDumps: ", p), err) }
  if err := oprot.WriteListBegin(ctx, thrift.STRUCT, len(p.ThreadDumps)); err != nil {
    return thrift.PrependError("error writing list begin: ", err)
  }
  for _, v := range p.ThreadDumps {
    if err := v.Write(ctx, oprot); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
    }
  }
  if err := oprot.WriteListEnd(ctx); err != nil {
    return thrift.PrependError("error writing list end: ", err)
  }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:threadDumps: ", p), err) }
  return err
}

func (p *TCmdActiveThreadDumpRes) Equals(other *TCmdActiveThreadDumpRes) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if len(p.ThreadDumps) != len(other.ThreadDumps) { return false }
  for i, _tgt := range p.ThreadDumps {
    _src11 := other.ThreadDumps[i]
    if !_tgt.Equals(_src11) { return false }
  }
  return true
}

func (p *TCmdActiveThreadDumpRes) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCmdActiveThreadDumpRes(%+v)", *p)
}

func (p *TCmdActiveThreadDumpRes) Validate() error {
  return nil
}
// Attributes:
//  - Message
type TCommandEcho struct {
  Message string `thrift:"message,1" db:"message" json:"message"`
}

func NewTCommandEcho() *TCommandEcho {
  return &TCommandEcho{}
}


func (p *TCommandEcho) GetMessage() string {
  return p.Message
}
func (p *TCommandEcho) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCommandEcho)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.Message = v
}
  return nil
}

func (p *TCommandEcho) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCommandEcho"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCommandEcho) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:message: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.Message)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.message (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:message: ", p), err) }
  return err
}

func (p *TCommandEcho) Equals(other *TCommandEcho) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.Message != other.Message { return false }
  return true
}

func (p *TCommandEcho) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCommandEcho(%+v)", *p)
}

func (p *TCommandEcho) Validate() error {
  return nil
}
// Attributes:
//  - ApplicationName
//  - AgentId
//  - StartTime
//  - Payload
type TCommandTransfer struct {
  ApplicationName string `thrift:"applicationName,1" db:"applicationName" json:"applicationName"`
  AgentId string `thrift:"agentId,2" db:"agentId" json:"agentId"`
  StartTime *int64 `thrift:"startTime,3" db:"startTime" json:"startTime,omitempty"`
  Payload []byte `thrift:"payload,4" db:"payload" json:"payload"`
}

func NewTCommandTransfer() *TCommandTransfer {
  return &TCommandTransfer{}
}


func (p *TCommandTransfer) GetApplicationName() string {
  return p.ApplicationName
}

func (p *TCommandTransfer) GetAgentId() string {
  return p.AgentId
}
var TCommandTransfer_StartTime_DEFAULT int64
func (p *TCommandTransfer) GetStartTime() int64 {
  if !p.IsSetStartTime() {
    return TCommandTransfer_StartTime_DEFAULT
  }
return *p.StartTime
}

func (p *TCommandTransfer) GetPayload() []byte {
  return p.Payload
}
func (p *TCommandTransfer) IsSetStartTime() bool {
  return p.StartTime != nil
}

func (p *TCommandTransfer) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.I64 {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 4:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField4(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCommandTransfer)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  p.ApplicationName = v
}
  return nil
}

func (p *TCommandTransfer)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.AgentId = v
}
  return nil
}

func (p *TCommandTransfer)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI64(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.StartTime = &v
}
  return nil
}

func (p *TCommandTransfer)  ReadField4(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 4: ", err)
} else {
  p.Payload = v
}
  return nil
}

func (p *TCommandTransfer) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCommandTransfer"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
    if err := p.writeField4(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCommandTransfer) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "applicationName", thrift.STRING, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:applicationName: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.ApplicationName)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.applicationName (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:applicationName: ", p), err) }
  return err
}

func (p *TCommandTransfer) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "agentId", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:agentId: ", p), err) }
  if err := oprot.WriteString(ctx, string(p.AgentId)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.agentId (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:agentId: ", p), err) }
  return err
}

func (p *TCommandTransfer) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetStartTime() {
    if err := oprot.WriteFieldBegin(ctx, "startTime", thrift.I64, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:startTime: ", p), err) }
    if err := oprot.WriteI64(ctx, int64(*p.StartTime)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.startTime (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:startTime: ", p), err) }
  }
  return err
}

func (p *TCommandTransfer) writeField4(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "payload", thrift.STRING, 4); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:payload: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Payload); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payload (4) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 4:payload: ", p), err) }
  return err
}

func (p *TCommandTransfer) Equals(other *TCommandTransfer) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.ApplicationName != other.ApplicationName { return false }
  if p.AgentId != other.AgentId { return false }
  if p.StartTime != other.StartTime {
    if p.StartTime == nil || other.StartTime == nil {
      return false
    }
    if (*p.StartTime) != (*other.StartTime) { return false }
  }
  if bytes.Compare(p.Payload, other.Payload) != 0 { return false }
  return true
}

func (p *TCommandTransfer) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCommandTransfer(%+v)", *p)
}

func (p *TCommandTransfer) Validate() error {
  return nil
}
// Attributes:
//  - RouteResult_
//  - Payload
//  - Message
type TCommandTransferResponse struct {
  RouteResult_ TRouteResult_ `thrift:"routeResult,1" db:"routeResult" json:"routeResult"`
  Payload []byte `thrift:"payload,2" db:"payload" json:"payload"`
  Message *string `thrift:"message,3" db:"message" json:"message,omitempty"`
}

func NewTCommandTransferResponse() *TCommandTransferResponse {
  return &TCommandTransferResponse{}
}


func (p *TCommandTransferResponse) GetRouteResult_() TRouteResult_ {
  return p.RouteResult_
}

func (p *TCommandTransferResponse) GetPayload() []byte {
  return p.Payload
}
var TCommandTransferResponse_Message_DEFAULT string
func (p *TCommandTransferResponse) GetMessage() string {
  if !p.IsSetMessage() {
    return TCommandTransferResponse_Message_DEFAULT
  }
return *p.Message
}
func (p *TCommandTransferResponse) IsSetMessage() bool {
  return p.Message != nil
}

func (p *TCommandTransferResponse) Read(ctx context.Context, iprot thrift.TProtocol) error {
  if _, err := iprot.ReadStructBegin(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
  }


  for {
    _, fieldTypeId, fieldId, err := iprot.ReadFieldBegin(ctx)
    if err != nil {
      return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
    }
    if fieldTypeId == thrift.STOP { break; }
    switch fieldId {
    case 1:
      if fieldTypeId == thrift.I32 {
        if err := p.ReadField1(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 2:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField2(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    case 3:
      if fieldTypeId == thrift.STRING {
        if err := p.ReadField3(ctx, iprot); err != nil {
          return err
        }
      } else {
        if err := iprot.Skip(ctx, fieldTypeId); err != nil {
          return err
        }
      }
    default:
      if err := iprot.Skip(ctx, fieldTypeId); err != nil {
        return err
      }
    }
    if err := iprot.ReadFieldEnd(ctx); err != nil {
      return err
    }
  }
  if err := iprot.ReadStructEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
  }
  return nil
}

func (p *TCommandTransferResponse)  ReadField1(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadI32(ctx); err != nil {
  return thrift.PrependError("error reading field 1: ", err)
} else {
  temp := TRouteResult_(v)
  p.RouteResult_ = temp
}
  return nil
}

func (p *TCommandTransferResponse)  ReadField2(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadBinary(ctx); err != nil {
  return thrift.PrependError("error reading field 2: ", err)
} else {
  p.Payload = v
}
  return nil
}

func (p *TCommandTransferResponse)  ReadField3(ctx context.Context, iprot thrift.TProtocol) error {
  if v, err := iprot.ReadString(ctx); err != nil {
  return thrift.PrependError("error reading field 3: ", err)
} else {
  p.Message = &v
}
  return nil
}

func (p *TCommandTransferResponse) Write(ctx context.Context, oprot thrift.TProtocol) error {
  if err := oprot.WriteStructBegin(ctx, "TCommandTransferResponse"); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err) }
  if p != nil {
    if err := p.writeField1(ctx, oprot); err != nil { return err }
    if err := p.writeField2(ctx, oprot); err != nil { return err }
    if err := p.writeField3(ctx, oprot); err != nil { return err }
  }
  if err := oprot.WriteFieldStop(ctx); err != nil {
    return thrift.PrependError("write field stop error: ", err) }
  if err := oprot.WriteStructEnd(ctx); err != nil {
    return thrift.PrependError("write struct stop error: ", err) }
  return nil
}

func (p *TCommandTransferResponse) writeField1(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "routeResult", thrift.I32, 1); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:routeResult: ", p), err) }
  if err := oprot.WriteI32(ctx, int32(p.RouteResult_)); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.routeResult (1) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 1:routeResult: ", p), err) }
  return err
}

func (p *TCommandTransferResponse) writeField2(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if err := oprot.WriteFieldBegin(ctx, "payload", thrift.STRING, 2); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:payload: ", p), err) }
  if err := oprot.WriteBinary(ctx, p.Payload); err != nil {
  return thrift.PrependError(fmt.Sprintf("%T.payload (2) field write error: ", p), err) }
  if err := oprot.WriteFieldEnd(ctx); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T write field end error 2:payload: ", p), err) }
  return err
}

func (p *TCommandTransferResponse) writeField3(ctx context.Context, oprot thrift.TProtocol) (err error) {
  if p.IsSetMessage() {
    if err := oprot.WriteFieldBegin(ctx, "message", thrift.STRING, 3); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:message: ", p), err) }
    if err := oprot.WriteString(ctx, string(*p.Message)); err != nil {
    return thrift.PrependError(fmt.Sprintf("%T.message (3) field write error: ", p), err) }
    if err := oprot.WriteFieldEnd(ctx); err != nil {
      return thrift.PrependError(fmt.Sprintf("%T write field end error 3:message: ", p), err) }
  }
  return err
}

func (p *TCommandTransferResponse) Equals(other *TCommandTransferResponse) bool {
  if p == other {
    return true
  } else if p == nil || other == nil {
    return false
  }
  if p.RouteResult_ != other.RouteResult_ { return false }
  if bytes.Compare(p.Payload, other.Payload) != 0 { return false }
  if p.Message != other.Message {
    if p.Message == nil || other.Message == nil {
      return false
    }
    if (*p.Message) != (*other.Message) { return false }
  }
  return true
}

func (p *TCommandTransferResponse) String() string {
  if p == nil {
    return "<nil>"
  }
  return fmt.Sprintf("TCommandTransferResponse(%+v)", *p)
}

func (p *TCommandTransferResponse) Validate() error {
  return nil
}
